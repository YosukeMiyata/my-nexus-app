"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuels+vm-asm@0.60.2";
exports.ids = ["vendor-chunks/@fuels+vm-asm@0.60.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@fuels+vm-asm@0.60.2/node_modules/@fuels/vm-asm/dist/node/index.cjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuels+vm-asm@0.60.2/node_modules/@fuels/vm-asm/dist/node/index.cjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nlet wasm$1;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm$1.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n/**\n * Construct a `GM` instruction from its arguments.\n * @param {number} ra\n * @param {GMArgs} args\n * @returns {Instruction}\n */\nfunction gm_args(ra, args) {\n    const ret = wasm$1.gm_args(ra, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `GM` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {GTFArgs} args\n * @returns {Instruction}\n */\nfunction gtf_args(ra, rb, args) {\n    const ret = wasm$1.gtf_args(ra, rb, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDCM` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {CompareArgs} args\n * @returns {Instruction}\n */\nfunction wdcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQCM` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {CompareArgs} args\n * @returns {Instruction}\n */\nfunction wqcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDOP` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MathArgs} args\n * @returns {Instruction}\n */\nfunction wdop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQOP` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MathArgs} args\n * @returns {Instruction}\n */\nfunction wqop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDML` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MulArgs} args\n * @returns {Instruction}\n */\nfunction wdml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQML` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MulArgs} args\n * @returns {Instruction}\n */\nfunction wqml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDDV` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {DivArgs} args\n * @returns {Instruction}\n */\nfunction wddv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wddv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQDV` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {DivArgs} args\n * @returns {Instruction}\n */\nfunction wqdv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqdv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Adds two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction add(dst, lhs, rhs) {\n    const ret = wasm$1.add(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ANDs two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction and(dst, lhs, rhs) {\n    const ret = wasm$1.and(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divides two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction div(dst, lhs, rhs) {\n    const ret = wasm$1.div(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compares two registers for equality.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction eq(dst, lhs, rhs) {\n    const ret = wasm$1.eq(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Raises one register to the power of another.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction exp(dst, lhs, rhs) {\n    const ret = wasm$1.exp(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compares two registers for greater-than.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction gt(dst, lhs, rhs) {\n    const ret = wasm$1.gt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compares two registers for less-than.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction lt(dst, lhs, rhs) {\n    const ret = wasm$1.lt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The integer logarithm of a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mlog(dst, lhs, rhs) {\n    const ret = wasm$1.mlog(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The integer root of a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mroo(dst, lhs, rhs) {\n    const ret = wasm$1.mroo(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Modulo remainder of two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mod_(dst, lhs, rhs) {\n    const ret = wasm$1.mod_(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy from one register to another.\n * @param {number} dst\n * @param {number} src\n * @returns {Instruction}\n */\nfunction move_(dst, src) {\n    const ret = wasm$1.move_(dst, src);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiplies two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mul(dst, lhs, rhs) {\n    const ret = wasm$1.mul(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise NOT a register.\n * @param {number} dst\n * @param {number} arg\n * @returns {Instruction}\n */\nfunction not(dst, arg) {\n    const ret = wasm$1.not(dst, arg);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ORs two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction or(dst, lhs, rhs) {\n    const ret = wasm$1.or(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Left shifts a register by a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction sll(dst, lhs, rhs) {\n    const ret = wasm$1.sll(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Right shifts a register by a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction srl(dst, lhs, rhs) {\n    const ret = wasm$1.srl(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Subtracts two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction sub(dst, lhs, rhs) {\n    const ret = wasm$1.sub(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise XORs two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction xor(dst, lhs, rhs) {\n    const ret = wasm$1.xor(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Fused multiply-divide with arbitrary precision intermediate step.\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} divisor\n * @returns {Instruction}\n */\nfunction mldv(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Return from context.\n * @param {number} value\n * @returns {Instruction}\n */\nfunction ret(value) {\n    const ret = wasm$1.ret(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Return from context with data.\n * @param {number} addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction retd(addr, len) {\n    const ret = wasm$1.retd(addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Allocate a number of bytes from the heap.\n * @param {number} bytes\n * @returns {Instruction}\n */\nfunction aloc(bytes) {\n    const ret = wasm$1.aloc(bytes);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Clear a variable number of bytes in memory.\n * @param {number} dst_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction mcl(dst_addr, len) {\n    const ret = wasm$1.mcl(dst_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy a variable number of bytes in memory.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction mcp(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcp(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compare bytes in memory.\n * @param {number} result\n * @param {number} lhs_addr\n * @param {number} rhs_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction meq(result, lhs_addr, rhs_addr, len) {\n    const ret = wasm$1.meq(result, lhs_addr, rhs_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get block header hash for height.\n * @param {number} dst\n * @param {number} heigth\n * @returns {Instruction}\n */\nfunction bhsh(dst, heigth) {\n    const ret = wasm$1.bhsh(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get current block height.\n * @param {number} dst\n * @returns {Instruction}\n */\nfunction bhei(dst) {\n    const ret = wasm$1.bhei(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n * @param {number} amount\n * @param {number} sub_id_addr\n * @returns {Instruction}\n */\nfunction burn(amount, sub_id_addr) {\n    const ret = wasm$1.burn(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Call a contract.\n * @param {number} target_struct\n * @param {number} fwd_coins\n * @param {number} asset_id_addr\n * @param {number} fwd_gas\n * @returns {Instruction}\n */\nfunction call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n    const ret = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy contract code for a contract.\n * @param {number} dst_addr\n * @param {number} contract_id_addr\n * @param {number} offset\n * @param {number} len\n * @returns {Instruction}\n */\nfunction ccp(dst_addr, contract_id_addr, offset, len) {\n    const ret = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get code root of a contract.\n * @param {number} dst_addr\n * @param {number} contract_id_addr\n * @returns {Instruction}\n */\nfunction croo(dst_addr, contract_id_addr) {\n    const ret = wasm$1.croo(dst_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get code size of a contract.\n * @param {number} dst\n * @param {number} contract_id_addr\n * @returns {Instruction}\n */\nfunction csiz(dst, contract_id_addr) {\n    const ret = wasm$1.csiz(dst, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get current block proposer's address.\n * @param {number} dst\n * @returns {Instruction}\n */\nfunction cb(dst) {\n    const ret = wasm$1.cb(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load code as executable either from contract, blob, or memory.\n * @param {number} src_addr\n * @param {number} offset\n * @param {number} len\n * @param {number} mode\n * @returns {Instruction}\n */\nfunction ldc(src_addr, offset, len, mode) {\n    const ret = wasm$1.ldc(src_addr, offset, len, mode);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Log an event.\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @returns {Instruction}\n */\nfunction log(a, b, c, d) {\n    const ret = wasm$1.log(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Log data.\n * @param {number} a\n * @param {number} b\n * @param {number} addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction logd(a, b, addr, len) {\n    const ret = wasm$1.logd(a, b, addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n * @param {number} amount\n * @param {number} sub_id_addr\n * @returns {Instruction}\n */\nfunction mint(amount, sub_id_addr) {\n    const ret = wasm$1.mint(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Halt execution, reverting state changes and returning a value.\n * @param {number} value\n * @returns {Instruction}\n */\nfunction rvrt(value) {\n    const ret = wasm$1.rvrt(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Clear a series of slots from contract storage.\n * @param {number} key_addr\n * @param {number} status\n * @param {number} lenq\n * @returns {Instruction}\n */\nfunction scwq(key_addr, status, lenq) {\n    const ret = wasm$1.scwq(key_addr, status, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load a word from contract storage.\n * @param {number} dst\n * @param {number} status\n * @param {number} key_addr\n * @returns {Instruction}\n */\nfunction srw(dst, status, key_addr) {\n    const ret = wasm$1.srw(dst, status, key_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load a series of 32 byte slots from contract storage.\n * @param {number} dst_addr\n * @param {number} status\n * @param {number} key_addr\n * @param {number} lenq\n * @returns {Instruction}\n */\nfunction srwq(dst_addr, status, key_addr, lenq) {\n    const ret = wasm$1.srwq(dst_addr, status, key_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Store a word in contract storage.\n * @param {number} key_addr\n * @param {number} status\n * @param {number} value\n * @returns {Instruction}\n */\nfunction sww(key_addr, status, value) {\n    const ret = wasm$1.sww(key_addr, status, value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Store a series of 32 byte slots in contract storage.\n * @param {number} key_addr\n * @param {number} status\n * @param {number} src_addr\n * @param {number} lenq\n * @returns {Instruction}\n */\nfunction swwq(key_addr, status, src_addr, lenq) {\n    const ret = wasm$1.swwq(key_addr, status, src_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Transfer coins to a contract unconditionally.\n * @param {number} contract_id_addr\n * @param {number} amount\n * @param {number} asset_id_addr\n * @returns {Instruction}\n */\nfunction tr(contract_id_addr, amount, asset_id_addr) {\n    const ret = wasm$1.tr(contract_id_addr, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Transfer coins to a variable output.\n * @param {number} contract_id_addr\n * @param {number} output_index\n * @param {number} amount\n * @param {number} asset_id_addr\n * @returns {Instruction}\n */\nfunction tro(contract_id_addr, output_index, amount, asset_id_addr) {\n    const ret = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n * @param {number} dst_addr\n * @param {number} sig_addr\n * @param {number} msg_hash_addr\n * @returns {Instruction}\n */\nfunction eck1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n * @param {number} dst_addr\n * @param {number} sig_addr\n * @param {number} msg_hash_addr\n * @returns {Instruction}\n */\nfunction ecr1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Verify ED25519 public key and signature match a message.\n * @param {number} pub_key_addr\n * @param {number} sig_addr\n * @param {number} msg_addr\n * @param {number} msg_len\n * @returns {Instruction}\n */\nfunction ed19(pub_key_addr, sig_addr, msg_addr, msg_len) {\n    const ret = wasm$1.ed19(pub_key_addr, sig_addr, msg_addr, msg_len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The keccak-256 hash of a slice.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction k256(dst_addr, src_addr, len) {\n    const ret = wasm$1.k256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The SHA-2-256 hash of a slice.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction s256(dst_addr, src_addr, len) {\n    const ret = wasm$1.s256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get timestamp of block at given height.\n * @param {number} dst\n * @param {number} heigth\n * @returns {Instruction}\n */\nfunction time(dst, heigth) {\n    const ret = wasm$1.time(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Performs no operation.\n * @returns {Instruction}\n */\nfunction noop() {\n    const ret = wasm$1.noop();\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Set flag register to a register.\n * @param {number} value\n * @returns {Instruction}\n */\nfunction flag(value) {\n    const ret = wasm$1.flag(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get the balance of contract of an asset ID.\n * @param {number} dst\n * @param {number} asset_id_addr\n * @param {number} contract_id_addr\n * @returns {Instruction}\n */\nfunction bal(dst, asset_id_addr, contract_id_addr) {\n    const ret = wasm$1.bal(dst, asset_id_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic jump.\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction jmp(abs_target) {\n    const ret = wasm$1.jmp(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Conditional dynamic jump.\n * @param {number} abs_target\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction jne(abs_target, lhs, rhs) {\n    const ret = wasm$1.jne(abs_target, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Send a message to recipient address with call abi, coins, and output.\n * @param {number} recipient_addr\n * @param {number} data_addr\n * @param {number} data_len\n * @param {number} coins\n * @returns {Instruction}\n */\nfunction smo(recipient_addr, data_addr, data_len, coins) {\n    const ret = wasm$1.smo(recipient_addr, data_addr, data_len, coins);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Adds a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction addi(dst, lhs, rhs) {\n    const ret = wasm$1.addi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ANDs a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction andi(dst, lhs, rhs) {\n    const ret = wasm$1.andi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divides a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction divi(dst, lhs, rhs) {\n    const ret = wasm$1.divi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Raises one register to the power of an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction expi(dst, lhs, rhs) {\n    const ret = wasm$1.expi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Modulo remainder of a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction modi(dst, lhs, rhs) {\n    const ret = wasm$1.modi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiplies a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction muli(dst, lhs, rhs) {\n    const ret = wasm$1.muli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ORs a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction ori(dst, lhs, rhs) {\n    const ret = wasm$1.ori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Left shifts a register by an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction slli(dst, lhs, rhs) {\n    const ret = wasm$1.slli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Right shifts a register by an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction srli(dst, lhs, rhs) {\n    const ret = wasm$1.srli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Subtracts a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction subi(dst, lhs, rhs) {\n    const ret = wasm$1.subi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise XORs a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction xori(dst, lhs, rhs) {\n    const ret = wasm$1.xori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Conditional jump.\n * @param {number} cond_lhs\n * @param {number} cond_rhs\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction jnei(cond_lhs, cond_rhs, abs_target) {\n    const ret = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * A byte is loaded from the specified address offset by an immediate value.\n * @param {number} dst\n * @param {number} addr\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction lb(dst, addr, offset) {\n    const ret = wasm$1.lb(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * A word is loaded from the specified address offset by an immediate value.\n * @param {number} dst\n * @param {number} addr\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction lw(dst, addr, offset) {\n    const ret = wasm$1.lw(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Write the least significant byte of a register to memory.\n * @param {number} addr\n * @param {number} value\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction sb(addr, value, offset) {\n    const ret = wasm$1.sb(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Write a register to memory.\n * @param {number} addr\n * @param {number} value\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction sw(addr, value, offset) {\n    const ret = wasm$1.sw(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy an immediate number of bytes in memory.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction mcpi(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcpi(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get transaction fields.\n * @param {number} dst\n * @param {number} arg\n * @param {number} selector\n * @returns {Instruction}\n */\nfunction gtf(dst, arg, selector) {\n    const ret = wasm$1.gtf(dst, arg, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Clear an immediate number of bytes in memory.\n * @param {number} addr\n * @param {number} count\n * @returns {Instruction}\n */\nfunction mcli(addr, count) {\n    const ret = wasm$1.mcli(addr, count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get metadata from memory.\n * @param {number} dst\n * @param {number} selector\n * @returns {Instruction}\n */\nfunction gm(dst, selector) {\n    const ret = wasm$1.gm(dst, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy immediate value into a register\n * @param {number} dst\n * @param {number} val\n * @returns {Instruction}\n */\nfunction movi(dst, val) {\n    const ret = wasm$1.movi(dst, val);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Conditional jump against zero.\n * @param {number} cond_nz\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction jnzi(cond_nz, abs_target) {\n    const ret = wasm$1.jnzi(cond_nz, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Unconditional dynamic relative jump forwards, with a constant offset.\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jmpf(dynamic, fixed) {\n    const ret = wasm$1.jmpf(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Unconditional dynamic relative jump backwards, with a constant offset.\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jmpb(dynamic, fixed) {\n    const ret = wasm$1.jmpb(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump forwards, conditional against zero, with a constant offset.\n * @param {number} cond_nz\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jnzf(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzf(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump backwards, conditional against zero, with a constant offset.\n * @param {number} cond_nz\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jnzb(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzb(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n * @param {number} cond_lhs\n * @param {number} cond_rhs\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jnef(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n * @param {number} cond_lhs\n * @param {number} cond_rhs\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jneb(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Jump.\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction ji(abs_target) {\n    const ret = wasm$1.ji(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Extend the current call frame's stack by an immediate value.\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfei(amount) {\n    const ret = wasm$1.cfei(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Shrink the current call frame's stack by an immediate value.\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfsi(amount) {\n    const ret = wasm$1.cfsi(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Extend the current call frame's stack\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfe(amount) {\n    const ret = wasm$1.cfe(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Shrink the current call frame's stack\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfs(amount) {\n    const ret = wasm$1.cfs(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Push a bitmask-selected set of registers in range 16..40 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction pshl(bitmask) {\n    const ret = wasm$1.pshl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Push a bitmask-selected set of registers in range 40..64 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction pshh(bitmask) {\n    const ret = wasm$1.pshh(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Pop a bitmask-selected set of registers in range 16..40 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction popl(bitmask) {\n    const ret = wasm$1.popl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Pop a bitmask-selected set of registers in range 40..64 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction poph(bitmask) {\n    const ret = wasm$1.poph(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compare 128bit integers\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wdcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compare 256bit integers\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Simple 128bit operations\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wdop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Simple 256bit operations\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiply 128bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wdml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiply 256bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divide 128bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wddv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wddv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divide 256bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqdv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqdv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Fused multiply-divide 128bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} divisor\n * @returns {Instruction}\n */\nfunction wdmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Fused multiply-divide 256bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} divisor\n * @returns {Instruction}\n */\nfunction wqmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * AddMod 128bit\n * @param {number} dst\n * @param {number} add_lhs\n * @param {number} add_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wdam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * AddMod 256bit\n * @param {number} dst\n * @param {number} add_lhs\n * @param {number} add_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wqam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * MulMod 128bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wdmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * MulMod 256bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wqmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Call external function\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @returns {Instruction}\n */\nfunction ecal(a, b, c, d) {\n    const ret = wasm$1.ecal(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get blob size\n * @param {number} dst\n * @param {number} blob_id_ptr\n * @returns {Instruction}\n */\nfunction bsiz(dst, blob_id_ptr) {\n    const ret = wasm$1.bsiz(dst, blob_id_ptr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load blob as data\n * @param {number} dst_ptr\n * @param {number} blob_id_ptr\n * @param {number} offset\n * @param {number} len\n * @returns {Instruction}\n */\nfunction bldd(dst_ptr, blob_id_ptr, offset, len) {\n    const ret = wasm$1.bldd(dst_ptr, blob_id_ptr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Given some curve, performs an operation on points\n * @param {number} dst\n * @param {number} curve_id\n * @param {number} operation_type\n * @param {number} points_ptr\n * @returns {Instruction}\n */\nfunction ecop(dst, curve_id, operation_type, points_ptr) {\n    const ret = wasm$1.ecop(dst, curve_id, operation_type, points_ptr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Given some curve, performs a pairing on groups of points\n * @param {number} success\n * @param {number} curve_id\n * @param {number} number_elements\n * @param {number} points_ptr\n * @returns {Instruction}\n */\nfunction epar(success, curve_id, number_elements, points_ptr) {\n    const ret = wasm$1.epar(success, curve_id, number_elements, points_ptr);\n    return Instruction.__wrap(ret);\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm$1.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm$1.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n * Comparison mode used by WDCM and WQCM instructions.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nconst CompareMode = Object.freeze({\n    /**\n     * Equality (`==`)\n     */\n    EQ: 0, \"0\": \"EQ\",\n    /**\n     * Inequality (`!=`)\n     */\n    NE: 1, \"1\": \"NE\",\n    /**\n     * Less than (`<`)\n     */\n    LT: 2, \"2\": \"LT\",\n    /**\n     * Greater than (`>`)\n     */\n    GT: 3, \"3\": \"GT\",\n    /**\n     * Less than or equals (`>=`)\n     */\n    LTE: 4, \"4\": \"LTE\",\n    /**\n     * Greater than or equals (`>=`)\n     */\n    GTE: 5, \"5\": \"GTE\",\n    /**\n     * Number of leading zeroes in lhs (`lzcnt`) (discards rhs)\n     */\n    LZC: 6, \"6\": \"LZC\",\n});\n/**\n * r\" Argument list for GM (get metadata) instruction\n * r\" The VM is the only who should match this struct, and it *MUST* always perform\n * r\" exhaustive match so all offered variants are covered.\n * @enum {1 | 2 | 3 | 4 | 5 | 6 | 7}\n */\nconst GMArgs = Object.freeze({\n    /**\n     * r\" Get if caller is external.\n     */\n    IsCallerExternal: 1, \"1\": \"IsCallerExternal\",\n    /**\n     * r\" Get caller's contract ID.\n     */\n    GetCaller: 2, \"2\": \"GetCaller\",\n    /**\n     * r\" Get index of current predicate.\n     */\n    GetVerifyingPredicate: 3, \"3\": \"GetVerifyingPredicate\",\n    /**\n     * r\" Get the Chain ID this VM is operating within\n     */\n    GetChainId: 4, \"4\": \"GetChainId\",\n    /**\n     * r\" Get memory address where the transaction is located\n     */\n    TxStart: 5, \"5\": \"TxStart\",\n    /**\n     * r\" Get memory address of base asset ID\n     */\n    BaseAssetId: 6, \"6\": \"BaseAssetId\",\n    /**\n     * r\" Get gas price for block\n     */\n    GetGasPrice: 7, \"7\": \"GetGasPrice\",\n});\n/**\n * r\" Argument list for GTF (get tx fields) instruction\n * r\" The VM is the only who should match this struct, and it *MUST* always perform\n * r\" exhaustive match so all offered variants are covered.\n * @enum {1 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 512 | 513 | 514 | 515 | 516 | 517 | 518 | 519 | 521 | 522 | 523 | 524 | 525 | 544 | 545 | 549 | 576 | 577 | 578 | 579 | 580 | 581 | 582 | 583 | 584 | 585 | 586 | 587 | 768 | 769 | 770 | 771 | 772 | 775 | 776 | 1024 | 1025 | 1280 | 1281 | 1282 | 1283 | 1284 | 1285 | 1536 | 1537 | 1538 | 1539 | 1540 | 1541 | 1792 | 1793 | 2048 | 2304 | 2305 | 2306 | 2307 | 2308 | 2309}\n */\nconst GTFArgs = Object.freeze({\n    /**\n     * r\" Set `$rA` to `tx.type`\n     */\n    Type: 1, \"1\": \"Type\",\n    /**\n     * r\" Set `$rA` to `tx.scriptGasLimit`\n     */\n    ScriptGasLimit: 2, \"2\": \"ScriptGasLimit\",\n    /**\n     * r\" Set `$rA` to `tx.scriptLength`\n     */\n    ScriptLength: 3, \"3\": \"ScriptLength\",\n    /**\n     * r\" Set `$rA` to `tx.scriptDataLength`\n     */\n    ScriptDataLength: 4, \"4\": \"ScriptDataLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputsCount`\n     */\n    ScriptInputsCount: 5, \"5\": \"ScriptInputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.outputsCount`\n     */\n    ScriptOutputsCount: 6, \"6\": \"ScriptOutputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.witnessesCount`\n     */\n    ScriptWitnessesCount: 7, \"7\": \"ScriptWitnessesCount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.script`\n     */\n    Script: 9, \"9\": \"Script\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.scriptData`\n     */\n    ScriptData: 10, \"10\": \"ScriptData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n     */\n    ScriptInputAtIndex: 11, \"11\": \"ScriptInputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n     */\n    ScriptOutputAtIndex: 12, \"12\": \"ScriptOutputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n     */\n    ScriptWitnessAtIndex: 13, \"13\": \"ScriptWitnessAtIndex\",\n    /**\n     * r\" Set `$rA` to size of the transaction in memory, in bytes\n     */\n    TxLength: 14, \"14\": \"TxLength\",\n    /**\n     * r\" Set `$rA` to `tx.bytecodeWitnessIndex`\n     */\n    CreateBytecodeWitnessIndex: 257, \"257\": \"CreateBytecodeWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.storageSlotsCount`\n     */\n    CreateStorageSlotsCount: 258, \"258\": \"CreateStorageSlotsCount\",\n    /**\n     * r\" Set `$rA` to `tx.inputsCount`\n     */\n    CreateInputsCount: 259, \"259\": \"CreateInputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.outputsCount`\n     */\n    CreateOutputsCount: 260, \"260\": \"CreateOutputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.witnessesCount`\n     */\n    CreateWitnessesCount: 261, \"261\": \"CreateWitnessesCount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.salt`\n     */\n    CreateSalt: 262, \"262\": \"CreateSalt\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.storageSlots[$rB]`\n     */\n    CreateStorageSlotAtIndex: 263, \"263\": \"CreateStorageSlotAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n     */\n    CreateInputAtIndex: 264, \"264\": \"CreateInputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n     */\n    CreateOutputAtIndex: 265, \"265\": \"CreateOutputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n     */\n    CreateWitnessAtIndex: 266, \"266\": \"CreateWitnessAtIndex\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].type`\n     */\n    InputType: 512, \"512\": \"InputType\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n     */\n    InputCoinTxId: 513, \"513\": \"InputCoinTxId\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n     */\n    InputCoinOutputIndex: 514, \"514\": \"InputCoinOutputIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].owner`\n     */\n    InputCoinOwner: 515, \"515\": \"InputCoinOwner\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].amount`\n     */\n    InputCoinAmount: 516, \"516\": \"InputCoinAmount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`\n     */\n    InputCoinAssetId: 517, \"517\": \"InputCoinAssetId\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n     */\n    InputCoinTxPointer: 518, \"518\": \"InputCoinTxPointer\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n     */\n    InputCoinWitnessIndex: 519, \"519\": \"InputCoinWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n     */\n    InputCoinPredicateLength: 521, \"521\": \"InputCoinPredicateLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n     */\n    InputCoinPredicateDataLength: 522, \"522\": \"InputCoinPredicateDataLength\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n     */\n    InputCoinPredicate: 523, \"523\": \"InputCoinPredicate\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n     */\n    InputCoinPredicateData: 524, \"524\": \"InputCoinPredicateData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n     */\n    InputCoinPredicateGasUsed: 525, \"525\": \"InputCoinPredicateGasUsed\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n     */\n    InputContractTxId: 544, \"544\": \"InputContractTxId\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n     */\n    InputContractOutputIndex: 545, \"545\": \"InputContractOutputIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`\n     */\n    InputContractId: 549, \"549\": \"InputContractId\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].sender`\n     */\n    InputMessageSender: 576, \"576\": \"InputMessageSender\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`\n     */\n    InputMessageRecipient: 577, \"577\": \"InputMessageRecipient\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].amount`\n     */\n    InputMessageAmount: 578, \"578\": \"InputMessageAmount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`\n     */\n    InputMessageNonce: 579, \"579\": \"InputMessageNonce\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n     */\n    InputMessageWitnessIndex: 580, \"580\": \"InputMessageWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].dataLength`\n     */\n    InputMessageDataLength: 581, \"581\": \"InputMessageDataLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n     */\n    InputMessagePredicateLength: 582, \"582\": \"InputMessagePredicateLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n     */\n    InputMessagePredicateDataLength: 583, \"583\": \"InputMessagePredicateDataLength\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].data`\n     */\n    InputMessageData: 584, \"584\": \"InputMessageData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n     */\n    InputMessagePredicate: 585, \"585\": \"InputMessagePredicate\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n     */\n    InputMessagePredicateData: 586, \"586\": \"InputMessagePredicateData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n     */\n    InputMessagePredicateGasUsed: 587, \"587\": \"InputMessagePredicateGasUsed\",\n    /**\n     * r\" Set `$rA` to `tx.outputs[$rB].type`\n     */\n    OutputType: 768, \"768\": \"OutputType\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].to`\n     */\n    OutputCoinTo: 769, \"769\": \"OutputCoinTo\",\n    /**\n     * r\" Set `$rA` to `tx.outputs[$rB].amount`\n     */\n    OutputCoinAmount: 770, \"770\": \"OutputCoinAmount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`\n     */\n    OutputCoinAssetId: 771, \"771\": \"OutputCoinAssetId\",\n    /**\n     * r\" Set `$rA` to `tx.outputs[$rB].inputIndex`\n     */\n    OutputContractInputIndex: 772, \"772\": \"OutputContractInputIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`\n     */\n    OutputContractCreatedContractId: 775, \"775\": \"OutputContractCreatedContractId\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n     */\n    OutputContractCreatedStateRoot: 776, \"776\": \"OutputContractCreatedStateRoot\",\n    /**\n     * r\" Set `$rA` to `tx.witnesses[$rB].dataLength`\n     */\n    WitnessDataLength: 1024, \"1024\": \"WitnessDataLength\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB].data`\n     */\n    WitnessData: 1025, \"1025\": \"WitnessData\",\n    /**\n     * r\" Set `$rA` to `tx.policyTypes`\n     */\n    PolicyTypes: 1280, \"1280\": \"PolicyTypes\",\n    /**\n     * r\" Set `$rA` to `tx.policies[0x00].gasPrice`\n     */\n    PolicyTip: 1281, \"1281\": \"PolicyTip\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b11 & tx.policyTypes) - 1].witnessLimit`\n     */\n    PolicyWitnessLimit: 1282, \"1282\": \"PolicyWitnessLimit\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b111 & tx.policyTypes) - 1].maturity`\n     */\n    PolicyMaturity: 1283, \"1283\": \"PolicyMaturity\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b1111 & tx.policyTypes) - 1].maxFee`\n     */\n    PolicyMaxFee: 1284, \"1284\": \"PolicyMaxFee\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b11111 & tx.policyTypes) - 1].expiration`\n     */\n    PolicyExpiration: 1285, \"1285\": \"PolicyExpiration\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.root`\n     */\n    UploadRoot: 1536, \"1536\": \"UploadRoot\",\n    /**\n     * r\" Set `$rA` to `tx.witnessIndex`\n     */\n    UploadWitnessIndex: 1537, \"1537\": \"UploadWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.subsectionIndex`\n     */\n    UploadSubsectionIndex: 1538, \"1538\": \"UploadSubsectionIndex\",\n    /**\n     * r\" Set `$rA` to `tx.subsectionsNumber`\n     */\n    UploadSubsectionsCount: 1539, \"1539\": \"UploadSubsectionsCount\",\n    /**\n     * r\" Set `$rA` to `tx.proofSetCount`\n     */\n    UploadProofSetCount: 1540, \"1540\": \"UploadProofSetCount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.proofSet[$rB]`\n     */\n    UploadProofSetAtIndex: 1541, \"1541\": \"UploadProofSetAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.id`\n     */\n    BlobId: 1792, \"1792\": \"BlobId\",\n    /**\n     * r\" Set `$rA` to `tx.witnessIndex`\n     */\n    BlobWitnessIndex: 1793, \"1793\": \"BlobWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.purpose`\n     */\n    UpgradePurpose: 2048, \"2048\": \"UpgradePurpose\",\n    /**\n     * r\" Set `$rA` to `tx.inputsCount`\n     */\n    TxInputsCount: 2304, \"2304\": \"TxInputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.outputsCount`\n     */\n    TxOutputsCount: 2305, \"2305\": \"TxOutputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.witnessesCount`\n     */\n    TxWitnessesCount: 2306, \"2306\": \"TxWitnessesCount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n     */\n    TxInputAtIndex: 2307, \"2307\": \"TxInputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n     */\n    TxOutputAtIndex: 2308, \"2308\": \"TxOutputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n     */\n    TxWitnessAtIndex: 2309, \"2309\": \"TxWitnessAtIndex\",\n});\n/**\n * The operation performed by WDOP and WQOP instructions, determined as\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7}\n */\nconst MathOp = Object.freeze({\n    /**\n     * Add\n     */\n    ADD: 0, \"0\": \"ADD\",\n    /**\n     * Subtract\n     */\n    SUB: 1, \"1\": \"SUB\",\n    /**\n     * Invert bits (discards rhs)\n     */\n    NOT: 2, \"2\": \"NOT\",\n    /**\n     * Bitwise or\n     */\n    OR: 3, \"3\": \"OR\",\n    /**\n     * Bitwise exclusive or\n     */\n    XOR: 4, \"4\": \"XOR\",\n    /**\n     * Bitwise and\n     */\n    AND: 5, \"5\": \"AND\",\n    /**\n     * Shift left\n     */\n    SHL: 6, \"6\": \"SHL\",\n    /**\n     * Shift right\n     */\n    SHR: 7, \"7\": \"SHR\",\n});\n/**\n * r\" Panic reason representation for the interpreter.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64}\n */\nconst PanicReason = Object.freeze({\n    /**\n     * r\" The byte can't be mapped to any known `PanicReason`.\n     */\n    UnknownPanicReason: 0, \"0\": \"UnknownPanicReason\",\n    /**\n     * r\" Found `RVRT` instruction.\n     */\n    Revert: 1, \"1\": \"Revert\",\n    /**\n     * r\" Execution ran out of gas.\n     */\n    OutOfGas: 2, \"2\": \"OutOfGas\",\n    /**\n     * r\" The transaction validity is violated.\n     */\n    TransactionValidity: 3, \"3\": \"TransactionValidity\",\n    /**\n     * r\" Attempt to write outside interpreter memory boundaries.\n     */\n    MemoryOverflow: 4, \"4\": \"MemoryOverflow\",\n    /**\n     * r\" Overflow while executing arithmetic operation.\n     * r\" These errors are ignored using the WRAPPING flag.\n     */\n    ArithmeticOverflow: 5, \"5\": \"ArithmeticOverflow\",\n    /**\n     * r\" Designed contract was not found in the storage.\n     */\n    ContractNotFound: 6, \"6\": \"ContractNotFound\",\n    /**\n     * r\" Memory ownership rules are violated.\n     */\n    MemoryOwnership: 7, \"7\": \"MemoryOwnership\",\n    /**\n     * r\" The asset ID balance isn't enough for the instruction.\n     */\n    NotEnoughBalance: 8, \"8\": \"NotEnoughBalance\",\n    /**\n     * r\" The interpreter is expected to be in internal context.\n     */\n    ExpectedInternalContext: 9, \"9\": \"ExpectedInternalContext\",\n    /**\n     * r\" The queried asset ID was not found in the state.\n     */\n    AssetIdNotFound: 10, \"10\": \"AssetIdNotFound\",\n    /**\n     * r\" The provided input is not found in the transaction.\n     */\n    InputNotFound: 11, \"11\": \"InputNotFound\",\n    /**\n     * r\" The provided output is not found in the transaction.\n     */\n    OutputNotFound: 12, \"12\": \"OutputNotFound\",\n    /**\n     * r\" The provided witness is not found in the transaction.\n     */\n    WitnessNotFound: 13, \"13\": \"WitnessNotFound\",\n    /**\n     * r\" The transaction maturity is not valid for this request.\n     */\n    TransactionMaturity: 14, \"14\": \"TransactionMaturity\",\n    /**\n     * r\" The metadata identifier is invalid.\n     */\n    InvalidMetadataIdentifier: 15, \"15\": \"InvalidMetadataIdentifier\",\n    /**\n     * r\" The call structure is not valid.\n     */\n    MalformedCallStructure: 16, \"16\": \"MalformedCallStructure\",\n    /**\n     * r\" The provided register does not allow write operations.\n     */\n    ReservedRegisterNotWritable: 17, \"17\": \"ReservedRegisterNotWritable\",\n    /**\n     * r\" The execution resulted in an erroneous state of the interpreter.\n     */\n    InvalidFlags: 18, \"18\": \"InvalidFlags\",\n    /**\n     * r\" The provided immediate value is not valid for this instruction.\n     */\n    InvalidImmediateValue: 19, \"19\": \"InvalidImmediateValue\",\n    /**\n     * r\" The provided transaction input is not of type `Coin`.\n     */\n    ExpectedCoinInput: 20, \"20\": \"ExpectedCoinInput\",\n    /**\n     * r\" `ECAL` instruction failed.\n     */\n    EcalError: 21, \"21\": \"EcalError\",\n    /**\n     * r\" Two segments of the interpreter memory should not intersect for write operations.\n     */\n    MemoryWriteOverlap: 22, \"22\": \"MemoryWriteOverlap\",\n    /**\n     * r\" The requested contract is not listed in the transaction inputs.\n     */\n    ContractNotInInputs: 23, \"23\": \"ContractNotInInputs\",\n    /**\n     * r\" The internal asset ID balance overflowed with the provided instruction.\n     */\n    InternalBalanceOverflow: 24, \"24\": \"InternalBalanceOverflow\",\n    /**\n     * r\" The maximum allowed contract size is violated.\n     */\n    ContractMaxSize: 25, \"25\": \"ContractMaxSize\",\n    /**\n     * r\" This instruction expects the stack area to be unallocated for this call.\n     */\n    ExpectedUnallocatedStack: 26, \"26\": \"ExpectedUnallocatedStack\",\n    /**\n     * r\" The maximum allowed number of static contracts was reached for this transaction.\n     */\n    MaxStaticContractsReached: 27, \"27\": \"MaxStaticContractsReached\",\n    /**\n     * r\" The requested transfer amount cannot be zero.\n     */\n    TransferAmountCannotBeZero: 28, \"28\": \"TransferAmountCannotBeZero\",\n    /**\n     * r\" The provided transaction output should be of type `Variable`.\n     */\n    ExpectedOutputVariable: 29, \"29\": \"ExpectedOutputVariable\",\n    /**\n     * r\" The expected context of the stack parent is internal.\n     */\n    ExpectedParentInternalContext: 30, \"30\": \"ExpectedParentInternalContext\",\n    /**\n     * r\" The predicate returned non `1`. The `1` means successful verification\n     * r\" of the predicate, all other values means unsuccessful.\n     */\n    PredicateReturnedNonOne: 31, \"31\": \"PredicateReturnedNonOne\",\n    /**\n     * r\" The contract ID is already deployed and can't be overwritten.\n     */\n    ContractIdAlreadyDeployed: 32, \"32\": \"ContractIdAlreadyDeployed\",\n    /**\n     * r\" The loaded contract mismatch expectations.\n     */\n    ContractMismatch: 33, \"33\": \"ContractMismatch\",\n    /**\n     * r\" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`\n     */\n    MessageDataTooLong: 34, \"34\": \"MessageDataTooLong\",\n    /**\n     * r\" Mathematically invalid arguments where given to an arithmetic instruction.\n     * r\" For instance, division by zero produces this.\n     * r\" These errors are ignored using the UNSAFEMATH flag.\n     */\n    ArithmeticError: 35, \"35\": \"ArithmeticError\",\n    /**\n     * r\" The contract instruction is not allowed in predicates.\n     */\n    ContractInstructionNotAllowed: 36, \"36\": \"ContractInstructionNotAllowed\",\n    /**\n     * r\" Transfer of zero coins is not allowed.\n     */\n    TransferZeroCoins: 37, \"37\": \"TransferZeroCoins\",\n    /**\n     * r\" Attempted to execute an invalid instruction\n     */\n    InvalidInstruction: 38, \"38\": \"InvalidInstruction\",\n    /**\n     * r\" Memory outside $is..$ssp range is not executable\n     */\n    MemoryNotExecutable: 39, \"39\": \"MemoryNotExecutable\",\n    /**\n     * r\" The policy is not set.\n     */\n    PolicyIsNotSet: 40, \"40\": \"PolicyIsNotSet\",\n    /**\n     * r\" The policy is not found across policies.\n     */\n    PolicyNotFound: 41, \"41\": \"PolicyNotFound\",\n    /**\n     * r\" Receipt context is full\n     */\n    TooManyReceipts: 42, \"42\": \"TooManyReceipts\",\n    /**\n     * r\" Balance of a contract overflowed\n     */\n    BalanceOverflow: 43, \"43\": \"BalanceOverflow\",\n    /**\n     * r\" Block height value is invalid, typically because it is too large\n     */\n    InvalidBlockHeight: 44, \"44\": \"InvalidBlockHeight\",\n    /**\n     * r\" Attempt to use sequential memory instructions with too large slot count,\n     * r\" typically because it cannot fit into usize\n     */\n    TooManySlots: 45, \"45\": \"TooManySlots\",\n    /**\n     * r\" Caller of this internal context is also expected to be internal,\n     * r\" i.e. $fp->$fp must be non-zero.\n     */\n    ExpectedNestedCaller: 46, \"46\": \"ExpectedNestedCaller\",\n    /**\n     * r\" During memory growth, the stack overlapped with the heap\n     */\n    MemoryGrowthOverlap: 47, \"47\": \"MemoryGrowthOverlap\",\n    /**\n     * r\" Attempting to read or write uninitialized memory.\n     * r\" Also occurs when boundary crosses from stack to heap.\n     */\n    UninitalizedMemoryAccess: 48, \"48\": \"UninitalizedMemoryAccess\",\n    /**\n     * r\" Overriding consensus parameters is not allowed.\n     */\n    OverridingConsensusParameters: 49, \"49\": \"OverridingConsensusParameters\",\n    /**\n     * r\" The storage doesn't know about the hash of the state transition bytecode.\n     */\n    UnknownStateTransactionBytecodeRoot: 50, \"50\": \"UnknownStateTransactionBytecodeRoot\",\n    /**\n     * r\" Overriding the state transition bytecode is not allowed.\n     */\n    OverridingStateTransactionBytecode: 51, \"51\": \"OverridingStateTransactionBytecode\",\n    /**\n     * r\" The bytecode is already uploaded and cannot be uploaded again.\n     */\n    BytecodeAlreadyUploaded: 52, \"52\": \"BytecodeAlreadyUploaded\",\n    /**\n     * r\" The part of the bytecode is not sequentially connected to the previous parts.\n     */\n    ThePartIsNotSequentiallyConnected: 53, \"53\": \"ThePartIsNotSequentiallyConnected\",\n    /**\n     * r\" The requested blob is not found.\n     */\n    BlobNotFound: 54, \"54\": \"BlobNotFound\",\n    /**\n     * r\" The blob was already\n     */\n    BlobIdAlreadyUploaded: 55, \"55\": \"BlobIdAlreadyUploaded\",\n    /**\n     * r\" Active gas costs do not define the cost for this instruction.\n     */\n    GasCostNotDefined: 56, \"56\": \"GasCostNotDefined\",\n    /**\n     * r\" The curve id is not supported.\n     */\n    UnsupportedCurveId: 57, \"57\": \"UnsupportedCurveId\",\n    /**\n     * r\" The operation type is not supported.\n     */\n    UnsupportedOperationType: 58, \"58\": \"UnsupportedOperationType\",\n    /**\n     * r\" Read alt_bn_128 curve point is invalid.\n     */\n    InvalidEllipticCurvePoint: 59, \"59\": \"InvalidEllipticCurvePoint\",\n    /**\n     * r\" Given input contract does not exist.\n     */\n    InputContractDoesNotExist: 60, \"60\": \"InputContractDoesNotExist\",\n    /**\n     * r\" Storage slot in Create not found\n     */\n    StorageSlotsNotFound: 61, \"61\": \"StorageSlotsNotFound\",\n    /**\n     * r\" Proof in Upload not found\n     */\n    ProofInUploadNotFound: 62, \"62\": \"ProofInUploadNotFound\",\n    /**\n     * r\" Invalid purpose type in Upgrade\n     */\n    InvalidUpgradePurposeType: 63, \"63\": \"InvalidUpgradePurposeType\",\n    /**\n     * r\" Cannot get gas price in predicate\n     */\n    CanNotGetGasPriceInPredicate: 64, \"64\": \"CanNotGetGasPriceInPredicate\",\n});\n\nconst ADDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_add_free(ptr >>> 0, 1));\n/**\n * Adds two registers.\n */\nclass ADD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_add_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ADDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_addi_free(ptr >>> 0, 1));\n/**\n * Adds a register and an immediate value.\n */\nclass ADDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_addi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst ALOCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_aloc_free(ptr >>> 0, 1));\n/**\n * Allocate a number of bytes from the heap.\n */\nclass ALOC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ALOCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_aloc_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} bytes\n     */\n    constructor(bytes) {\n        _assertClass(bytes, RegId);\n        var ptr0 = bytes.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        ALOCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_and_free(ptr >>> 0, 1));\n/**\n * Bitwise ANDs two registers.\n */\nclass AND {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_and_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_andi_free(ptr >>> 0, 1));\n/**\n * Bitwise ANDs a register and an immediate value.\n */\nclass ANDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_andi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst BALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bal_free(ptr >>> 0, 1));\n/**\n * Get the balance of contract of an asset ID.\n */\nclass BAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bal_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} asset_id_addr\n     * @param {RegId} contract_id_addr\n     */\n    constructor(dst, asset_id_addr, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr1 = asset_id_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr2 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        BALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhei_free(ptr >>> 0, 1));\n/**\n * Get current block height.\n */\nclass BHEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhei_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        BHEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHSHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhsh_free(ptr >>> 0, 1));\n/**\n * Get block header hash for height.\n */\nclass BHSH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHSHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhsh_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} heigth\n     */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BHSHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BLDDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bldd_free(ptr >>> 0, 1));\n/**\n * Load blob as data\n */\nclass BLDD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BLDDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bldd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_ptr\n     * @param {RegId} blob_id_ptr\n     * @param {RegId} offset\n     * @param {RegId} len\n     */\n    constructor(dst_ptr, blob_id_ptr, offset, len) {\n        _assertClass(dst_ptr, RegId);\n        var ptr0 = dst_ptr.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        BLDDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bsiz_free(ptr >>> 0, 1));\n/**\n * Get blob size\n */\nclass BSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bsiz_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} blob_id_ptr\n     */\n    constructor(dst, blob_id_ptr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BURNFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_burn_free(ptr >>> 0, 1));\n/**\n * Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n */\nclass BURN {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BURNFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_burn_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     * @param {RegId} sub_id_addr\n     */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BURNFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CALLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_call_free(ptr >>> 0, 1));\n/**\n * Call a contract.\n */\nclass CALL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CALLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_call_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} target_struct\n     * @param {RegId} fwd_coins\n     * @param {RegId} asset_id_addr\n     * @param {RegId} fwd_gas\n     */\n    constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n        _assertClass(target_struct, RegId);\n        var ptr0 = target_struct.__destroy_into_raw();\n        _assertClass(fwd_coins, RegId);\n        var ptr1 = fwd_coins.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        _assertClass(fwd_gas, RegId);\n        var ptr3 = fwd_gas.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CALLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cb_free(ptr >>> 0, 1));\n/**\n * Get current block proposer's address.\n */\nclass CB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ccp_free(ptr >>> 0, 1));\n/**\n * Copy contract code for a contract.\n */\nclass CCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ccp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} contract_id_addr\n     * @param {RegId} offset\n     * @param {RegId} len\n     */\n    constructor(dst_addr, contract_id_addr, offset, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfe_free(ptr >>> 0, 1));\n/**\n * Extend the current call frame's stack\n */\nclass CFE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfe_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfei_free(ptr >>> 0, 1));\n/**\n * Extend the current call frame's stack by an immediate value.\n */\nclass CFEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfei_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CFSFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfs_free(ptr >>> 0, 1));\n/**\n * Shrink the current call frame's stack\n */\nclass CFS {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfs_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFSIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfsi_free(ptr >>> 0, 1));\n/**\n * Shrink the current call frame's stack by an immediate value.\n */\nclass CFSI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfsi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_croo_free(ptr >>> 0, 1));\n/**\n * Get code root of a contract.\n */\nclass CROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_croo_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} contract_id_addr\n     */\n    constructor(dst_addr, contract_id_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_csiz_free(ptr >>> 0, 1));\n/**\n * Get code size of a contract.\n */\nclass CSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_csiz_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} contract_id_addr\n     */\n    constructor(dst, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CompareArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_compareargs_free(ptr >>> 0, 1));\n/**\n * Arguments for WDCM and WQCM instructions.\n */\nclass CompareArgs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CompareArgs.prototype);\n        obj.__wbg_ptr = ptr;\n        CompareArgsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CompareArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_compareargs_free(ptr, 0);\n    }\n    /**\n     * Comparison mode\n     * @returns {CompareMode}\n     */\n    get mode() {\n        const ret = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Comparison mode\n     * @param {CompareMode} arg0\n     */\n    set mode(arg0) {\n        wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Convert to immediate value.\n     * @returns {Imm06}\n     */\n    to_imm() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.compareargs_to_imm(ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n     * Construct from `Imm06`. Returns `None` if the value has reserved flags set.\n     * @param {Imm06} bits\n     * @returns {CompareArgs | undefined}\n     */\n    static from_imm(bits) {\n        _assertClass(bits, Imm06);\n        var ptr0 = bits.__destroy_into_raw();\n        const ret = wasm$1.compareargs_from_imm(ptr0);\n        return ret === 0 ? undefined : CompareArgs.__wrap(ret);\n    }\n}\n\nconst DIVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_div_free(ptr >>> 0, 1));\n/**\n * Divides two registers.\n */\nclass DIV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_div_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst DIVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divi_free(ptr >>> 0, 1));\n/**\n * Divides a register and an immediate value.\n */\nclass DIVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst DivArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divargs_free(ptr >>> 0, 1));\n/**\n * Additional arguments for WMDV and WDDV instructions.\n */\nclass DivArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DivArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divargs_free(ptr, 0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst ECALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecal_free(ptr >>> 0, 1));\n/**\n * Call external function\n */\nclass ECAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecal_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} a\n     * @param {RegId} b\n     * @param {RegId} c\n     * @param {RegId} d\n     */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ECALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECK1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eck1_free(ptr >>> 0, 1));\n/**\n * The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n */\nclass ECK1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECK1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eck1_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} sig_addr\n     * @param {RegId} msg_hash_addr\n     */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECK1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecop_free(ptr >>> 0, 1));\n/**\n * Given some curve, performs an operation on points\n */\nclass ECOP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecop_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} curve_id\n     * @param {RegId} operation_type\n     * @param {RegId} points_ptr\n     */\n    constructor(dst, curve_id, operation_type, points_ptr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(curve_id, RegId);\n        var ptr1 = curve_id.__destroy_into_raw();\n        _assertClass(operation_type, RegId);\n        var ptr2 = operation_type.__destroy_into_raw();\n        _assertClass(points_ptr, RegId);\n        var ptr3 = points_ptr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ECOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECR1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecr1_free(ptr >>> 0, 1));\n/**\n * The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n */\nclass ECR1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECR1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecr1_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} sig_addr\n     * @param {RegId} msg_hash_addr\n     */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECR1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ED19Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ed19_free(ptr >>> 0, 1));\n/**\n * Verify ED25519 public key and signature match a message.\n */\nclass ED19 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ED19Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ed19_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} pub_key_addr\n     * @param {RegId} sig_addr\n     * @param {RegId} msg_addr\n     * @param {RegId} msg_len\n     */\n    constructor(pub_key_addr, sig_addr, msg_addr, msg_len) {\n        _assertClass(pub_key_addr, RegId);\n        var ptr0 = pub_key_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_addr, RegId);\n        var ptr2 = msg_addr.__destroy_into_raw();\n        _assertClass(msg_len, RegId);\n        var ptr3 = msg_len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ED19Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EPARFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_epar_free(ptr >>> 0, 1));\n/**\n * Given some curve, performs a pairing on groups of points\n */\nclass EPAR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EPARFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_epar_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} success\n     * @param {RegId} curve_id\n     * @param {RegId} number_elements\n     * @param {RegId} points_ptr\n     */\n    constructor(success, curve_id, number_elements, points_ptr) {\n        _assertClass(success, RegId);\n        var ptr0 = success.__destroy_into_raw();\n        _assertClass(curve_id, RegId);\n        var ptr1 = curve_id.__destroy_into_raw();\n        _assertClass(number_elements, RegId);\n        var ptr2 = number_elements.__destroy_into_raw();\n        _assertClass(points_ptr, RegId);\n        var ptr3 = points_ptr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        EPARFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eq_free(ptr >>> 0, 1));\n/**\n * Compares two registers for equality.\n */\nclass EQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_exp_free(ptr >>> 0, 1));\n/**\n * Raises one register to the power of another.\n */\nclass EXP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_exp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_expi_free(ptr >>> 0, 1));\n/**\n * Raises one register to the power of an immediate value.\n */\nclass EXPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_expi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst FLAGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_flag_free(ptr >>> 0, 1));\n/**\n * Set flag register to a register.\n */\nclass FLAG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FLAGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_flag_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} value\n     */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        FLAGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gm_free(ptr >>> 0, 1));\n/**\n * Get metadata from memory.\n */\nclass GM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GM.prototype);\n        obj.__wbg_ptr = ptr;\n        GMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gm_free(ptr, 0);\n    }\n    /**\n     * Construct a `GM` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {GMArgs} args\n     * @returns {GM}\n     */\n    static from_args(ra, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        const ret = wasm$1.gm_from_args(ptr0, args);\n        return GM.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {Imm18} selector\n     */\n    constructor(dst, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(selector, Imm18);\n        var ptr1 = selector.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        GMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst GTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gt_free(ptr >>> 0, 1));\n/**\n * Compares two registers for greater-than.\n */\nclass GT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gt_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GTFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gtf_free(ptr >>> 0, 1));\n/**\n * Get transaction fields.\n */\nclass GTF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GTF.prototype);\n        obj.__wbg_ptr = ptr;\n        GTFFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gtf_free(ptr, 0);\n    }\n    /**\n     * Construct a `GTF` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {GTFArgs} args\n     * @returns {GTF}\n     */\n    static from_args(ra, rb, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        const ret = wasm$1.gtf_from_args(ptr0, ptr1, args);\n        return GTF.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} arg\n     * @param {Imm12} selector\n     */\n    constructor(dst, arg, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        _assertClass(selector, Imm12);\n        var ptr2 = selector.__destroy_into_raw();\n        const ret = wasm$1.gtf_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst Imm06Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm06_free(ptr >>> 0, 1));\n/**\n * Represents a 6-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm06 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm06.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm06Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm06Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm06_free(ptr, 0);\n    }\n}\n\nconst Imm12Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm12_free(ptr >>> 0, 1));\n/**\n * Represents a 12-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm12 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm12.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm12Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm12Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm12_free(ptr, 0);\n    }\n}\n\nconst Imm18Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm18_free(ptr >>> 0, 1));\n/**\n * Represents a 18-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm18 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm18.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm18Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm18Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm18_free(ptr, 0);\n    }\n}\n\nconst Imm24Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm24_free(ptr >>> 0, 1));\n/**\n * Represents a 24-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm24 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm24.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm24Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm24Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm24_free(ptr, 0);\n    }\n}\n\nconst InstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_instruction_free(ptr >>> 0, 1));\n/**\n * Representation of a single instruction for the interpreter.\n *\n * The opcode is represented in the tag (variant), or may be retrieved in the\n * form of an `Opcode` byte using the `opcode` method.\n *\n * The register and immediate data associated with the instruction is represented\n * within an inner unit type wrapper around the 3 remaining bytes.\n */\nclass Instruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Instruction.prototype);\n        obj.__wbg_ptr = ptr;\n        InstructionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_instruction_free(ptr, 0);\n    }\n    /**\n     * Convenience method for converting to bytes\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);\n            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm$1.__wbindgen_export_0(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Size of an instruction in bytes\n     * @returns {number}\n     */\n    static size() {\n        const ret = wasm$1.instruction_size();\n        return ret >>> 0;\n    }\n}\n\nconst JIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ji_free(ptr >>> 0, 1));\n/**\n * Jump.\n */\nclass JI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ji_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} abs_target\n     */\n    constructor(abs_target) {\n        _assertClass(abs_target, Imm24);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst JMPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmp_free(ptr >>> 0, 1));\n/**\n * Dynamic jump.\n */\nclass JMP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} abs_target\n     */\n    constructor(abs_target) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JMPBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpb_free(ptr >>> 0, 1));\n/**\n * Unconditional dynamic relative jump backwards, with a constant offset.\n */\nclass JMPB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dynamic\n     * @param {Imm18} fixed\n     */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JMPFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpf_free(ptr >>> 0, 1));\n/**\n * Unconditional dynamic relative jump forwards, with a constant offset.\n */\nclass JMPF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpf_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dynamic\n     * @param {Imm18} fixed\n     */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JNEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jne_free(ptr >>> 0, 1));\n/**\n * Conditional dynamic jump.\n */\nclass JNE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jne_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} abs_target\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(abs_target, lhs, rhs) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JNEBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jneb_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n */\nclass JNEB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jneb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_lhs\n     * @param {RegId} cond_rhs\n     * @param {RegId} dynamic\n     * @param {Imm06} fixed\n     */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnef_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n */\nclass JNEF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnef_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_lhs\n     * @param {RegId} cond_rhs\n     * @param {RegId} dynamic\n     * @param {Imm06} fixed\n     */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnei_free(ptr >>> 0, 1));\n/**\n * Conditional jump.\n */\nclass JNEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnei_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_lhs\n     * @param {RegId} cond_rhs\n     * @param {Imm12} abs_target\n     */\n    constructor(cond_lhs, cond_rhs, abs_target) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(abs_target, Imm12);\n        var ptr2 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzb_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump backwards, conditional against zero, with a constant offset.\n */\nclass JNZB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_nz\n     * @param {RegId} dynamic\n     * @param {Imm12} fixed\n     */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzf_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump forwards, conditional against zero, with a constant offset.\n */\nclass JNZF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzf_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_nz\n     * @param {RegId} dynamic\n     * @param {Imm12} fixed\n     */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzi_free(ptr >>> 0, 1));\n/**\n * Conditional jump against zero.\n */\nclass JNZI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_nz\n     * @param {Imm18} abs_target\n     */\n    constructor(cond_nz, abs_target) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(abs_target, Imm18);\n        var ptr1 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JNZIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst K256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_k256_free(ptr >>> 0, 1));\n/**\n * The keccak-256 hash of a slice.\n */\nclass K256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_k256_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        K256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lb_free(ptr >>> 0, 1));\n/**\n * A byte is loaded from the specified address offset by an immediate value.\n */\nclass LB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} addr\n     * @param {Imm12} offset\n     */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst LDCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ldc_free(ptr >>> 0, 1));\n/**\n * Load code as executable either from contract, blob, or memory.\n */\nclass LDC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LDCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ldc_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} src_addr\n     * @param {RegId} offset\n     * @param {RegId} len\n     * @param {Imm06} mode\n     */\n    constructor(src_addr, offset, len, mode) {\n        _assertClass(src_addr, RegId);\n        var ptr0 = src_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr1 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        _assertClass(mode, Imm06);\n        var ptr3 = mode.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LDCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst LOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_log_free(ptr >>> 0, 1));\n/**\n * Log an event.\n */\nclass LOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_log_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} a\n     * @param {RegId} b\n     * @param {RegId} c\n     * @param {RegId} d\n     */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LOGDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_logd_free(ptr >>> 0, 1));\n/**\n * Log data.\n */\nclass LOGD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_logd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} a\n     * @param {RegId} b\n     * @param {RegId} addr\n     * @param {RegId} len\n     */\n    constructor(a, b, addr, len) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr2 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lt_free(ptr >>> 0, 1));\n/**\n * Compares two registers for less-than.\n */\nclass LT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lt_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lw_free(ptr >>> 0, 1));\n/**\n * A word is loaded from the specified address offset by an immediate value.\n */\nclass LW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lw_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} addr\n     * @param {Imm12} offset\n     */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MCLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcl_free(ptr >>> 0, 1));\n/**\n * Clear a variable number of bytes in memory.\n */\nclass MCL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcli_free(ptr >>> 0, 1));\n/**\n * Clear an immediate number of bytes in memory.\n */\nclass MCLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {Imm18} count\n     */\n    constructor(addr, count) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(count, Imm18);\n        var ptr1 = count.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcp_free(ptr >>> 0, 1));\n/**\n * Copy a variable number of bytes in memory.\n */\nclass MCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcpi_free(ptr >>> 0, 1));\n/**\n * Copy an immediate number of bytes in memory.\n */\nclass MCPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcpi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {Imm12} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, Imm12);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MEQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_meq_free(ptr >>> 0, 1));\n/**\n * Compare bytes in memory.\n */\nclass MEQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MEQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_meq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} result\n     * @param {RegId} lhs_addr\n     * @param {RegId} rhs_addr\n     * @param {RegId} len\n     */\n    constructor(result, lhs_addr, rhs_addr, len) {\n        _assertClass(result, RegId);\n        var ptr0 = result.__destroy_into_raw();\n        _assertClass(lhs_addr, RegId);\n        var ptr1 = lhs_addr.__destroy_into_raw();\n        _assertClass(rhs_addr, RegId);\n        var ptr2 = rhs_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MEQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MINTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mint_free(ptr >>> 0, 1));\n/**\n * Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n */\nclass MINT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MINTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mint_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     * @param {RegId} sub_id_addr\n     */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MINTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mldv_free(ptr >>> 0, 1));\n/**\n * Fused multiply-divide with arbitrary precision intermediate step.\n */\nclass MLDV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mldv_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} divisor\n     */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MLDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mlog_free(ptr >>> 0, 1));\n/**\n * The integer logarithm of a register.\n */\nclass MLOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mlog_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MLOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mod_free(ptr >>> 0, 1));\n/**\n * Modulo remainder of two registers.\n */\nclass MOD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mod_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_modi_free(ptr >>> 0, 1));\n/**\n * Modulo remainder of a register and an immediate value.\n */\nclass MODI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_modi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MOVEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_move_free(ptr >>> 0, 1));\n/**\n * Copy from one register to another.\n */\nclass MOVE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_move_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} src\n     */\n    constructor(dst, src) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(src, RegId);\n        var ptr1 = src.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MOVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_movi_free(ptr >>> 0, 1));\n/**\n * Copy immediate value into a register\n */\nclass MOVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_movi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {Imm18} val\n     */\n    constructor(dst, val) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(val, Imm18);\n        var ptr1 = val.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mroo_free(ptr >>> 0, 1));\n/**\n * The integer root of a register.\n */\nclass MROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mroo_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mul_free(ptr >>> 0, 1));\n/**\n * Multiplies two registers.\n */\nclass MUL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mul_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_muli_free(ptr >>> 0, 1));\n/**\n * Multiplies a register and an immediate value.\n */\nclass MULI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_muli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MathArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mathargs_free(ptr >>> 0, 1));\n/**\n * Additional arguments for WDOP and WQOP instructions.\n */\nclass MathArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MathArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mathargs_free(ptr, 0);\n    }\n    /**\n     * The operation to perform\n     * @returns {MathOp}\n     */\n    get op() {\n        const ret = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The operation to perform\n     * @param {MathOp} arg0\n     */\n    set op(arg0) {\n        wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst MulArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mulargs_free(ptr >>> 0, 1));\n/**\n * Additional arguments for WDML and WQML instructions.\n */\nclass MulArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MulArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mulargs_free(ptr, 0);\n    }\n    /**\n     * Load LHSS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_lhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load LHSS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_lhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_mulargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_mulargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst NOOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_noop_free(ptr >>> 0, 1));\n/**\n * Performs no operation.\n */\nclass NOOP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_noop_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction.\n     */\n    constructor() {\n        const ret = wasm$1.noop_new_typescript();\n        this.__wbg_ptr = ret >>> 0;\n        NOOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst NOTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_not_free(ptr >>> 0, 1));\n/**\n * Bitwise NOT a register.\n */\nclass NOT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_not_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} arg\n     */\n    constructor(dst, arg) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        NOTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_or_free(ptr >>> 0, 1));\n/**\n * Bitwise ORs two registers.\n */\nclass OR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_or_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ori_free(ptr >>> 0, 1));\n/**\n * Bitwise ORs a register and an immediate value.\n */\nclass ORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ori_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst POPHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_poph_free(ptr >>> 0, 1));\n/**\n * Pop a bitmask-selected set of registers in range 40..64 to the stack.\n */\nclass POPH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_poph_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst POPLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_popl_free(ptr >>> 0, 1));\n/**\n * Pop a bitmask-selected set of registers in range 16..40 to the stack.\n */\nclass POPL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_popl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshh_free(ptr >>> 0, 1));\n/**\n * Push a bitmask-selected set of registers in range 40..64 to the stack.\n */\nclass PSHH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshh_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshl_free(ptr >>> 0, 1));\n/**\n * Push a bitmask-selected set of registers in range 16..40 to the stack.\n */\nclass PSHL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PanicInstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_panicinstruction_free(ptr >>> 0, 1));\n/**\n * Describe a panic reason with the instruction that generated it\n */\nclass PanicInstruction {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PanicInstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_panicinstruction_free(ptr, 0);\n    }\n    /**\n     * Represents an error described by a reason and an instruction.\n     * @param {PanicReason} reason\n     * @param {number} instruction\n     */\n    constructor(reason, instruction) {\n        const ret = wasm$1.panicinstruction_error_typescript(reason, instruction);\n        this.__wbg_ptr = ret >>> 0;\n        PanicInstructionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Underlying panic reason\n     * @returns {PanicReason}\n     */\n    reason() {\n        const ret = wasm$1.panicinstruction_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Underlying instruction\n     * @returns {number}\n     */\n    instruction() {\n        const ret = wasm$1.panicinstruction_instruction(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst RETFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ret_free(ptr >>> 0, 1));\n/**\n * Return from context.\n */\nclass RET {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ret_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} value\n     */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RETFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RETDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_retd_free(ptr >>> 0, 1));\n/**\n * Return from context with data.\n */\nclass RETD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_retd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {RegId} len\n     */\n    constructor(addr, len) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        RETDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RVRTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_rvrt_free(ptr >>> 0, 1));\n/**\n * Halt execution, reverting state changes and returning a value.\n */\nclass RVRT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RVRTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_rvrt_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} value\n     */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RVRTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RegIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_regid_free(ptr >>> 0, 1));\n/**\n * Represents a 6-bit register ID, guaranteed to be masked by construction.\n */\nclass RegId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegId.prototype);\n        obj.__wbg_ptr = ptr;\n        RegIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_regid_free(ptr, 0);\n    }\n    /**\n     * Construct a register ID from the given value.\n     *\n     * Returns `None` if the value is outside the 6-bit value range.\n     * @param {number} u\n     * @returns {RegId | undefined}\n     */\n    static new_checked(u) {\n        const ret = wasm$1.regid_new_checked(u);\n        return ret === 0 ? undefined : RegId.__wrap(ret);\n    }\n    /**\n     * Received balance for this context.\n     * @returns {RegId}\n     */\n    static bal() {\n        const ret = wasm$1.regid_bal();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Remaining gas in the context.\n     * @returns {RegId}\n     */\n    static cgas() {\n        const ret = wasm$1.regid_cgas();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Error codes for particular operations.\n     * @returns {RegId}\n     */\n    static err() {\n        const ret = wasm$1.regid_err();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Flags register.\n     * @returns {RegId}\n     */\n    static flag() {\n        const ret = wasm$1.regid_flag();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Frame pointer. Memory address of beginning of current call frame.\n     * @returns {RegId}\n     */\n    static fp() {\n        const ret = wasm$1.regid_fp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Remaining gas globally.\n     * @returns {RegId}\n     */\n    static ggas() {\n        const ret = wasm$1.regid_ggas();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Heap pointer. Memory address below the current bottom of the heap (points to free\n     * memory).\n     * @returns {RegId}\n     */\n    static hp() {\n        const ret = wasm$1.regid_hp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Instructions start. Pointer to the start of the currently-executing code.\n     * @returns {RegId}\n     */\n    static is() {\n        const ret = wasm$1.regid_is();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Contains overflow/underflow of addition, subtraction, and multiplication.\n     * @returns {RegId}\n     */\n    static of() {\n        const ret = wasm$1.regid_of();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Contains one (1), for convenience.\n     * @returns {RegId}\n     */\n    static one() {\n        const ret = wasm$1.regid_one();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * The program counter. Memory address of the current instruction.\n     * @returns {RegId}\n     */\n    static pc() {\n        const ret = wasm$1.regid_pc();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Return value or pointer.\n     * @returns {RegId}\n     */\n    static ret() {\n        const ret = wasm$1.regid_ret();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Return value length in bytes.\n     * @returns {RegId}\n     */\n    static retl() {\n        const ret = wasm$1.regid_retl();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Stack pointer. Memory address on top of current writable stack area (points to\n     * free memory).\n     * @returns {RegId}\n     */\n    static sp() {\n        const ret = wasm$1.regid_sp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Stack start pointer. Memory address of bottom of current writable stack area.\n     * @returns {RegId}\n     */\n    static spp() {\n        const ret = wasm$1.regid_spp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Smallest writable register.\n     * @returns {RegId}\n     */\n    static writable() {\n        const ret = wasm$1.regid_writable();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Contains zero (0), for convenience.\n     * @returns {RegId}\n     */\n    static zero() {\n        const ret = wasm$1.regid_zero();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Construct a register ID from the given value.\n     *\n     * The given value will be masked to 6 bits.\n     * @param {number} u\n     */\n    constructor(u) {\n        const ret = wasm$1.regid_new_typescript(u);\n        this.__wbg_ptr = ret >>> 0;\n        RegIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * A const alternative to the `Into<u8>` implementation.\n     * @returns {number}\n     */\n    to_u8() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.regid_to_u8(ptr);\n        return ret;\n    }\n}\n\nconst S256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_s256_free(ptr >>> 0, 1));\n/**\n * The SHA-2-256 hash of a slice.\n */\nclass S256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        S256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_s256_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        S256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sb_free(ptr >>> 0, 1));\n/**\n * Write the least significant byte of a register to memory.\n */\nclass SB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {RegId} value\n     * @param {Imm12} offset\n     */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SCWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_scwq_free(ptr >>> 0, 1));\n/**\n * Clear a series of slots from contract storage.\n */\nclass SCWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SCWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_scwq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} key_addr\n     * @param {RegId} status\n     * @param {RegId} lenq\n     */\n    constructor(key_addr, status, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr2 = lenq.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SCWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sll_free(ptr >>> 0, 1));\n/**\n * Left shifts a register by a register.\n */\nclass SLL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sll_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_slli_free(ptr >>> 0, 1));\n/**\n * Left shifts a register by an immediate value.\n */\nclass SLLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_slli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SMOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_smo_free(ptr >>> 0, 1));\n/**\n * Send a message to recipient address with call abi, coins, and output.\n */\nclass SMO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SMOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_smo_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} recipient_addr\n     * @param {RegId} data_addr\n     * @param {RegId} data_len\n     * @param {RegId} coins\n     */\n    constructor(recipient_addr, data_addr, data_len, coins) {\n        _assertClass(recipient_addr, RegId);\n        var ptr0 = recipient_addr.__destroy_into_raw();\n        _assertClass(data_addr, RegId);\n        var ptr1 = data_addr.__destroy_into_raw();\n        _assertClass(data_len, RegId);\n        var ptr2 = data_len.__destroy_into_raw();\n        _assertClass(coins, RegId);\n        var ptr3 = coins.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SMOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srl_free(ptr >>> 0, 1));\n/**\n * Right shifts a register by a register.\n */\nclass SRL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srli_free(ptr >>> 0, 1));\n/**\n * Right shifts a register by an immediate value.\n */\nclass SRLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SRWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srw_free(ptr >>> 0, 1));\n/**\n * Load a word from contract storage.\n */\nclass SRW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srw_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} status\n     * @param {RegId} key_addr\n     */\n    constructor(dst, status, key_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srwq_free(ptr >>> 0, 1));\n/**\n * Load a series of 32 byte slots from contract storage.\n */\nclass SRWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srwq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} status\n     * @param {RegId} key_addr\n     * @param {RegId} lenq\n     */\n    constructor(dst_addr, status, key_addr, lenq) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SRWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sub_free(ptr >>> 0, 1));\n/**\n * Subtracts two registers.\n */\nclass SUB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sub_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_subi_free(ptr >>> 0, 1));\n/**\n * Subtracts a register and an immediate value.\n */\nclass SUBI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_subi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sw_free(ptr >>> 0, 1));\n/**\n * Write a register to memory.\n */\nclass SW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sw_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {RegId} value\n     * @param {Imm12} offset\n     */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sww_free(ptr >>> 0, 1));\n/**\n * Store a word in contract storage.\n */\nclass SWW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sww_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} key_addr\n     * @param {RegId} status\n     * @param {RegId} value\n     */\n    constructor(key_addr, status, value) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr2 = value.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SWWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_swwq_free(ptr >>> 0, 1));\n/**\n * Store a series of 32 byte slots in contract storage.\n */\nclass SWWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_swwq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} key_addr\n     * @param {RegId} status\n     * @param {RegId} src_addr\n     * @param {RegId} lenq\n     */\n    constructor(key_addr, status, src_addr, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr2 = src_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SWWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TIMEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_time_free(ptr >>> 0, 1));\n/**\n * Get timestamp of block at given height.\n */\nclass TIME {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TIMEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_time_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} heigth\n     */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        TIMEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TRFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tr_free(ptr >>> 0, 1));\n/**\n * Transfer coins to a contract unconditionally.\n */\nclass TR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TRFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tr_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} contract_id_addr\n     * @param {RegId} amount\n     * @param {RegId} asset_id_addr\n     */\n    constructor(contract_id_addr, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr1 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        TRFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TROFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tro_free(ptr >>> 0, 1));\n/**\n * Transfer coins to a variable output.\n */\nclass TRO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TROFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tro_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} contract_id_addr\n     * @param {RegId} output_index\n     * @param {RegId} amount\n     * @param {RegId} asset_id_addr\n     */\n    constructor(contract_id_addr, output_index, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(output_index, RegId);\n        var ptr1 = output_index.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr2 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr3 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        TROFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdam_free(ptr >>> 0, 1));\n/**\n * AddMod 128bit\n */\nclass WDAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdam_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} add_lhs\n     * @param {RegId} add_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdcm_free(ptr >>> 0, 1));\n/**\n * Compare 128bit integers\n */\nclass WDCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WDCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdcm_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDCM` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {CompareArgs} args\n     * @returns {WDCM}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wddv_free(ptr >>> 0, 1));\n/**\n * Divide 128bit\n */\nclass WDDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WDDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wddv_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDDV` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {DivArgs} args\n     * @returns {WDDV}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmd_free(ptr >>> 0, 1));\n/**\n * Fused multiply-divide 128bit\n */\nclass WDMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} divisor\n     */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdml_free(ptr >>> 0, 1));\n/**\n * Multiply 128bit\n */\nclass WDML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDML.prototype);\n        obj.__wbg_ptr = ptr;\n        WDMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdml_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDML` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MulArgs} args\n     * @returns {WDML}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmm_free(ptr >>> 0, 1));\n/**\n * MulMod 128bit\n */\nclass WDMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmm_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdop_free(ptr >>> 0, 1));\n/**\n * Simple 128bit operations\n */\nclass WDOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WDOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdop_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDOP` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MathArgs} args\n     * @returns {WDOP}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqam_free(ptr >>> 0, 1));\n/**\n * AddMod 256bit\n */\nclass WQAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqam_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} add_lhs\n     * @param {RegId} add_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqcm_free(ptr >>> 0, 1));\n/**\n * Compare 256bit integers\n */\nclass WQCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WQCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqcm_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQCM` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {CompareArgs} args\n     * @returns {WQCM}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqdv_free(ptr >>> 0, 1));\n/**\n * Divide 256bit\n */\nclass WQDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WQDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqdv_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQDV` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {DivArgs} args\n     * @returns {WQDV}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmd_free(ptr >>> 0, 1));\n/**\n * Fused multiply-divide 256bit\n */\nclass WQMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} divisor\n     */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqml_free(ptr >>> 0, 1));\n/**\n * Multiply 256bit\n */\nclass WQML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQML.prototype);\n        obj.__wbg_ptr = ptr;\n        WQMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqml_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQML` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MulArgs} args\n     * @returns {WQML}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmm_free(ptr >>> 0, 1));\n/**\n * MulMod 256bit\n */\nclass WQMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmm_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqop_free(ptr >>> 0, 1));\n/**\n * Simple 256bit operations\n */\nclass WQOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WQOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqop_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQOP` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MathArgs} args\n     * @returns {WQOP}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst XORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xor_free(ptr >>> 0, 1));\n/**\n * Bitwise XORs two registers.\n */\nclass XOR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xor_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst XORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xori_free(ptr >>> 0, 1));\n/**\n * Bitwise XORs a register and an immediate value.\n */\nclass XORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xori_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm$1 = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n\n    return wasm$1;\n}\n\nfunction initSync(module) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module);\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead');\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path);\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead');\n        }\n    }\n    const imports = __wbg_get_imports();\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  \nvar buf = null;\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nif (isNode) {\n  \nbuf = Buffer.from(src, 'base64');\n\n} else {\n  \nvar raw = globalThis.atob(src);\nvar rawLength = raw.length;\nbuf = new Uint8Array(new ArrayBuffer(rawLength));\nfor(var i = 0; i < rawLength; i++) {\n   buf[i] = raw.charCodeAt(i);\n}\n\n}\n\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf);\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\n\nfunction wasm(imports){return _loadWasmModule(1, null, '', imports)}\n\nasync function initWasm () {\n  return await __wbg_init({ module_or_path: wasm() });\n}\n\n/**\n * calling it right away for pre-caching\n * the wasm async initialization at startup\n */\ninitWasm();\n\nexports.ADD = ADD;\nexports.ADDI = ADDI;\nexports.ALOC = ALOC;\nexports.AND = AND;\nexports.ANDI = ANDI;\nexports.BAL = BAL;\nexports.BHEI = BHEI;\nexports.BHSH = BHSH;\nexports.BLDD = BLDD;\nexports.BSIZ = BSIZ;\nexports.BURN = BURN;\nexports.CALL = CALL;\nexports.CB = CB;\nexports.CCP = CCP;\nexports.CFE = CFE;\nexports.CFEI = CFEI;\nexports.CFS = CFS;\nexports.CFSI = CFSI;\nexports.CROO = CROO;\nexports.CSIZ = CSIZ;\nexports.CompareArgs = CompareArgs;\nexports.CompareMode = CompareMode;\nexports.DIV = DIV;\nexports.DIVI = DIVI;\nexports.DivArgs = DivArgs;\nexports.ECAL = ECAL;\nexports.ECK1 = ECK1;\nexports.ECOP = ECOP;\nexports.ECR1 = ECR1;\nexports.ED19 = ED19;\nexports.EPAR = EPAR;\nexports.EQ = EQ;\nexports.EXP = EXP;\nexports.EXPI = EXPI;\nexports.FLAG = FLAG;\nexports.GM = GM;\nexports.GMArgs = GMArgs;\nexports.GT = GT;\nexports.GTF = GTF;\nexports.GTFArgs = GTFArgs;\nexports.Imm06 = Imm06;\nexports.Imm12 = Imm12;\nexports.Imm18 = Imm18;\nexports.Imm24 = Imm24;\nexports.Instruction = Instruction;\nexports.JI = JI;\nexports.JMP = JMP;\nexports.JMPB = JMPB;\nexports.JMPF = JMPF;\nexports.JNE = JNE;\nexports.JNEB = JNEB;\nexports.JNEF = JNEF;\nexports.JNEI = JNEI;\nexports.JNZB = JNZB;\nexports.JNZF = JNZF;\nexports.JNZI = JNZI;\nexports.K256 = K256;\nexports.LB = LB;\nexports.LDC = LDC;\nexports.LOG = LOG;\nexports.LOGD = LOGD;\nexports.LT = LT;\nexports.LW = LW;\nexports.MCL = MCL;\nexports.MCLI = MCLI;\nexports.MCP = MCP;\nexports.MCPI = MCPI;\nexports.MEQ = MEQ;\nexports.MINT = MINT;\nexports.MLDV = MLDV;\nexports.MLOG = MLOG;\nexports.MOD = MOD;\nexports.MODI = MODI;\nexports.MOVE = MOVE;\nexports.MOVI = MOVI;\nexports.MROO = MROO;\nexports.MUL = MUL;\nexports.MULI = MULI;\nexports.MathArgs = MathArgs;\nexports.MathOp = MathOp;\nexports.MulArgs = MulArgs;\nexports.NOOP = NOOP;\nexports.NOT = NOT;\nexports.OR = OR;\nexports.ORI = ORI;\nexports.POPH = POPH;\nexports.POPL = POPL;\nexports.PSHH = PSHH;\nexports.PSHL = PSHL;\nexports.PanicInstruction = PanicInstruction;\nexports.PanicReason = PanicReason;\nexports.RET = RET;\nexports.RETD = RETD;\nexports.RVRT = RVRT;\nexports.RegId = RegId;\nexports.S256 = S256;\nexports.SB = SB;\nexports.SCWQ = SCWQ;\nexports.SLL = SLL;\nexports.SLLI = SLLI;\nexports.SMO = SMO;\nexports.SRL = SRL;\nexports.SRLI = SRLI;\nexports.SRW = SRW;\nexports.SRWQ = SRWQ;\nexports.SUB = SUB;\nexports.SUBI = SUBI;\nexports.SW = SW;\nexports.SWW = SWW;\nexports.SWWQ = SWWQ;\nexports.TIME = TIME;\nexports.TR = TR;\nexports.TRO = TRO;\nexports.WDAM = WDAM;\nexports.WDCM = WDCM;\nexports.WDDV = WDDV;\nexports.WDMD = WDMD;\nexports.WDML = WDML;\nexports.WDMM = WDMM;\nexports.WDOP = WDOP;\nexports.WQAM = WQAM;\nexports.WQCM = WQCM;\nexports.WQDV = WQDV;\nexports.WQMD = WQMD;\nexports.WQML = WQML;\nexports.WQMM = WQMM;\nexports.WQOP = WQOP;\nexports.XOR = XOR;\nexports.XORI = XORI;\nexports.add = add;\nexports.addi = addi;\nexports.aloc = aloc;\nexports.and = and;\nexports.andi = andi;\nexports.bal = bal;\nexports.bhei = bhei;\nexports.bhsh = bhsh;\nexports.bldd = bldd;\nexports.bsiz = bsiz;\nexports.burn = burn;\nexports.call = call;\nexports.cb = cb;\nexports.ccp = ccp;\nexports.cfe = cfe;\nexports.cfei = cfei;\nexports.cfs = cfs;\nexports.cfsi = cfsi;\nexports.croo = croo;\nexports.csiz = csiz;\nexports.div = div;\nexports.divi = divi;\nexports.ecal = ecal;\nexports.eck1 = eck1;\nexports.ecop = ecop;\nexports.ecr1 = ecr1;\nexports.ed19 = ed19;\nexports.epar = epar;\nexports.eq = eq;\nexports.exp = exp;\nexports.expi = expi;\nexports.flag = flag;\nexports.gm = gm;\nexports.gm_args = gm_args;\nexports.gt = gt;\nexports.gtf = gtf;\nexports.gtf_args = gtf_args;\nexports.initSync = initSync;\nexports.initWasm = initWasm;\nexports.ji = ji;\nexports.jmp = jmp;\nexports.jmpb = jmpb;\nexports.jmpf = jmpf;\nexports.jne = jne;\nexports.jneb = jneb;\nexports.jnef = jnef;\nexports.jnei = jnei;\nexports.jnzb = jnzb;\nexports.jnzf = jnzf;\nexports.jnzi = jnzi;\nexports.k256 = k256;\nexports.lb = lb;\nexports.ldc = ldc;\nexports.log = log;\nexports.logd = logd;\nexports.lt = lt;\nexports.lw = lw;\nexports.mcl = mcl;\nexports.mcli = mcli;\nexports.mcp = mcp;\nexports.mcpi = mcpi;\nexports.meq = meq;\nexports.mint = mint;\nexports.mldv = mldv;\nexports.mlog = mlog;\nexports.mod_ = mod_;\nexports.modi = modi;\nexports.move_ = move_;\nexports.movi = movi;\nexports.mroo = mroo;\nexports.mul = mul;\nexports.muli = muli;\nexports.noop = noop;\nexports.not = not;\nexports.or = or;\nexports.ori = ori;\nexports.poph = poph;\nexports.popl = popl;\nexports.pshh = pshh;\nexports.pshl = pshl;\nexports.ret = ret;\nexports.retd = retd;\nexports.rvrt = rvrt;\nexports.s256 = s256;\nexports.sb = sb;\nexports.scwq = scwq;\nexports.sll = sll;\nexports.slli = slli;\nexports.smo = smo;\nexports.srl = srl;\nexports.srli = srli;\nexports.srw = srw;\nexports.srwq = srwq;\nexports.sub = sub;\nexports.subi = subi;\nexports.sw = sw;\nexports.sww = sww;\nexports.swwq = swwq;\nexports.time = time;\nexports.tr = tr;\nexports.tro = tro;\nexports.wdam = wdam;\nexports.wdcm = wdcm;\nexports.wdcm_args = wdcm_args;\nexports.wddv = wddv;\nexports.wddv_args = wddv_args;\nexports.wdmd = wdmd;\nexports.wdml = wdml;\nexports.wdml_args = wdml_args;\nexports.wdmm = wdmm;\nexports.wdop = wdop;\nexports.wdop_args = wdop_args;\nexports.wqam = wqam;\nexports.wqcm = wqcm;\nexports.wqcm_args = wqcm_args;\nexports.wqdv = wqdv;\nexports.wqdv_args = wqdv_args;\nexports.wqmd = wqmd;\nexports.wqml = wqml;\nexports.wqml_args = wqml_args;\nexports.wqmm = wqmm;\nexports.wqop = wqop;\nexports.wqop_args = wqop_args;\nexports.xor = xor;\nexports.xori = xori;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuels+vm-asm@0.60.2/node_modules/@fuels/vm-asm/dist/node/index.cjs\n");

/***/ })

};
;