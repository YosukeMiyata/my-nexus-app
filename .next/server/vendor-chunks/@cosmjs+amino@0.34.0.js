"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cosmjs+amino@0.34.0";
exports.ids = ["vendor-chunks/@cosmjs+amino@0.34.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\nexports.pubkeyToAddress = pubkeyToAddress;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst encoding_2 = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/encoding.js\");\nconst pubkeys_1 = __webpack_require__(/*! ./pubkeys */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js\");\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n    if (pubkeyData.length !== 32) {\n        throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyData.length}`);\n    }\n    return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n}\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n    if (pubkeyData.length !== 33) {\n        throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);\n    }\n    return (0, crypto_1.ripemd160)((0, crypto_1.sha256)(pubkeyData));\n}\n// For secp256k1 this assumes we already have a compressed pubkey.\nfunction pubkeyToRawAddress(pubkey) {\n    if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n        const pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n        return rawSecp256k1PubkeyToRawAddress(pubkeyData);\n    }\n    else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n        const pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n        return rawEd25519PubkeyToRawAddress(pubkeyData);\n    }\n    else if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n        // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74\n        const pubkeyData = (0, encoding_2.encodeAminoPubkey)(pubkey);\n        return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n    }\n    else {\n        throw new Error(\"Unsupported public key type\");\n    }\n}\nfunction pubkeyToAddress(pubkey, prefix) {\n    return (0, encoding_1.toBech32)(prefix, pubkeyToRawAddress(pubkey));\n}\n//# sourceMappingURL=addresses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvYWRkcmVzc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDLHNDQUFzQztBQUN0QywwQkFBMEI7QUFDMUIsdUJBQXVCO0FBQ3ZCLGlCQUFpQixtQkFBTyxDQUFDLG1IQUFnQjtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyx5SEFBa0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsZ0hBQVk7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsOEdBQVc7QUFDckM7QUFDQTtBQUNBLDBEQUEwRCxrQkFBa0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxrQkFBa0I7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvYWRkcmVzc2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9mMmFkYTBhNjA0YjRjMDc2M2JkYTJmNjRmYWM1M2Q1MDZkM2JlY2E3L2RvY3Mvc3BlYy9ibG9ja2NoYWluL2VuY29kaW5nLm1kI3B1YmxpYy1rZXktY3J5cHRvZ3JhcGh5XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhd0VkMjU1MTlQdWJrZXlUb1Jhd0FkZHJlc3MgPSByYXdFZDI1NTE5UHVia2V5VG9SYXdBZGRyZXNzO1xuZXhwb3J0cy5yYXdTZWNwMjU2azFQdWJrZXlUb1Jhd0FkZHJlc3MgPSByYXdTZWNwMjU2azFQdWJrZXlUb1Jhd0FkZHJlc3M7XG5leHBvcnRzLnB1YmtleVRvUmF3QWRkcmVzcyA9IHB1YmtleVRvUmF3QWRkcmVzcztcbmV4cG9ydHMucHVia2V5VG9BZGRyZXNzID0gcHVia2V5VG9BZGRyZXNzO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiQGNvc21qcy9jcnlwdG9cIik7XG5jb25zdCBlbmNvZGluZ18xID0gcmVxdWlyZShcIkBjb3NtanMvZW5jb2RpbmdcIik7XG5jb25zdCBlbmNvZGluZ18yID0gcmVxdWlyZShcIi4vZW5jb2RpbmdcIik7XG5jb25zdCBwdWJrZXlzXzEgPSByZXF1aXJlKFwiLi9wdWJrZXlzXCIpO1xuZnVuY3Rpb24gcmF3RWQyNTUxOVB1YmtleVRvUmF3QWRkcmVzcyhwdWJrZXlEYXRhKSB7XG4gICAgaWYgKHB1YmtleURhdGEubGVuZ3RoICE9PSAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgRWQyNTUxOSBwdWJrZXkgbGVuZ3RoOiAke3B1YmtleURhdGEubGVuZ3RofWApO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGNyeXB0b18xLnNoYTI1NikocHVia2V5RGF0YSkuc2xpY2UoMCwgMjApO1xufVxuZnVuY3Rpb24gcmF3U2VjcDI1NmsxUHVia2V5VG9SYXdBZGRyZXNzKHB1YmtleURhdGEpIHtcbiAgICBpZiAocHVia2V5RGF0YS5sZW5ndGggIT09IDMzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBTZWNwMjU2azEgcHVia2V5IGxlbmd0aCAoY29tcHJlc3NlZCk6ICR7cHVia2V5RGF0YS5sZW5ndGh9YCk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgY3J5cHRvXzEucmlwZW1kMTYwKSgoMCwgY3J5cHRvXzEuc2hhMjU2KShwdWJrZXlEYXRhKSk7XG59XG4vLyBGb3Igc2VjcDI1NmsxIHRoaXMgYXNzdW1lcyB3ZSBhbHJlYWR5IGhhdmUgYSBjb21wcmVzc2VkIHB1YmtleS5cbmZ1bmN0aW9uIHB1YmtleVRvUmF3QWRkcmVzcyhwdWJrZXkpIHtcbiAgICBpZiAoKDAsIHB1YmtleXNfMS5pc1NlY3AyNTZrMVB1YmtleSkocHVia2V5KSkge1xuICAgICAgICBjb25zdCBwdWJrZXlEYXRhID0gKDAsIGVuY29kaW5nXzEuZnJvbUJhc2U2NCkocHVia2V5LnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJhd1NlY3AyNTZrMVB1YmtleVRvUmF3QWRkcmVzcyhwdWJrZXlEYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHB1YmtleXNfMS5pc0VkMjU1MTlQdWJrZXkpKHB1YmtleSkpIHtcbiAgICAgICAgY29uc3QgcHVia2V5RGF0YSA9ICgwLCBlbmNvZGluZ18xLmZyb21CYXNlNjQpKHB1YmtleS52YWx1ZSk7XG4gICAgICAgIHJldHVybiByYXdFZDI1NTE5UHVia2V5VG9SYXdBZGRyZXNzKHB1YmtleURhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgcHVia2V5c18xLmlzTXVsdGlzaWdUaHJlc2hvbGRQdWJrZXkpKHB1YmtleSkpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iLzM4YjQwMTY1N2U0YWQ3YTdlZWIzYzMwYTNjYmY1MTIwMzdkZjM3NDAvY3J5cHRvL211bHRpc2lnL3RocmVzaG9sZF9wdWJrZXkuZ28jTDcxLUw3NFxuICAgICAgICBjb25zdCBwdWJrZXlEYXRhID0gKDAsIGVuY29kaW5nXzIuZW5jb2RlQW1pbm9QdWJrZXkpKHB1YmtleSk7XG4gICAgICAgIHJldHVybiAoMCwgY3J5cHRvXzEuc2hhMjU2KShwdWJrZXlEYXRhKS5zbGljZSgwLCAyMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBwdWJsaWMga2V5IHR5cGVcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gcHVia2V5VG9BZGRyZXNzKHB1YmtleSwgcHJlZml4KSB7XG4gICAgcmV0dXJuICgwLCBlbmNvZGluZ18xLnRvQmVjaDMyKShwcmVmaXgsIHB1YmtleVRvUmF3QWRkcmVzcyhwdWJrZXkpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3Nlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/coins.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/coins.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.coin = coin;\nexports.coins = coins;\nexports.parseCoins = parseCoins;\nexports.addCoins = addCoins;\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"(ssr)/./node_modules/.pnpm/@cosmjs+math@0.34.0/node_modules/@cosmjs/math/build/index.js\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\nfunction coin(amount, denom) {\n    let outAmount;\n    if (typeof amount === \"number\") {\n        try {\n            outAmount = new math_1.Uint53(amount).toString();\n        }\n        catch (_err) {\n            throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n        }\n    }\n    else {\n        if (!amount.match(/^[0-9]+$/)) {\n            throw new Error(\"Invalid unsigned integer string format\");\n        }\n        outAmount = amount.replace(/^0*/, \"\") || \"0\";\n    }\n    return {\n        amount: outAmount,\n        denom: denom,\n    };\n}\n/**\n * Creates a list of coins with one element.\n */\nfunction coins(amount, denom) {\n    return [coin(amount, denom)];\n}\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * Starting with CosmJS 0.32.3, the following imports are all synonym and support\n * a variety of denom types such as IBC denoms or tokenfactory. If you need to\n * restrict the denom to something very minimal, this needs to be implemented\n * separately in the caller.\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // equals\n * import { parseCoins } from \"@cosmjs/stargate\";\n * // equals\n * import { parseCoins } from \"@cosmjs/amino\";\n * ```\n *\n * This function is not made for supporting decimal amounts and does not support\n * parsing gas prices.\n */\nfunction parseCoins(input) {\n    return input\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .filter(Boolean)\n        .map((part) => {\n        // Denom regex from Stargate (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin.go#L599-L601)\n        const match = part.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);\n        if (!match)\n            throw new Error(\"Got an invalid coin string\");\n        return {\n            amount: match[1].replace(/^0+/, \"\") || \"0\",\n            denom: match[2],\n        };\n    });\n}\n/**\n * Function to sum up coins with type Coin\n */\nfunction addCoins(lhs, rhs) {\n    if (lhs.denom !== rhs.denom)\n        throw new Error(\"Trying to add two coins with different denoms\");\n    return {\n        amount: math_1.Decimal.fromAtomics(lhs.amount, 0).plus(math_1.Decimal.fromAtomics(rhs.amount, 0)).atomics,\n        denom: lhs.denom,\n    };\n}\n//# sourceMappingURL=coins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvY29pbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLGFBQWE7QUFDYixrQkFBa0I7QUFDbEIsZ0JBQWdCO0FBQ2hCLGVBQWUsbUJBQU8sQ0FBQyw2R0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLE1BQU07QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveW91c3VrZS9NeVByb2plY3QvbXktbmV4dXMtYXBwL25vZGVfbW9kdWxlcy8ucG5wbS9AY29zbWpzK2FtaW5vQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9hbWluby9idWlsZC9jb2lucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29pbiA9IGNvaW47XG5leHBvcnRzLmNvaW5zID0gY29pbnM7XG5leHBvcnRzLnBhcnNlQ29pbnMgPSBwYXJzZUNvaW5zO1xuZXhwb3J0cy5hZGRDb2lucyA9IGFkZENvaW5zO1xuY29uc3QgbWF0aF8xID0gcmVxdWlyZShcIkBjb3NtanMvbWF0aFwiKTtcbi8qKlxuICogQ3JlYXRlcyBhIGNvaW4uXG4gKlxuICogSWYgeW91ciB2YWx1ZXMgZG8gbm90IGV4Y2VlZCB0aGUgc2FmZSBpbnRlZ2VyIHJhbmdlIG9mIEpTIG51bWJlcnMgKDUzIGJpdCksXG4gKiB5b3UgY2FuIHVzZSB0aGUgbnVtYmVyIHR5cGUgaGVyZS4gVGhpcyBpcyB0aGUgY2FzZSBmb3IgYWxsIHR5cGljYWwgQ29zbW9zIFNES1xuICogY2hhaW5zIHRoYXQgdXNlIHRoZSBkZWZhdWx0IDYgZGVjaW1hbHMuXG4gKlxuICogSW4gY2FzZSB5b3UgbmVlZCB0byBzdXBwb3J0ciBsYXJnZXIgdmFsdWVzLCB1c2UgdW5zaWduZWQgaW50ZWdlciBzdHJpbmdzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGNvaW4oYW1vdW50LCBkZW5vbSkge1xuICAgIGxldCBvdXRBbW91bnQ7XG4gICAgaWYgKHR5cGVvZiBhbW91bnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dEFtb3VudCA9IG5ldyBtYXRoXzEuVWludDUzKGFtb3VudCkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2Vycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2l2ZW4gYW1vdW50IGlzIG5vdCBhIHNhZmUgaW50ZWdlci4gQ29uc2lkZXIgdXNpbmcgYSBzdHJpbmcgaW5zdGVhZCB0byBvdmVyY29tZSB0aGUgbGltaXRhdGlvbnMgb2YgSlMgbnVtYmVycy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghYW1vdW50Lm1hdGNoKC9eWzAtOV0rJC8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVuc2lnbmVkIGludGVnZXIgc3RyaW5nIGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBvdXRBbW91bnQgPSBhbW91bnQucmVwbGFjZSgvXjAqLywgXCJcIikgfHwgXCIwXCI7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFtb3VudDogb3V0QW1vdW50LFxuICAgICAgICBkZW5vbTogZGVub20sXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGxpc3Qgb2YgY29pbnMgd2l0aCBvbmUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gY29pbnMoYW1vdW50LCBkZW5vbSkge1xuICAgIHJldHVybiBbY29pbihhbW91bnQsIGRlbm9tKV07XG59XG4vKipcbiAqIFRha2VzIGEgY29pbnMgbGlzdCBsaWtlIFwiODE5OTY2MDAwdWNvc20sNzAwMDAwMDAwdXN0YWtlXCIgYW5kIHBhcnNlcyBpdC5cbiAqXG4gKiBTdGFydGluZyB3aXRoIENvc21KUyAwLjMyLjMsIHRoZSBmb2xsb3dpbmcgaW1wb3J0cyBhcmUgYWxsIHN5bm9ueW0gYW5kIHN1cHBvcnRcbiAqIGEgdmFyaWV0eSBvZiBkZW5vbSB0eXBlcyBzdWNoIGFzIElCQyBkZW5vbXMgb3IgdG9rZW5mYWN0b3J5LiBJZiB5b3UgbmVlZCB0b1xuICogcmVzdHJpY3QgdGhlIGRlbm9tIHRvIHNvbWV0aGluZyB2ZXJ5IG1pbmltYWwsIHRoaXMgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWRcbiAqIHNlcGFyYXRlbHkgaW4gdGhlIGNhbGxlci5cbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7IHBhcnNlQ29pbnMgfSBmcm9tIFwiQGNvc21qcy9wcm90by1zaWduaW5nXCI7XG4gKiAvLyBlcXVhbHNcbiAqIGltcG9ydCB7IHBhcnNlQ29pbnMgfSBmcm9tIFwiQGNvc21qcy9zdGFyZ2F0ZVwiO1xuICogLy8gZXF1YWxzXG4gKiBpbXBvcnQgeyBwYXJzZUNvaW5zIH0gZnJvbSBcIkBjb3NtanMvYW1pbm9cIjtcbiAqIGBgYFxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbm90IG1hZGUgZm9yIHN1cHBvcnRpbmcgZGVjaW1hbCBhbW91bnRzIGFuZCBkb2VzIG5vdCBzdXBwb3J0XG4gKiBwYXJzaW5nIGdhcyBwcmljZXMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29pbnMoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLnJlcGxhY2UoL1xccy9nLCBcIlwiKVxuICAgICAgICAuc3BsaXQoXCIsXCIpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLm1hcCgocGFydCkgPT4ge1xuICAgICAgICAvLyBEZW5vbSByZWdleCBmcm9tIFN0YXJnYXRlIChodHRwczovL2dpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvYmxvYi92MC40Mi43L3R5cGVzL2NvaW4uZ28jTDU5OS1MNjAxKVxuICAgICAgICBjb25zdCBtYXRjaCA9IHBhcnQubWF0Y2goL14oWzAtOV0rKShbYS16QS1aXVthLXpBLVowLTkvXXsyLDEyN30pJC8pO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR290IGFuIGludmFsaWQgY29pbiBzdHJpbmdcIik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbW91bnQ6IG1hdGNoWzFdLnJlcGxhY2UoL14wKy8sIFwiXCIpIHx8IFwiMFwiLFxuICAgICAgICAgICAgZGVub206IG1hdGNoWzJdLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuLyoqXG4gKiBGdW5jdGlvbiB0byBzdW0gdXAgY29pbnMgd2l0aCB0eXBlIENvaW5cbiAqL1xuZnVuY3Rpb24gYWRkQ29pbnMobGhzLCByaHMpIHtcbiAgICBpZiAobGhzLmRlbm9tICE9PSByaHMuZGVub20pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyeWluZyB0byBhZGQgdHdvIGNvaW5zIHdpdGggZGlmZmVyZW50IGRlbm9tc1wiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbW91bnQ6IG1hdGhfMS5EZWNpbWFsLmZyb21BdG9taWNzKGxocy5hbW91bnQsIDApLnBsdXMobWF0aF8xLkRlY2ltYWwuZnJvbUF0b21pY3MocmhzLmFtb3VudCwgMCkpLmF0b21pY3MsXG4gICAgICAgIGRlbm9tOiBsaHMuZGVub20sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvaW5zLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/coins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/encoding.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/encoding.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\nexports.encodeEd25519Pubkey = encodeEd25519Pubkey;\nexports.decodeAminoPubkey = decodeAminoPubkey;\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\nexports.encodeAminoPubkey = encodeAminoPubkey;\nexports.encodeBech32Pubkey = encodeBech32Pubkey;\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"(ssr)/./node_modules/.pnpm/@cosmjs+math@0.34.0/node_modules/@cosmjs/math/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"(ssr)/./node_modules/.pnpm/@cosmjs+utils@0.34.0/node_modules/@cosmjs/utils/build/index.js\");\nconst pubkeys_1 = __webpack_require__(/*! ./pubkeys */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js\");\n/**\n * Takes a Secp256k1 public key as raw bytes and returns the Amino JSON\n * representation of it (the type/value wrapper object).\n */\nfunction encodeSecp256k1Pubkey(pubkey) {\n    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {\n        throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n    }\n    return {\n        type: pubkeys_1.pubkeyType.secp256k1,\n        value: (0, encoding_1.toBase64)(pubkey),\n    };\n}\n/**\n * Takes an Edd25519 public key as raw bytes and returns the Amino JSON\n * representation of it (the type/value wrapper object).\n */\nfunction encodeEd25519Pubkey(pubkey) {\n    if (pubkey.length !== 32) {\n        throw new Error(\"Ed25519 public key must be 32 bytes long\");\n    }\n    return {\n        type: pubkeys_1.pubkeyType.ed25519,\n        value: (0, encoding_1.toBase64)(pubkey),\n    };\n}\n// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\nconst pubkeyAminoPrefixSecp256k1 = (0, encoding_1.fromHex)(\"eb5ae987\" + \"21\" /* fixed length */);\nconst pubkeyAminoPrefixEd25519 = (0, encoding_1.fromHex)(\"1624de64\" + \"20\" /* fixed length */);\nconst pubkeyAminoPrefixSr25519 = (0, encoding_1.fromHex)(\"0dfb1005\" + \"20\" /* fixed length */);\n/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */\nconst pubkeyAminoPrefixMultisigThreshold = (0, encoding_1.fromHex)(\"22c1f7e2\" /* variable length not included */);\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\nfunction decodeAminoPubkey(data) {\n    if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSecp256k1)) {\n        const rest = data.slice(pubkeyAminoPrefixSecp256k1.length);\n        if (rest.length !== 33) {\n            throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.secp256k1,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixEd25519)) {\n        const rest = data.slice(pubkeyAminoPrefixEd25519.length);\n        if (rest.length !== 32) {\n            throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.ed25519,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSr25519)) {\n        const rest = data.slice(pubkeyAminoPrefixSr25519.length);\n        if (rest.length !== 32) {\n            throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.sr25519,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixMultisigThreshold)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return decodeMultisigPubkey(data);\n    }\n    else {\n        throw new Error(\"Unsupported public key type. Amino data starts with: \" + (0, encoding_1.toHex)(data.slice(0, 5)));\n    }\n}\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\nfunction decodeBech32Pubkey(bechEncoded) {\n    const { data } = (0, encoding_1.fromBech32)(bechEncoded);\n    return decodeAminoPubkey(data);\n}\n/**\n * Uvarint decoder for Amino.\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76\n * @returns varint as number, and bytes count occupied by varaint\n */\nfunction decodeUvarint(reader) {\n    if (reader.length < 1) {\n        throw new Error(\"Can't decode varint. EOF\");\n    }\n    if (reader[0] > 127) {\n        throw new Error(\"Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.\");\n    }\n    return [reader[0], 1];\n}\n/**\n * Decodes a multisig pubkey to type object.\n * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]\n *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]\n * @param data encoded pubkey\n */\nfunction decodeMultisigPubkey(data) {\n    const reader = Array.from(data);\n    // remove multisig amino prefix;\n    const prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);\n    if (!(0, utils_1.arrayContentStartsWith)(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {\n        throw new Error(\"Invalid multisig prefix.\");\n    }\n    // remove 0x08 threshold prefix;\n    if (reader.shift() != 0x08) {\n        throw new Error(\"Invalid multisig data. Expecting 0x08 prefix before threshold.\");\n    }\n    // read threshold\n    const [threshold, thresholdBytesLength] = decodeUvarint(reader);\n    reader.splice(0, thresholdBytesLength);\n    // read participants pubkeys\n    const pubkeys = [];\n    while (reader.length > 0) {\n        // remove 0x12 threshold prefix;\n        if (reader.shift() != 0x12) {\n            throw new Error(\"Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.\");\n        }\n        // read pubkey length\n        const [pubkeyLength, pubkeyLengthBytesSize] = decodeUvarint(reader);\n        reader.splice(0, pubkeyLengthBytesSize);\n        // verify that we can read pubkey\n        if (reader.length < pubkeyLength) {\n            throw new Error(\"Invalid multisig data length.\");\n        }\n        // read and decode participant pubkey\n        const encodedPubkey = reader.splice(0, pubkeyLength);\n        const pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));\n        pubkeys.push(pubkey);\n    }\n    return {\n        type: pubkeys_1.pubkeyType.multisigThreshold,\n        value: {\n            threshold: threshold.toString(),\n            pubkeys: pubkeys,\n        },\n    };\n}\n/**\n * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go\n * standard library.\n *\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85\n */\nfunction encodeUvarint(value) {\n    const checked = math_1.Uint53.fromString(value.toString()).toNumber();\n    if (checked > 127) {\n        throw new Error(\"Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.\");\n    }\n    return [checked];\n}\n/**\n * Encodes a public key to binary Amino.\n */\nfunction encodeAminoPubkey(pubkey) {\n    if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n        const out = Array.from(pubkeyAminoPrefixMultisigThreshold);\n        out.push(0x08); // TODO: What is this?\n        out.push(...encodeUvarint(pubkey.value.threshold));\n        for (const pubkeyData of pubkey.value.pubkeys.map((p) => encodeAminoPubkey(p))) {\n            out.push(0x12); // TODO: What is this?\n            out.push(...encodeUvarint(pubkeyData.length));\n            out.push(...pubkeyData);\n        }\n        return new Uint8Array(out);\n    }\n    else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n        return new Uint8Array([...pubkeyAminoPrefixEd25519, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n    }\n    else if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n        return new Uint8Array([...pubkeyAminoPrefixSecp256k1, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n    }\n    else {\n        throw new Error(\"Unsupported pubkey type\");\n    }\n}\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\nfunction encodeBech32Pubkey(pubkey, prefix) {\n    return (0, encoding_1.toBech32)(prefix, encodeAminoPubkey(pubkey));\n}\n//# sourceMappingURL=encoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeKdf = exports.makeStdTx = exports.isStdTx = exports.serializeSignDoc = exports.makeSignDoc = exports.encodeSecp256k1Signature = exports.decodeSignature = exports.Secp256k1Wallet = exports.Secp256k1HdWallet = exports.extractKdfConfiguration = exports.pubkeyType = exports.isSinglePubkey = exports.isSecp256k1Pubkey = exports.isMultisigThresholdPubkey = exports.isEd25519Pubkey = exports.makeCosmoshubPath = exports.omitDefault = exports.createMultisigThresholdPubkey = exports.encodeSecp256k1Pubkey = exports.encodeEd25519Pubkey = exports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.parseCoins = exports.coins = exports.coin = exports.addCoins = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = exports.pubkeyToRawAddress = exports.pubkeyToAddress = void 0;\nvar addresses_1 = __webpack_require__(/*! ./addresses */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js\");\nObject.defineProperty(exports, \"pubkeyToAddress\", ({ enumerable: true, get: function () { return addresses_1.pubkeyToAddress; } }));\nObject.defineProperty(exports, \"pubkeyToRawAddress\", ({ enumerable: true, get: function () { return addresses_1.pubkeyToRawAddress; } }));\nObject.defineProperty(exports, \"rawEd25519PubkeyToRawAddress\", ({ enumerable: true, get: function () { return addresses_1.rawEd25519PubkeyToRawAddress; } }));\nObject.defineProperty(exports, \"rawSecp256k1PubkeyToRawAddress\", ({ enumerable: true, get: function () { return addresses_1.rawSecp256k1PubkeyToRawAddress; } }));\nvar coins_1 = __webpack_require__(/*! ./coins */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/coins.js\");\nObject.defineProperty(exports, \"addCoins\", ({ enumerable: true, get: function () { return coins_1.addCoins; } }));\nObject.defineProperty(exports, \"coin\", ({ enumerable: true, get: function () { return coins_1.coin; } }));\nObject.defineProperty(exports, \"coins\", ({ enumerable: true, get: function () { return coins_1.coins; } }));\nObject.defineProperty(exports, \"parseCoins\", ({ enumerable: true, get: function () { return coins_1.parseCoins; } }));\nvar encoding_1 = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/encoding.js\");\nObject.defineProperty(exports, \"decodeAminoPubkey\", ({ enumerable: true, get: function () { return encoding_1.decodeAminoPubkey; } }));\nObject.defineProperty(exports, \"decodeBech32Pubkey\", ({ enumerable: true, get: function () { return encoding_1.decodeBech32Pubkey; } }));\nObject.defineProperty(exports, \"encodeAminoPubkey\", ({ enumerable: true, get: function () { return encoding_1.encodeAminoPubkey; } }));\nObject.defineProperty(exports, \"encodeBech32Pubkey\", ({ enumerable: true, get: function () { return encoding_1.encodeBech32Pubkey; } }));\nObject.defineProperty(exports, \"encodeEd25519Pubkey\", ({ enumerable: true, get: function () { return encoding_1.encodeEd25519Pubkey; } }));\nObject.defineProperty(exports, \"encodeSecp256k1Pubkey\", ({ enumerable: true, get: function () { return encoding_1.encodeSecp256k1Pubkey; } }));\nvar multisig_1 = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/multisig.js\");\nObject.defineProperty(exports, \"createMultisigThresholdPubkey\", ({ enumerable: true, get: function () { return multisig_1.createMultisigThresholdPubkey; } }));\nvar omitdefault_1 = __webpack_require__(/*! ./omitdefault */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/omitdefault.js\");\nObject.defineProperty(exports, \"omitDefault\", ({ enumerable: true, get: function () { return omitdefault_1.omitDefault; } }));\nvar paths_1 = __webpack_require__(/*! ./paths */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/paths.js\");\nObject.defineProperty(exports, \"makeCosmoshubPath\", ({ enumerable: true, get: function () { return paths_1.makeCosmoshubPath; } }));\nvar pubkeys_1 = __webpack_require__(/*! ./pubkeys */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js\");\nObject.defineProperty(exports, \"isEd25519Pubkey\", ({ enumerable: true, get: function () { return pubkeys_1.isEd25519Pubkey; } }));\nObject.defineProperty(exports, \"isMultisigThresholdPubkey\", ({ enumerable: true, get: function () { return pubkeys_1.isMultisigThresholdPubkey; } }));\nObject.defineProperty(exports, \"isSecp256k1Pubkey\", ({ enumerable: true, get: function () { return pubkeys_1.isSecp256k1Pubkey; } }));\nObject.defineProperty(exports, \"isSinglePubkey\", ({ enumerable: true, get: function () { return pubkeys_1.isSinglePubkey; } }));\nObject.defineProperty(exports, \"pubkeyType\", ({ enumerable: true, get: function () { return pubkeys_1.pubkeyType; } }));\nvar secp256k1hdwallet_1 = __webpack_require__(/*! ./secp256k1hdwallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1hdwallet.js\");\nObject.defineProperty(exports, \"extractKdfConfiguration\", ({ enumerable: true, get: function () { return secp256k1hdwallet_1.extractKdfConfiguration; } }));\nObject.defineProperty(exports, \"Secp256k1HdWallet\", ({ enumerable: true, get: function () { return secp256k1hdwallet_1.Secp256k1HdWallet; } }));\nvar secp256k1wallet_1 = __webpack_require__(/*! ./secp256k1wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1wallet.js\");\nObject.defineProperty(exports, \"Secp256k1Wallet\", ({ enumerable: true, get: function () { return secp256k1wallet_1.Secp256k1Wallet; } }));\nvar signature_1 = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signature.js\");\nObject.defineProperty(exports, \"decodeSignature\", ({ enumerable: true, get: function () { return signature_1.decodeSignature; } }));\nObject.defineProperty(exports, \"encodeSecp256k1Signature\", ({ enumerable: true, get: function () { return signature_1.encodeSecp256k1Signature; } }));\nvar signdoc_1 = __webpack_require__(/*! ./signdoc */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signdoc.js\");\nObject.defineProperty(exports, \"makeSignDoc\", ({ enumerable: true, get: function () { return signdoc_1.makeSignDoc; } }));\nObject.defineProperty(exports, \"serializeSignDoc\", ({ enumerable: true, get: function () { return signdoc_1.serializeSignDoc; } }));\nvar stdtx_1 = __webpack_require__(/*! ./stdtx */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/stdtx.js\");\nObject.defineProperty(exports, \"isStdTx\", ({ enumerable: true, get: function () { return stdtx_1.isStdTx; } }));\nObject.defineProperty(exports, \"makeStdTx\", ({ enumerable: true, get: function () { return stdtx_1.makeStdTx; } }));\nvar wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/wallet.js\");\nObject.defineProperty(exports, \"executeKdf\", ({ enumerable: true, get: function () { return wallet_1.executeKdf; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/multisig.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/multisig.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compareArrays = compareArrays;\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"(ssr)/./node_modules/.pnpm/@cosmjs+math@0.34.0/node_modules/@cosmjs/math/build/index.js\");\nconst addresses_1 = __webpack_require__(/*! ./addresses */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\nfunction compareArrays(a, b) {\n    const aHex = (0, encoding_1.toHex)(a);\n    const bHex = (0, encoding_1.toHex)(b);\n    return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\nfunction createMultisigThresholdPubkey(pubkeys, threshold, nosort = false) {\n    const uintThreshold = new math_1.Uint53(threshold);\n    if (uintThreshold.toNumber() > pubkeys.length) {\n        throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n    }\n    const outPubkeys = nosort\n        ? pubkeys\n        : Array.from(pubkeys).sort((lhs, rhs) => {\n            // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n            const addressLhs = (0, addresses_1.pubkeyToRawAddress)(lhs);\n            const addressRhs = (0, addresses_1.pubkeyToRawAddress)(rhs);\n            return compareArrays(addressLhs, addressRhs);\n        });\n    return {\n        type: \"tendermint/PubKeyMultisigThreshold\",\n        value: {\n            threshold: uintThreshold.toString(),\n            pubkeys: outPubkeys,\n        },\n    };\n}\n//# sourceMappingURL=multisig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvbXVsdGlzaWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLHFDQUFxQztBQUNyQyxtQkFBbUIsbUJBQU8sQ0FBQyx5SEFBa0I7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLDZHQUFjO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGtIQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QywwQkFBMEIsNkJBQTZCLGVBQWU7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvbXVsdGlzaWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBhcmVBcnJheXMgPSBjb21wYXJlQXJyYXlzO1xuZXhwb3J0cy5jcmVhdGVNdWx0aXNpZ1RocmVzaG9sZFB1YmtleSA9IGNyZWF0ZU11bHRpc2lnVGhyZXNob2xkUHVia2V5O1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuY29uc3QgbWF0aF8xID0gcmVxdWlyZShcIkBjb3NtanMvbWF0aFwiKTtcbmNvbnN0IGFkZHJlc3Nlc18xID0gcmVxdWlyZShcIi4vYWRkcmVzc2VzXCIpO1xuLyoqXG4gKiBDb21wYXJlIGFycmF5cyBsZXhpY29ncmFwaGljYWxseS5cbiAqXG4gKiBSZXR1cm5zIHZhbHVlIDwgMCBpZiBgYSA8IGJgLlxuICogUmV0dXJucyB2YWx1ZSA+IDAgaWYgYGEgPiBiYC5cbiAqIFJldHVybnMgMCBpZiBgYSA9PT0gYmAuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYSwgYikge1xuICAgIGNvbnN0IGFIZXggPSAoMCwgZW5jb2RpbmdfMS50b0hleCkoYSk7XG4gICAgY29uc3QgYkhleCA9ICgwLCBlbmNvZGluZ18xLnRvSGV4KShiKTtcbiAgICByZXR1cm4gYUhleCA9PT0gYkhleCA/IDAgOiBhSGV4IDwgYkhleCA/IC0xIDogMTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU11bHRpc2lnVGhyZXNob2xkUHVia2V5KHB1YmtleXMsIHRocmVzaG9sZCwgbm9zb3J0ID0gZmFsc2UpIHtcbiAgICBjb25zdCB1aW50VGhyZXNob2xkID0gbmV3IG1hdGhfMS5VaW50NTModGhyZXNob2xkKTtcbiAgICBpZiAodWludFRocmVzaG9sZC50b051bWJlcigpID4gcHVia2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaHJlc2hvbGQgayA9ICR7dWludFRocmVzaG9sZC50b051bWJlcigpfSBleGNlZWRzIG51bWJlciBvZiBrZXlzIG4gPSAke3B1YmtleXMubGVuZ3RofWApO1xuICAgIH1cbiAgICBjb25zdCBvdXRQdWJrZXlzID0gbm9zb3J0XG4gICAgICAgID8gcHVia2V5c1xuICAgICAgICA6IEFycmF5LmZyb20ocHVia2V5cykuc29ydCgobGhzLCByaHMpID0+IHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay9ibG9iL3YwLjQyLjIvY2xpZW50L2tleXMvYWRkLmdvI0wxNzItTDE3NFxuICAgICAgICAgICAgY29uc3QgYWRkcmVzc0xocyA9ICgwLCBhZGRyZXNzZXNfMS5wdWJrZXlUb1Jhd0FkZHJlc3MpKGxocyk7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzUmhzID0gKDAsIGFkZHJlc3Nlc18xLnB1YmtleVRvUmF3QWRkcmVzcykocmhzKTtcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlQXJyYXlzKGFkZHJlc3NMaHMsIGFkZHJlc3NSaHMpO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInRlbmRlcm1pbnQvUHViS2V5TXVsdGlzaWdUaHJlc2hvbGRcIixcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHRocmVzaG9sZDogdWludFRocmVzaG9sZC50b1N0cmluZygpLFxuICAgICAgICAgICAgcHVia2V5czogb3V0UHVia2V5cyxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGlzaWcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/omitdefault.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/omitdefault.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.omitDefault = omitDefault;\n/**\n * Returns the given input. If the input is the default value\n * of protobuf, undefined is returned. Use this when creating Amino JSON converters.\n */\nfunction omitDefault(input) {\n    switch (typeof input) {\n        case \"string\":\n            return input === \"\" ? undefined : input;\n        case \"number\":\n            return input === 0 ? undefined : input;\n        case \"bigint\":\n            return input === BigInt(0) ? undefined : input;\n        case \"boolean\":\n            return !input ? undefined : input;\n        default:\n            throw new Error(`Got unsupported type '${typeof input}'`);\n    }\n}\n//# sourceMappingURL=omitdefault.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvb21pdGRlZmF1bHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxhQUFhO0FBQ2xFO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvb21pdGRlZmF1bHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9taXREZWZhdWx0ID0gb21pdERlZmF1bHQ7XG4vKipcbiAqIFJldHVybnMgdGhlIGdpdmVuIGlucHV0LiBJZiB0aGUgaW5wdXQgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAqIG9mIHByb3RvYnVmLCB1bmRlZmluZWQgaXMgcmV0dXJuZWQuIFVzZSB0aGlzIHdoZW4gY3JlYXRpbmcgQW1pbm8gSlNPTiBjb252ZXJ0ZXJzLlxuICovXG5mdW5jdGlvbiBvbWl0RGVmYXVsdChpbnB1dCkge1xuICAgIHN3aXRjaCAodHlwZW9mIGlucHV0KSB7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gXCJcIiA/IHVuZGVmaW5lZCA6IGlucHV0O1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09IDAgPyB1bmRlZmluZWQgOiBpbnB1dDtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSBCaWdJbnQoMCkgPyB1bmRlZmluZWQgOiBpbnB1dDtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiAhaW5wdXQgPyB1bmRlZmluZWQgOiBpbnB1dDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR290IHVuc3VwcG9ydGVkIHR5cGUgJyR7dHlwZW9mIGlucHV0fSdgKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbWl0ZGVmYXVsdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/omitdefault.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/paths.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/paths.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeCosmoshubPath = makeCosmoshubPath;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\n/**\n * The Cosmos Hub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeCosmoshubPath(a) {\n    return [\n        crypto_1.Slip10RawIndex.hardened(44),\n        crypto_1.Slip10RawIndex.hardened(118),\n        crypto_1.Slip10RawIndex.hardened(0),\n        crypto_1.Slip10RawIndex.normal(0),\n        crypto_1.Slip10RawIndex.normal(a),\n    ];\n}\n//# sourceMappingURL=paths.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvcGF0aHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGlCQUFpQixtQkFBTyxDQUFDLG1IQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveW91c3VrZS9NeVByb2plY3QvbXktbmV4dXMtYXBwL25vZGVfbW9kdWxlcy8ucG5wbS9AY29zbWpzK2FtaW5vQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9hbWluby9idWlsZC9wYXRocy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZUNvc21vc2h1YlBhdGggPSBtYWtlQ29zbW9zaHViUGF0aDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBjb3NtanMvY3J5cHRvXCIpO1xuLyoqXG4gKiBUaGUgQ29zbW9zIEh1YiBkZXJpdmF0aW9uIHBhdGggaW4gdGhlIGZvcm0gYG0vNDQnLzExOCcvMCcvMC9hYFxuICogd2l0aCAwLWJhc2VkIGFjY291bnQgaW5kZXggYGFgLlxuICovXG5mdW5jdGlvbiBtYWtlQ29zbW9zaHViUGF0aChhKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgY3J5cHRvXzEuU2xpcDEwUmF3SW5kZXguaGFyZGVuZWQoNDQpLFxuICAgICAgICBjcnlwdG9fMS5TbGlwMTBSYXdJbmRleC5oYXJkZW5lZCgxMTgpLFxuICAgICAgICBjcnlwdG9fMS5TbGlwMTBSYXdJbmRleC5oYXJkZW5lZCgwKSxcbiAgICAgICAgY3J5cHRvXzEuU2xpcDEwUmF3SW5kZXgubm9ybWFsKDApLFxuICAgICAgICBjcnlwdG9fMS5TbGlwMTBSYXdJbmRleC5ub3JtYWwoYSksXG4gICAgXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGhzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/paths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pubkeyType = void 0;\nexports.isEd25519Pubkey = isEd25519Pubkey;\nexports.isSecp256k1Pubkey = isSecp256k1Pubkey;\nexports.isSinglePubkey = isSinglePubkey;\nexports.isMultisigThresholdPubkey = isMultisigThresholdPubkey;\nfunction isEd25519Pubkey(pubkey) {\n    return pubkey.type === \"tendermint/PubKeyEd25519\";\n}\nfunction isSecp256k1Pubkey(pubkey) {\n    return pubkey.type === \"tendermint/PubKeySecp256k1\";\n}\nexports.pubkeyType = {\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/ed25519/ed25519.go#L22 */\n    secp256k1: \"tendermint/PubKeySecp256k1\",\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/secp256k1/secp256k1.go#L23 */\n    ed25519: \"tendermint/PubKeyEd25519\",\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/sr25519/codec.go#L12 */\n    sr25519: \"tendermint/PubKeySr25519\",\n    multisigThreshold: \"tendermint/PubKeyMultisigThreshold\",\n};\nfunction isSinglePubkey(pubkey) {\n    const singPubkeyTypes = [exports.pubkeyType.ed25519, exports.pubkeyType.secp256k1, exports.pubkeyType.sr25519];\n    return singPubkeyTypes.includes(pubkey.type);\n}\nfunction isMultisigThresholdPubkey(pubkey) {\n    return pubkey.type === \"tendermint/PubKeyMultisigThreshold\";\n}\n//# sourceMappingURL=pubkeys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvcHVia2V5cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvcHVia2V5cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHVia2V5VHlwZSA9IHZvaWQgMDtcbmV4cG9ydHMuaXNFZDI1NTE5UHVia2V5ID0gaXNFZDI1NTE5UHVia2V5O1xuZXhwb3J0cy5pc1NlY3AyNTZrMVB1YmtleSA9IGlzU2VjcDI1NmsxUHVia2V5O1xuZXhwb3J0cy5pc1NpbmdsZVB1YmtleSA9IGlzU2luZ2xlUHVia2V5O1xuZXhwb3J0cy5pc011bHRpc2lnVGhyZXNob2xkUHVia2V5ID0gaXNNdWx0aXNpZ1RocmVzaG9sZFB1YmtleTtcbmZ1bmN0aW9uIGlzRWQyNTUxOVB1YmtleShwdWJrZXkpIHtcbiAgICByZXR1cm4gcHVia2V5LnR5cGUgPT09IFwidGVuZGVybWludC9QdWJLZXlFZDI1NTE5XCI7XG59XG5mdW5jdGlvbiBpc1NlY3AyNTZrMVB1YmtleShwdWJrZXkpIHtcbiAgICByZXR1cm4gcHVia2V5LnR5cGUgPT09IFwidGVuZGVybWludC9QdWJLZXlTZWNwMjU2azFcIjtcbn1cbmV4cG9ydHMucHVia2V5VHlwZSA9IHtcbiAgICAvKiogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvdjAuMzMuMC9jcnlwdG8vZWQyNTUxOS9lZDI1NTE5LmdvI0wyMiAqL1xuICAgIHNlY3AyNTZrMTogXCJ0ZW5kZXJtaW50L1B1YktleVNlY3AyNTZrMVwiLFxuICAgIC8qKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi92MC4zMy4wL2NyeXB0by9zZWNwMjU2azEvc2VjcDI1NmsxLmdvI0wyMyAqL1xuICAgIGVkMjU1MTk6IFwidGVuZGVybWludC9QdWJLZXlFZDI1NTE5XCIsXG4gICAgLyoqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL3YwLjMzLjAvY3J5cHRvL3NyMjU1MTkvY29kZWMuZ28jTDEyICovXG4gICAgc3IyNTUxOTogXCJ0ZW5kZXJtaW50L1B1YktleVNyMjU1MTlcIixcbiAgICBtdWx0aXNpZ1RocmVzaG9sZDogXCJ0ZW5kZXJtaW50L1B1YktleU11bHRpc2lnVGhyZXNob2xkXCIsXG59O1xuZnVuY3Rpb24gaXNTaW5nbGVQdWJrZXkocHVia2V5KSB7XG4gICAgY29uc3Qgc2luZ1B1YmtleVR5cGVzID0gW2V4cG9ydHMucHVia2V5VHlwZS5lZDI1NTE5LCBleHBvcnRzLnB1YmtleVR5cGUuc2VjcDI1NmsxLCBleHBvcnRzLnB1YmtleVR5cGUuc3IyNTUxOV07XG4gICAgcmV0dXJuIHNpbmdQdWJrZXlUeXBlcy5pbmNsdWRlcyhwdWJrZXkudHlwZSk7XG59XG5mdW5jdGlvbiBpc011bHRpc2lnVGhyZXNob2xkUHVia2V5KHB1YmtleSkge1xuICAgIHJldHVybiBwdWJrZXkudHlwZSA9PT0gXCJ0ZW5kZXJtaW50L1B1YktleU11bHRpc2lnVGhyZXNob2xkXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJrZXlzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1hdwallet.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1hdwallet.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Secp256k1HdWallet = void 0;\nexports.extractKdfConfiguration = extractKdfConfiguration;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"(ssr)/./node_modules/.pnpm/@cosmjs+utils@0.34.0/node_modules/@cosmjs/utils/build/index.js\");\nconst addresses_1 = __webpack_require__(/*! ./addresses */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js\");\nconst paths_1 = __webpack_require__(/*! ./paths */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/paths.js\");\nconst signature_1 = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signature.js\");\nconst signdoc_1 = __webpack_require__(/*! ./signdoc */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signdoc.js\");\nconst wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/wallet.js\");\nconst serializationTypeV1 = \"secp256k1wallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n    algorithm: \"argon2id\",\n    params: {\n        outputLength: 32,\n        opsLimit: 24,\n        memLimitKib: 12 * 1024,\n    },\n};\nfunction isDerivationJson(thing) {\n    if (!(0, utils_1.isNonNullObject)(thing))\n        return false;\n    if (typeof thing.hdPath !== \"string\")\n        return false;\n    if (typeof thing.prefix !== \"string\")\n        return false;\n    return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n    return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root))\n        throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n        case serializationTypeV1:\n            return extractKdfConfigurationV1(root);\n        default:\n            throw new Error(\"Unsupported serialization type\");\n    }\n}\nconst defaultOptions = {\n    bip39Password: \"\",\n    hdPaths: [(0, paths_1.makeCosmoshubPath)(0)],\n    prefix: \"cosmos\",\n};\nclass Secp256k1HdWallet {\n    /**\n     * Restores a wallet from the given BIP39 mnemonic.\n     *\n     * @param mnemonic Any valid English mnemonic.\n     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async fromMnemonic(mnemonic, options = {}) {\n        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n        return new Secp256k1HdWallet(mnemonicChecked, {\n            ...options,\n            seed: seed,\n        });\n    }\n    /**\n     * Generates a new wallet with a BIP39 mnemonic of the given length.\n     *\n     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async generate(length = 12, options = {}) {\n        const entropyLength = 4 * Math.floor((11 * length) / 33);\n        const entropy = crypto_1.Random.getBytes(entropyLength);\n        const mnemonic = crypto_1.Bip39.encode(entropy);\n        return Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    static async deserialize(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        switch (root.type) {\n            case serializationTypeV1:\n                return Secp256k1HdWallet.deserializeTypeV1(serialization, password);\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n     */\n    static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const untypedRoot = root;\n        switch (untypedRoot.type) {\n            case serializationTypeV1: {\n                const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n                const decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n                const { mnemonic, accounts } = decryptedDocument;\n                (0, utils_1.assert)(typeof mnemonic === \"string\");\n                if (!Array.isArray(accounts))\n                    throw new Error(\"Property 'accounts' is not an array\");\n                if (!accounts.every((account) => isDerivationJson(account))) {\n                    throw new Error(\"Account is not in the correct format.\");\n                }\n                const firstPrefix = accounts[0].prefix;\n                if (!accounts.every(({ prefix }) => prefix === firstPrefix)) {\n                    throw new Error(\"Accounts do not all have the same prefix\");\n                }\n                const hdPaths = accounts.map(({ hdPath }) => (0, crypto_1.stringToPath)(hdPath));\n                return Secp256k1HdWallet.fromMnemonic(mnemonic, {\n                    hdPaths: hdPaths,\n                    prefix: firstPrefix,\n                });\n            }\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    static async deserializeTypeV1(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);\n        return Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n    }\n    constructor(mnemonic, options) {\n        const hdPaths = options.hdPaths ?? defaultOptions.hdPaths;\n        const prefix = options.prefix ?? defaultOptions.prefix;\n        this.secret = mnemonic;\n        this.seed = options.seed;\n        this.accounts = hdPaths.map((hdPath) => ({\n            hdPath: hdPath,\n            prefix,\n        }));\n    }\n    get mnemonic() {\n        return this.secret.toString();\n    }\n    async getAccounts() {\n        const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();\n        return accountsWithPrivkeys.map(({ algo, pubkey, address }) => ({\n            algo: algo,\n            pubkey: pubkey,\n            address: address,\n        }));\n    }\n    async signAmino(signerAddress, signDoc) {\n        const accounts = await this.getAccountsWithPrivkeys();\n        const account = accounts.find(({ address }) => address === signerAddress);\n        if (account === undefined) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const { privkey, pubkey } = account;\n        const message = (0, crypto_1.sha256)((0, signdoc_1.serializeSignDoc)(signDoc));\n        const signature = await crypto_1.Secp256k1.createSignature(message, privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: (0, signature_1.encodeSecp256k1Signature)(pubkey, signatureBytes),\n        };\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    async serialize(password) {\n        const kdfConfiguration = basicPasswordHashingOptions;\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);\n        return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n     * is not the case, the wallet cannot be restored with the original password.\n     */\n    async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n        const dataToEncrypt = {\n            mnemonic: this.mnemonic,\n            accounts: this.accounts.map(({ hdPath, prefix }) => ({\n                hdPath: (0, crypto_1.pathToString)(hdPath),\n                prefix: prefix,\n            })),\n        };\n        const dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n        const encryptionConfiguration = {\n            algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf,\n        };\n        const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n        const out = {\n            type: serializationTypeV1,\n            kdf: kdfConfiguration,\n            encryption: encryptionConfiguration,\n            data: (0, encoding_1.toBase64)(encryptedData),\n        };\n        return JSON.stringify(out);\n    }\n    async getKeyPair(hdPath) {\n        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath);\n        const { pubkey } = await crypto_1.Secp256k1.makeKeypair(privkey);\n        return {\n            privkey: privkey,\n            pubkey: crypto_1.Secp256k1.compressPubkey(pubkey),\n        };\n    }\n    async getAccountsWithPrivkeys() {\n        return Promise.all(this.accounts.map(async ({ hdPath, prefix }) => {\n            const { privkey, pubkey } = await this.getKeyPair(hdPath);\n            const address = (0, encoding_1.toBech32)(prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n            return {\n                algo: \"secp256k1\",\n                privkey: privkey,\n                pubkey: pubkey,\n                address: address,\n            };\n        }));\n    }\n}\nexports.Secp256k1HdWallet = Secp256k1HdWallet;\n//# sourceMappingURL=secp256k1hdwallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1hdwallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1wallet.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1wallet.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst addresses_1 = __webpack_require__(/*! ./addresses */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/addresses.js\");\nconst signature_1 = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signature.js\");\nconst signdoc_1 = __webpack_require__(/*! ./signdoc */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signdoc.js\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n    /**\n     * Creates a Secp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signAmino(signerAddress, signDoc) {\n        if (signerAddress !== this.address) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes),\n        };\n    }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;\n//# sourceMappingURL=secp256k1wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvc2VjcDI1Nmsxd2FsbGV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixpQkFBaUIsbUJBQU8sQ0FBQyxtSEFBZ0I7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMseUhBQWtCO0FBQzdDLG9CQUFvQixtQkFBTyxDQUFDLGtIQUFhO0FBQ3pDLG9CQUFvQixtQkFBTyxDQUFDLGtIQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLDhHQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxlQUFlO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMveW91c3VrZS9NeVByb2plY3QvbXktbmV4dXMtYXBwL25vZGVfbW9kdWxlcy8ucG5wbS9AY29zbWpzK2FtaW5vQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9hbWluby9idWlsZC9zZWNwMjU2azF3YWxsZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlY3AyNTZrMVdhbGxldCA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBjb3NtanMvY3J5cHRvXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuY29uc3QgYWRkcmVzc2VzXzEgPSByZXF1aXJlKFwiLi9hZGRyZXNzZXNcIik7XG5jb25zdCBzaWduYXR1cmVfMSA9IHJlcXVpcmUoXCIuL3NpZ25hdHVyZVwiKTtcbmNvbnN0IHNpZ25kb2NfMSA9IHJlcXVpcmUoXCIuL3NpZ25kb2NcIik7XG4vKipcbiAqIEEgd2FsbGV0IHRoYXQgaG9sZHMgYSBzaW5nbGUgc2VjcDI1NmsxIGtleXBhaXIuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gd29yayB3aXRoIEJJUDM5IG1uZW1vbmljcyBhbmQgbXVsdGlwbGUgYWNjb3VudHMsIHVzZSBTZWNwMjU2azFIZFdhbGxldC5cbiAqL1xuY2xhc3MgU2VjcDI1NmsxV2FsbGV0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU2VjcDI1NmsxV2FsbGV0IGZyb20gdGhlIGdpdmVuIHByaXZhdGUga2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJpdmtleSBUaGUgcHJpdmF0ZSBrZXkuXG4gICAgICogQHBhcmFtIHByZWZpeCBUaGUgYmVjaDMyIGFkZHJlc3MgcHJlZml4IChodW1hbiByZWFkYWJsZSBwYXJ0KS4gRGVmYXVsdHMgdG8gXCJjb3Ntb3NcIi5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZnJvbUtleShwcml2a2V5LCBwcmVmaXggPSBcImNvc21vc1wiKSB7XG4gICAgICAgIGNvbnN0IHVuY29tcHJlc3NlZCA9IChhd2FpdCBjcnlwdG9fMS5TZWNwMjU2azEubWFrZUtleXBhaXIocHJpdmtleSkpLnB1YmtleTtcbiAgICAgICAgcmV0dXJuIG5ldyBTZWNwMjU2azFXYWxsZXQocHJpdmtleSwgY3J5cHRvXzEuU2VjcDI1NmsxLmNvbXByZXNzUHVia2V5KHVuY29tcHJlc3NlZCksIHByZWZpeCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByaXZrZXksIHB1YmtleSwgcHJlZml4KSB7XG4gICAgICAgIHRoaXMucHJpdmtleSA9IHByaXZrZXk7XG4gICAgICAgIHRoaXMucHVia2V5ID0gcHVia2V5O1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICB9XG4gICAgZ2V0IGFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiAoMCwgZW5jb2RpbmdfMS50b0JlY2gzMikodGhpcy5wcmVmaXgsICgwLCBhZGRyZXNzZXNfMS5yYXdTZWNwMjU2azFQdWJrZXlUb1Jhd0FkZHJlc3MpKHRoaXMucHVia2V5KSk7XG4gICAgfVxuICAgIGFzeW5jIGdldEFjY291bnRzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFsZ286IFwic2VjcDI1NmsxXCIsXG4gICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIHB1YmtleTogdGhpcy5wdWJrZXksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cbiAgICBhc3luYyBzaWduQW1pbm8oc2lnbmVyQWRkcmVzcywgc2lnbkRvYykge1xuICAgICAgICBpZiAoc2lnbmVyQWRkcmVzcyAhPT0gdGhpcy5hZGRyZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFkZHJlc3MgJHtzaWduZXJBZGRyZXNzfSBub3QgZm91bmQgaW4gd2FsbGV0YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBjcnlwdG9fMS5TaGEyNTYoKDAsIHNpZ25kb2NfMS5zZXJpYWxpemVTaWduRG9jKShzaWduRG9jKSkuZGlnZXN0KCk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IGNyeXB0b18xLlNlY3AyNTZrMS5jcmVhdGVTaWduYXR1cmUobWVzc2FnZSwgdGhpcy5wcml2a2V5KTtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlQnl0ZXMgPSBuZXcgVWludDhBcnJheShbLi4uc2lnbmF0dXJlLnIoMzIpLCAuLi5zaWduYXR1cmUucygzMildKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNpZ25lZDogc2lnbkRvYyxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogKDAsIHNpZ25hdHVyZV8xLmVuY29kZVNlY3AyNTZrMVNpZ25hdHVyZSkodGhpcy5wdWJrZXksIHNpZ25hdHVyZUJ5dGVzKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlNlY3AyNTZrMVdhbGxldCA9IFNlY3AyNTZrMVdhbGxldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlY3AyNTZrMXdhbGxldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/secp256k1wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signature.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signature.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeSecp256k1Signature = encodeSecp256k1Signature;\nexports.decodeSignature = decodeSignature;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst encoding_2 = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/encoding.js\");\nconst pubkeys_1 = __webpack_require__(/*! ./pubkeys */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/pubkeys.js\");\n/**\n * Takes a binary pubkey and signature to create a signature object\n *\n * @param pubkey a compressed secp256k1 public key\n * @param signature a 64 byte fixed length representation of secp256k1 signature components r and s\n */\nfunction encodeSecp256k1Signature(pubkey, signature) {\n    if (signature.length !== 64) {\n        throw new Error(\"Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.\");\n    }\n    return {\n        pub_key: (0, encoding_2.encodeSecp256k1Pubkey)(pubkey),\n        signature: (0, encoding_1.toBase64)(signature),\n    };\n}\nfunction decodeSignature(signature) {\n    switch (signature.pub_key.type) {\n        // Note: please don't add cases here without writing additional unit tests\n        case pubkeys_1.pubkeyType.secp256k1:\n            return {\n                pubkey: (0, encoding_1.fromBase64)(signature.pub_key.value),\n                signature: (0, encoding_1.fromBase64)(signature.signature),\n            };\n        default:\n            throw new Error(\"Unsupported pubkey type\");\n    }\n}\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvc2lnbmF0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyx1QkFBdUI7QUFDdkI7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyx5SEFBa0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsZ0hBQVk7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsOEdBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrYW1pbm9AMC4zNC4wL25vZGVfbW9kdWxlcy9AY29zbWpzL2FtaW5vL2J1aWxkL3NpZ25hdHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW5jb2RlU2VjcDI1NmsxU2lnbmF0dXJlID0gZW5jb2RlU2VjcDI1NmsxU2lnbmF0dXJlO1xuZXhwb3J0cy5kZWNvZGVTaWduYXR1cmUgPSBkZWNvZGVTaWduYXR1cmU7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbmNvbnN0IGVuY29kaW5nXzEgPSByZXF1aXJlKFwiQGNvc21qcy9lbmNvZGluZ1wiKTtcbmNvbnN0IGVuY29kaW5nXzIgPSByZXF1aXJlKFwiLi9lbmNvZGluZ1wiKTtcbmNvbnN0IHB1YmtleXNfMSA9IHJlcXVpcmUoXCIuL3B1YmtleXNcIik7XG4vKipcbiAqIFRha2VzIGEgYmluYXJ5IHB1YmtleSBhbmQgc2lnbmF0dXJlIHRvIGNyZWF0ZSBhIHNpZ25hdHVyZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gcHVia2V5IGEgY29tcHJlc3NlZCBzZWNwMjU2azEgcHVibGljIGtleVxuICogQHBhcmFtIHNpZ25hdHVyZSBhIDY0IGJ5dGUgZml4ZWQgbGVuZ3RoIHJlcHJlc2VudGF0aW9uIG9mIHNlY3AyNTZrMSBzaWduYXR1cmUgY29tcG9uZW50cyByIGFuZCBzXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVNlY3AyNTZrMVNpZ25hdHVyZShwdWJrZXksIHNpZ25hdHVyZSkge1xuICAgIGlmIChzaWduYXR1cmUubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbXVzdCBiZSA2NCBieXRlcyBsb25nLiBDb3Ntb3MgU0RLIHVzZXMgYSAyeDMyIGJ5dGUgZml4ZWQgbGVuZ3RoIGVuY29kaW5nIGZvciB0aGUgc2VjcDI1NmsxIHNpZ25hdHVyZSBpbnRlZ2VycyByIGFuZCBzLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHViX2tleTogKDAsIGVuY29kaW5nXzIuZW5jb2RlU2VjcDI1NmsxUHVia2V5KShwdWJrZXkpLFxuICAgICAgICBzaWduYXR1cmU6ICgwLCBlbmNvZGluZ18xLnRvQmFzZTY0KShzaWduYXR1cmUpLFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWNvZGVTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgc3dpdGNoIChzaWduYXR1cmUucHViX2tleS50eXBlKSB7XG4gICAgICAgIC8vIE5vdGU6IHBsZWFzZSBkb24ndCBhZGQgY2FzZXMgaGVyZSB3aXRob3V0IHdyaXRpbmcgYWRkaXRpb25hbCB1bml0IHRlc3RzXG4gICAgICAgIGNhc2UgcHVia2V5c18xLnB1YmtleVR5cGUuc2VjcDI1NmsxOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwdWJrZXk6ICgwLCBlbmNvZGluZ18xLmZyb21CYXNlNjQpKHNpZ25hdHVyZS5wdWJfa2V5LnZhbHVlKSxcbiAgICAgICAgICAgICAgICBzaWduYXR1cmU6ICgwLCBlbmNvZGluZ18xLmZyb21CYXNlNjQpKHNpZ25hdHVyZS5zaWduYXR1cmUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHB1YmtleSB0eXBlXCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signdoc.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signdoc.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sortedJsonStringify = sortedJsonStringify;\nexports.makeSignDoc = makeSignDoc;\nexports.escapeCharacters = escapeCharacters;\nexports.serializeSignDoc = serializeSignDoc;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"(ssr)/./node_modules/.pnpm/@cosmjs+math@0.34.0/node_modules/@cosmjs/math/build/index.js\");\nfunction sortedObject(obj) {\n    if (typeof obj !== \"object\" || obj === null) {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(sortedObject);\n    }\n    const sortedKeys = Object.keys(obj).sort();\n    const result = {};\n    // NOTE: Use forEach instead of reduce for performance with large objects eg Wasm code\n    sortedKeys.forEach((key) => {\n        result[key] = sortedObject(obj[key]);\n    });\n    return result;\n}\n/** Returns a JSON string with objects sorted by key */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction sortedJsonStringify(obj) {\n    return JSON.stringify(sortedObject(obj));\n}\nfunction makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence, timeout_height) {\n    return {\n        chain_id: chainId,\n        account_number: math_1.Uint53.fromString(accountNumber.toString()).toString(),\n        sequence: math_1.Uint53.fromString(sequence.toString()).toString(),\n        fee: fee,\n        msgs: msgs,\n        memo: memo || \"\",\n        ...(timeout_height && { timeout_height: timeout_height.toString() }),\n    };\n}\n/**\n * Takes a valid JSON document and performs the following escapings in string values:\n *\n * `&` -> `\\u0026`\n * `<` -> `\\u003c`\n * `>` -> `\\u003e`\n *\n * Since those characters do not occur in other places of the JSON document, only\n * string values are affected.\n *\n * If the input is invalid JSON, the behaviour is undefined.\n */\nfunction escapeCharacters(input) {\n    // When we migrate to target es2021 or above, we can use replaceAll instead of global patterns.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\n    const amp = /&/g;\n    const lt = /</g;\n    const gt = />/g;\n    return input.replace(amp, \"\\\\u0026\").replace(lt, \"\\\\u003c\").replace(gt, \"\\\\u003e\");\n}\nfunction serializeSignDoc(signDoc) {\n    const serialized = escapeCharacters(sortedJsonStringify(signDoc));\n    return (0, encoding_1.toUtf8)(serialized);\n}\n//# sourceMappingURL=signdoc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvc2lnbmRvYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEI7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyx5SEFBa0I7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLDZHQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMkNBQTJDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvc2lnbmRvYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc29ydGVkSnNvblN0cmluZ2lmeSA9IHNvcnRlZEpzb25TdHJpbmdpZnk7XG5leHBvcnRzLm1ha2VTaWduRG9jID0gbWFrZVNpZ25Eb2M7XG5leHBvcnRzLmVzY2FwZUNoYXJhY3RlcnMgPSBlc2NhcGVDaGFyYWN0ZXJzO1xuZXhwb3J0cy5zZXJpYWxpemVTaWduRG9jID0gc2VyaWFsaXplU2lnbkRvYztcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuY29uc3QgbWF0aF8xID0gcmVxdWlyZShcIkBjb3NtanMvbWF0aFwiKTtcbmZ1bmN0aW9uIHNvcnRlZE9iamVjdChvYmopIHtcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLm1hcChzb3J0ZWRPYmplY3QpO1xuICAgIH1cbiAgICBjb25zdCBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgLy8gTk9URTogVXNlIGZvckVhY2ggaW5zdGVhZCBvZiByZWR1Y2UgZm9yIHBlcmZvcm1hbmNlIHdpdGggbGFyZ2Ugb2JqZWN0cyBlZyBXYXNtIGNvZGVcbiAgICBzb3J0ZWRLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICByZXN1bHRba2V5XSA9IHNvcnRlZE9iamVjdChvYmpba2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKiBSZXR1cm5zIGEgSlNPTiBzdHJpbmcgd2l0aCBvYmplY3RzIHNvcnRlZCBieSBrZXkgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5mdW5jdGlvbiBzb3J0ZWRKc29uU3RyaW5naWZ5KG9iaikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzb3J0ZWRPYmplY3Qob2JqKSk7XG59XG5mdW5jdGlvbiBtYWtlU2lnbkRvYyhtc2dzLCBmZWUsIGNoYWluSWQsIG1lbW8sIGFjY291bnROdW1iZXIsIHNlcXVlbmNlLCB0aW1lb3V0X2hlaWdodCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoYWluX2lkOiBjaGFpbklkLFxuICAgICAgICBhY2NvdW50X251bWJlcjogbWF0aF8xLlVpbnQ1My5mcm9tU3RyaW5nKGFjY291bnROdW1iZXIudG9TdHJpbmcoKSkudG9TdHJpbmcoKSxcbiAgICAgICAgc2VxdWVuY2U6IG1hdGhfMS5VaW50NTMuZnJvbVN0cmluZyhzZXF1ZW5jZS50b1N0cmluZygpKS50b1N0cmluZygpLFxuICAgICAgICBmZWU6IGZlZSxcbiAgICAgICAgbXNnczogbXNncyxcbiAgICAgICAgbWVtbzogbWVtbyB8fCBcIlwiLFxuICAgICAgICAuLi4odGltZW91dF9oZWlnaHQgJiYgeyB0aW1lb3V0X2hlaWdodDogdGltZW91dF9oZWlnaHQudG9TdHJpbmcoKSB9KSxcbiAgICB9O1xufVxuLyoqXG4gKiBUYWtlcyBhIHZhbGlkIEpTT04gZG9jdW1lbnQgYW5kIHBlcmZvcm1zIHRoZSBmb2xsb3dpbmcgZXNjYXBpbmdzIGluIHN0cmluZyB2YWx1ZXM6XG4gKlxuICogYCZgIC0+IGBcXHUwMDI2YFxuICogYDxgIC0+IGBcXHUwMDNjYFxuICogYD5gIC0+IGBcXHUwMDNlYFxuICpcbiAqIFNpbmNlIHRob3NlIGNoYXJhY3RlcnMgZG8gbm90IG9jY3VyIGluIG90aGVyIHBsYWNlcyBvZiB0aGUgSlNPTiBkb2N1bWVudCwgb25seVxuICogc3RyaW5nIHZhbHVlcyBhcmUgYWZmZWN0ZWQuXG4gKlxuICogSWYgdGhlIGlucHV0IGlzIGludmFsaWQgSlNPTiwgdGhlIGJlaGF2aW91ciBpcyB1bmRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUNoYXJhY3RlcnMoaW5wdXQpIHtcbiAgICAvLyBXaGVuIHdlIG1pZ3JhdGUgdG8gdGFyZ2V0IGVzMjAyMSBvciBhYm92ZSwgd2UgY2FuIHVzZSByZXBsYWNlQWxsIGluc3RlYWQgb2YgZ2xvYmFsIHBhdHRlcm5zLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBsYWNlQWxsXG4gICAgY29uc3QgYW1wID0gLyYvZztcbiAgICBjb25zdCBsdCA9IC88L2c7XG4gICAgY29uc3QgZ3QgPSAvPi9nO1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKGFtcCwgXCJcXFxcdTAwMjZcIikucmVwbGFjZShsdCwgXCJcXFxcdTAwM2NcIikucmVwbGFjZShndCwgXCJcXFxcdTAwM2VcIik7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVTaWduRG9jKHNpZ25Eb2MpIHtcbiAgICBjb25zdCBzZXJpYWxpemVkID0gZXNjYXBlQ2hhcmFjdGVycyhzb3J0ZWRKc29uU3RyaW5naWZ5KHNpZ25Eb2MpKTtcbiAgICByZXR1cm4gKDAsIGVuY29kaW5nXzEudG9VdGY4KShzZXJpYWxpemVkKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25kb2MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/signdoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/stdtx.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/stdtx.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isStdTx = isStdTx;\nexports.makeStdTx = makeStdTx;\nfunction isStdTx(txValue) {\n    const { memo, msg, fee, signatures } = txValue;\n    return (typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures));\n}\nfunction makeStdTx(content, signatures) {\n    return {\n        msg: content.msgs,\n        fee: content.fee,\n        memo: content.memo,\n        signatures: Array.isArray(signatures) ? signatures : [signatures],\n    };\n}\n//# sourceMappingURL=stdtx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvc3RkdHguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGlCQUFpQjtBQUNqQjtBQUNBLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrYW1pbm9AMC4zNC4wL25vZGVfbW9kdWxlcy9AY29zbWpzL2FtaW5vL2J1aWxkL3N0ZHR4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1N0ZFR4ID0gaXNTdGRUeDtcbmV4cG9ydHMubWFrZVN0ZFR4ID0gbWFrZVN0ZFR4O1xuZnVuY3Rpb24gaXNTdGRUeCh0eFZhbHVlKSB7XG4gICAgY29uc3QgeyBtZW1vLCBtc2csIGZlZSwgc2lnbmF0dXJlcyB9ID0gdHhWYWx1ZTtcbiAgICByZXR1cm4gKHR5cGVvZiBtZW1vID09PSBcInN0cmluZ1wiICYmIEFycmF5LmlzQXJyYXkobXNnKSAmJiB0eXBlb2YgZmVlID09PSBcIm9iamVjdFwiICYmIEFycmF5LmlzQXJyYXkoc2lnbmF0dXJlcykpO1xufVxuZnVuY3Rpb24gbWFrZVN0ZFR4KGNvbnRlbnQsIHNpZ25hdHVyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtc2c6IGNvbnRlbnQubXNncyxcbiAgICAgICAgZmVlOiBjb250ZW50LmZlZSxcbiAgICAgICAgbWVtbzogY29udGVudC5tZW1vLFxuICAgICAgICBzaWduYXR1cmVzOiBBcnJheS5pc0FycmF5KHNpZ25hdHVyZXMpID8gc2lnbmF0dXJlcyA6IFtzaWduYXR1cmVzXSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RkdHguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/stdtx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/wallet.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/wallet.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.supportedAlgorithms = exports.cosmjsSalt = void 0;\nexports.executeKdf = executeKdf;\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\n/**\n * A fixed salt is chosen to archive a deterministic password to key derivation.\n * This reduces the scope of a potential rainbow attack to all CosmJS users.\n * Must be 16 bytes due to implementation limitations.\n */\nexports.cosmjsSalt = (0, encoding_1.toAscii)(\"The CosmJS salt.\");\nasync function executeKdf(password, configuration) {\n    switch (configuration.algorithm) {\n        case \"argon2id\": {\n            const options = configuration.params;\n            if (!(0, crypto_1.isArgon2idOptions)(options))\n                throw new Error(\"Invalid format of argon2id params\");\n            return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);\n        }\n        default:\n            throw new Error(\"Unsupported KDF algorithm\");\n    }\n}\nexports.supportedAlgorithms = {\n    xchacha20poly1305Ietf: \"xchacha20poly1305-ietf\",\n};\nasync function encrypt(plaintext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);\n            // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api\n            return new Uint8Array([\n                ...nonce,\n                ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce)),\n            ]);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\nasync function decrypt(ciphertext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);\n            return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\n//# sourceMappingURL=wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvd2FsbGV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLGtCQUFrQjtBQUNoRCxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLGVBQWU7QUFDZixpQkFBaUIsbUJBQU8sQ0FBQyxtSEFBZ0I7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMseUhBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGlCQUFpQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsaUJBQWlCO0FBQ25GO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcythbWlub0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvYW1pbm8vYnVpbGQvd2FsbGV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdXBwb3J0ZWRBbGdvcml0aG1zID0gZXhwb3J0cy5jb3NtanNTYWx0ID0gdm9pZCAwO1xuZXhwb3J0cy5leGVjdXRlS2RmID0gZXhlY3V0ZUtkZjtcbmV4cG9ydHMuZW5jcnlwdCA9IGVuY3J5cHQ7XG5leHBvcnRzLmRlY3J5cHQgPSBkZWNyeXB0O1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiQGNvc21qcy9jcnlwdG9cIik7XG5jb25zdCBlbmNvZGluZ18xID0gcmVxdWlyZShcIkBjb3NtanMvZW5jb2RpbmdcIik7XG4vKipcbiAqIEEgZml4ZWQgc2FsdCBpcyBjaG9zZW4gdG8gYXJjaGl2ZSBhIGRldGVybWluaXN0aWMgcGFzc3dvcmQgdG8ga2V5IGRlcml2YXRpb24uXG4gKiBUaGlzIHJlZHVjZXMgdGhlIHNjb3BlIG9mIGEgcG90ZW50aWFsIHJhaW5ib3cgYXR0YWNrIHRvIGFsbCBDb3NtSlMgdXNlcnMuXG4gKiBNdXN0IGJlIDE2IGJ5dGVzIGR1ZSB0byBpbXBsZW1lbnRhdGlvbiBsaW1pdGF0aW9ucy5cbiAqL1xuZXhwb3J0cy5jb3NtanNTYWx0ID0gKDAsIGVuY29kaW5nXzEudG9Bc2NpaSkoXCJUaGUgQ29zbUpTIHNhbHQuXCIpO1xuYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUtkZihwYXNzd29yZCwgY29uZmlndXJhdGlvbikge1xuICAgIHN3aXRjaCAoY29uZmlndXJhdGlvbi5hbGdvcml0aG0pIHtcbiAgICAgICAgY2FzZSBcImFyZ29uMmlkXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWd1cmF0aW9uLnBhcmFtcztcbiAgICAgICAgICAgIGlmICghKDAsIGNyeXB0b18xLmlzQXJnb24yaWRPcHRpb25zKShvcHRpb25zKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZvcm1hdCBvZiBhcmdvbjJpZCBwYXJhbXNcIik7XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXzEuQXJnb24yaWQuZXhlY3V0ZShwYXNzd29yZCwgZXhwb3J0cy5jb3NtanNTYWx0LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgS0RGIGFsZ29yaXRobVwiKTtcbiAgICB9XG59XG5leHBvcnRzLnN1cHBvcnRlZEFsZ29yaXRobXMgPSB7XG4gICAgeGNoYWNoYTIwcG9seTEzMDVJZXRmOiBcInhjaGFjaGEyMHBvbHkxMzA1LWlldGZcIixcbn07XG5hc3luYyBmdW5jdGlvbiBlbmNyeXB0KHBsYWludGV4dCwgZW5jcnlwdGlvbktleSwgY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcuYWxnb3JpdGhtKSB7XG4gICAgICAgIGNhc2UgZXhwb3J0cy5zdXBwb3J0ZWRBbGdvcml0aG1zLnhjaGFjaGEyMHBvbHkxMzA1SWV0Zjoge1xuICAgICAgICAgICAgY29uc3Qgbm9uY2UgPSBjcnlwdG9fMS5SYW5kb20uZ2V0Qnl0ZXMoY3J5cHRvXzEueGNoYWNoYTIwTm9uY2VMZW5ndGgpO1xuICAgICAgICAgICAgLy8gUHJlcGVuZCBmaXhlZC1sZW5ndGggbm9uY2UgdG8gY2lwaGVydGV4dCBhcyBzdWdnZXN0ZWQgaW4gdGhlIGV4YW1wbGUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vamVkaXNjdDEvbGlic29kaXVtLmpzI2FwaVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgICAgICAgICAuLi5ub25jZSxcbiAgICAgICAgICAgICAgICAuLi4oYXdhaXQgY3J5cHRvXzEuWGNoYWNoYTIwcG9seTEzMDVJZXRmLmVuY3J5cHQocGxhaW50ZXh0LCBlbmNyeXB0aW9uS2V5LCBub25jZSkpLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jcnlwdGlvbiBhbGdvcml0aG06ICcke2NvbmZpZy5hbGdvcml0aG19J2ApO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGRlY3J5cHQoY2lwaGVydGV4dCwgZW5jcnlwdGlvbktleSwgY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcuYWxnb3JpdGhtKSB7XG4gICAgICAgIGNhc2UgZXhwb3J0cy5zdXBwb3J0ZWRBbGdvcml0aG1zLnhjaGFjaGEyMHBvbHkxMzA1SWV0Zjoge1xuICAgICAgICAgICAgY29uc3Qgbm9uY2UgPSBjaXBoZXJ0ZXh0LnNsaWNlKDAsIGNyeXB0b18xLnhjaGFjaGEyME5vbmNlTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9fMS5YY2hhY2hhMjBwb2x5MTMwNUlldGYuZGVjcnlwdChjaXBoZXJ0ZXh0LnNsaWNlKGNyeXB0b18xLnhjaGFjaGEyME5vbmNlTGVuZ3RoKSwgZW5jcnlwdGlvbktleSwgbm9uY2UpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGVuY3J5cHRpb24gYWxnb3JpdGhtOiAnJHtjb25maWcuYWxnb3JpdGhtfSdgKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YWxsZXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/wallet.js\n");

/***/ })

};
;