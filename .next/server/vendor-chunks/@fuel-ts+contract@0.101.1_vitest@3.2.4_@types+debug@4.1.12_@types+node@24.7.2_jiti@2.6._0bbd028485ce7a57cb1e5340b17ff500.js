"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuel-ts+contract@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6._0bbd028485ce7a57cb1e5340b17ff500";
exports.ids = ["vendor-chunks/@fuel-ts+contract@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6._0bbd028485ce7a57cb1e5340b17ff500"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@fuel-ts+contract@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6._0bbd028485ce7a57cb1e5340b17ff500/node_modules/@fuel-ts/contract/dist/index.mjs":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuel-ts+contract@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6._0bbd028485ce7a57cb1e5340b17ff500/node_modules/@fuel-ts/contract/dist/index.mjs ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory),\n/* harmony export */   getContractId: () => (/* binding */ getContractId),\n/* harmony export */   getContractRoot: () => (/* binding */ getContractRoot),\n/* harmony export */   getContractStorageRoot: () => (/* binding */ getContractStorageRoot),\n/* harmony export */   hexlifyWithPrefix: () => (/* binding */ hexlifyWithPrefix)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d/node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/account */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+crypto@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__2af6281b4693138068177942c72da7d9/node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+errors@0.101.1/node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+hasher@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__3de5373ec566d2f8672f34c376d1b1fa/node_modules/@fuel-ts/hasher/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+math@0.101.1/node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fuel-ts/program */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+program@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_6e753f1b81b88d2c391508fb79ab08d1/node_modules/@fuel-ts/program/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fuels/vm-asm */ \"(ssr)/./node_modules/.pnpm/@fuels+vm-asm@0.60.2/node_modules/@fuels/vm-asm/dist/node/index.cjs\");\n/* harmony import */ var _fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @fuel-ts/merkle */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+merkle@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__de9684f3895abff2485b47f5d673b5af/node_modules/@fuel-ts/merkle/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/contract-factory.ts\n\n\n\n\n\n\n\n\n\n// src/loader/loader-script.ts\n\n\n\n\nvar getLoaderInstructions = /* @__PURE__ */ __name((blobIds) => {\n  const { RegId, Instruction } = /*#__PURE__*/ (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8___namespace_cache || (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8___namespace_cache = __webpack_require__.t(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__, 2)));\n  const numberOfInstructions = 12;\n  const numberOfBlobs = blobIds.length;\n  const blobIdSize = _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BYTES_32;\n  const blobIdBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)(blobIds.map((b) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(b)));\n  const instructionBytes = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.InstructionSet(\n    // 1. load the blob contents into memory\n    // find the start of the hardcoded blob ids, which are located after the code ends\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.move_(16, RegId.pc().to_u8()),\n    // 0x10 to hold the address of the current blob id\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.addi(16, 16, numberOfInstructions * Instruction.size()),\n    // The contract is going to be loaded from the current value of SP onwards, save\n    // the location into 0x16 so we can jump into it later on\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.move_(22, RegId.sp().to_u8()),\n    // loop counter\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.movi(19, numberOfBlobs),\n    // LOOP starts here\n    // 0x11 to hold the size of the current blob\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.bsiz(17, 16),\n    // push the blob contents onto the stack\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.ldc(16, 0, 17, 1),\n    // move on to the next blob\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.addi(16, 16, blobIdSize),\n    // decrement the loop counter\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.subi(19, 19, 1),\n    // Jump backwards (3+1) instructions if the counter has not reached 0\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.jnzb(19, RegId.zero().to_u8(), 3),\n    // Jump into the memory where the contract is loaded\n    // what follows is called _jmp_mem by the sway compiler\n    // subtract the address contained in IS because jmp will add it back\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.sub(22, 22, RegId.is().to_u8()),\n    // jmp will multiply by 4 so we need to divide to cancel that out\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.divi(22, 22, 4),\n    // jump to the start of the contract we loaded\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.jmp(22)\n  ).toBytes();\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)([instructionBytes, blobIdBytes]);\n}, \"getLoaderInstructions\");\n\n// src/loader/utils.ts\n\n\nvar getContractChunks = /* @__PURE__ */ __name((bytecode, chunkSize) => {\n  const chunks = [];\n  for (let offset = 0, index = 0; offset < bytecode.length; offset += chunkSize, index++) {\n    let chunk = bytecode.slice(offset, offset + chunkSize);\n    let length = chunk.length;\n    if (length % _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE !== 0) {\n      chunk = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)([chunk, new Uint8Array(chunkSize - chunk.length)]);\n      length = chunk.length;\n    }\n    chunks.push({ id: index, size: length, bytecode: chunk });\n  }\n  return chunks;\n}, \"getContractChunks\");\n\n// src/util.ts\n\n\n\nvar getContractRoot = /* @__PURE__ */ __name((bytecode) => {\n  const chunkSize = 16 * 1024;\n  const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(bytecode);\n  const chunks = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.chunkAndPadBytes)(bytes, chunkSize);\n  return (0,_fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_9__.calcRoot)(chunks.map((c) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.hexlify)(c)));\n}, \"getContractRoot\");\nvar getContractStorageRoot = /* @__PURE__ */ __name((storageSlots) => {\n  const tree = new _fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_9__.SparseMerkleTree();\n  storageSlots.forEach(({ key, value }) => tree.update((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.sha256)(key), value));\n  return tree.root;\n}, \"getContractStorageRoot\");\nvar getContractId = /* @__PURE__ */ __name((bytecode, salt, stateRoot) => {\n  const root = getContractRoot((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(bytecode));\n  const contractId = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)([\"0x4655454C\", salt, root, stateRoot]));\n  return contractId;\n}, \"getContractId\");\nvar hexlifyWithPrefix = /* @__PURE__ */ __name((value) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.hexlify)(value.startsWith(\"0x\") ? value : `0x${value}`), \"hexlifyWithPrefix\");\n\n// src/contract-factory.ts\nvar CHUNK_SIZE_MULTIPLIER = 0.95;\nvar ContractFactory = class _ContractFactory {\n  static {\n    __name(this, \"ContractFactory\");\n  }\n  bytecode;\n  interface;\n  provider;\n  account;\n  storageSlots;\n  /**\n   * Create a ContractFactory instance.\n   *\n   * @param bytecode - The bytecode of the contract.\n   * @param abi - The contract's ABI (Application Binary Interface).\n   * @param accountOrProvider - An account or provider to be associated with the factory.\n   */\n  constructor(bytecode, abi, accountOrProvider = null, storageSlots = []) {\n    this.bytecode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(bytecode);\n    if (abi instanceof _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(abi);\n    }\n    if (accountOrProvider && \"provider\" in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n    this.storageSlots = storageSlots;\n  }\n  /**\n   * Connect the factory to a provider.\n   *\n   * @param provider - The provider to be associated with the factory.\n   * @returns A new ContractFactory instance.\n   */\n  connect(provider) {\n    return new _ContractFactory(this.bytecode, this.interface, provider);\n  }\n  /**\n   * Create a transaction request to deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns The CreateTransactionRequest object for deploying the contract.\n   */\n  createTransactionRequest(deployOptions) {\n    const storageSlots = (deployOptions?.storageSlots ?? []).concat(this.storageSlots).map(({ key, value }) => ({\n      key: hexlifyWithPrefix(key),\n      value: hexlifyWithPrefix(value)\n    })).filter((el, index, self) => self.findIndex((s) => s.key === el.key) === index).sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));\n    const options = {\n      salt: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32),\n      ...deployOptions ?? {},\n      storageSlots\n    };\n    if (!this.provider) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_PROVIDER,\n        \"Cannot create transaction request without provider\"\n      );\n    }\n    const bytecode = deployOptions?.bytecode || this.bytecode;\n    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    const contractId = getContractId(bytecode, options.salt, stateRoot);\n    const transactionRequest = new _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.CreateTransactionRequest({\n      bytecodeWitnessIndex: 0,\n      witnesses: [bytecode],\n      ...options\n    });\n    transactionRequest.addContractCreatedOutput(contractId, stateRoot);\n    return {\n      contractId,\n      transactionRequest\n    };\n  }\n  /**\n   * Takes a transaction request, estimates it and funds it.\n   *\n   * @param request - the request to fund.\n   * @param options - options for funding the request.\n   * @returns a funded transaction request.\n   */\n  async fundTransactionRequest(request, options = {}) {\n    const account = this.getAccount();\n    const { maxFee: setMaxFee } = options;\n    const txCost = await account.getTransactionCost(request);\n    if ((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.isDefined)(setMaxFee)) {\n      if (txCost.maxFee.gt(setMaxFee)) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_FEE_TOO_LOW,\n          `Max fee '${options.maxFee}' is lower than the required: '${txCost.maxFee}'.`\n        );\n      }\n    } else {\n      request.maxFee = txCost.maxFee;\n    }\n    await account.fund(request, txCost);\n    return request;\n  }\n  async assembleTx(request, options = {}) {\n    const account = this.getAccount();\n    const { maxFee: setMaxFee } = options;\n    request.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__.bn)(0);\n    const { gasPrice, assembledRequest } = await account.provider.assembleTx({\n      request,\n      feePayerAccount: account,\n      accountCoinQuantities: []\n    });\n    request = await (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.setAndValidateGasAndFeeForAssembledTx)({\n      gasPrice,\n      provider: account.provider,\n      transactionRequest: assembledRequest,\n      setMaxFee\n    });\n    return request;\n  }\n  /**\n   * Deploy a contract of any length with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deploy(deployOptions = {}) {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    return this.bytecode.length > maxContractSize ? this.deployAsBlobTx(deployOptions) : this.deployAsCreateTx(deployOptions);\n  }\n  /**\n   * Deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsCreateTx(deployOptions = {}) {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    if (this.bytecode.length > maxContractSize) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONTRACT_SIZE_EXCEEDS_LIMIT,\n        \"Contract bytecode is too large. Please use `deployAsBlobTx` instead.\"\n      );\n    }\n    const { contractId, transactionRequest } = await this.prepareDeploy(deployOptions);\n    const transactionResponse = await account.sendTransaction(transactionRequest);\n    const waitForResult = /* @__PURE__ */ __name(async () => {\n      const transactionResult = await transactionResponse.waitForResult();\n      const contract = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    }, \"waitForResult\");\n    const waitForPreConfirmation = /* @__PURE__ */ __name(async () => {\n      const transactionResult = await transactionResponse.waitForPreConfirmation();\n      const contract = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    }, \"waitForPreConfirmation\");\n    return {\n      contractId,\n      waitForResult,\n      waitForPreConfirmation,\n      waitForTransactionId: /* @__PURE__ */ __name(() => Promise.resolve(transactionResponse.id), \"waitForTransactionId\")\n    };\n  }\n  /**\n   * Chunks and deploys a contract via a loader contract. Suitable for deploying contracts larger than the max contract size.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsBlobTx(deployOptions = {\n    chunkSizeMultiplier: CHUNK_SIZE_MULTIPLIER\n  }) {\n    const account = this.getAccount();\n    const { configurableConstants, chunkSizeMultiplier } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n    const chunkSize = await this.getMaxChunkSize(deployOptions, chunkSizeMultiplier);\n    const chunks = getContractChunks((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(this.bytecode), chunkSize).map((c) => {\n      const transactionRequest = this.blobTransactionRequest({\n        ...deployOptions,\n        bytecode: c.bytecode\n      });\n      return {\n        ...c,\n        transactionRequest,\n        blobId: transactionRequest.blobId\n      };\n    });\n    const blobIds = chunks.map(({ blobId }) => blobId);\n    const loaderBytecode = getLoaderInstructions(blobIds);\n    const { contractId, transactionRequest: createRequest } = this.createTransactionRequest({\n      bytecode: loaderBytecode,\n      ...deployOptions\n    });\n    const uniqueBlobIds = [...new Set(blobIds)];\n    const uploadedBlobIds = await account.provider.getBlobs(uniqueBlobIds);\n    const blobIdsToUpload = uniqueBlobIds.filter((id) => !uploadedBlobIds.includes(id));\n    let totalCost = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__.bn)(0);\n    const chainInfo = await account.provider.getChain();\n    const gasPrice = await account.provider.estimateGasPrice(10);\n    const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n    for (const { transactionRequest, blobId } of chunks) {\n      if (blobIdsToUpload.includes(blobId)) {\n        const minGas = transactionRequest.calculateMinGas(chainInfo);\n        const minFee = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.calculateGasFee)({\n          gasPrice,\n          gas: minGas,\n          priceFactor,\n          tip: transactionRequest.tip\n        }).add(1);\n        totalCost = totalCost.add(minFee);\n      }\n      const createMinGas = createRequest.calculateMinGas(chainInfo);\n      const createMinFee = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.calculateGasFee)({\n        gasPrice,\n        gas: createMinGas,\n        priceFactor,\n        tip: createRequest.tip\n      }).add(1);\n      totalCost = totalCost.add(createMinFee);\n    }\n    if (totalCost.gt(await account.getBalance())) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.FUNDS_TOO_LOW, \"Insufficient balance to deploy contract.\");\n    }\n    let txIdResolver;\n    const txIdPromise = new Promise((resolve) => {\n      txIdResolver = resolve;\n    });\n    const waitForResult = /* @__PURE__ */ __name(async () => {\n      const uploadedBlobs = [];\n      for (const { blobId, transactionRequest } of chunks) {\n        if (!uploadedBlobs.includes(blobId) && blobIdsToUpload.includes(blobId)) {\n          const fundedBlobRequest = await this.assembleTx(transactionRequest, deployOptions);\n          let result;\n          try {\n            const blobTx = await account.sendTransaction(fundedBlobRequest);\n            result = await blobTx.waitForResult();\n          } catch (err) {\n            if (err.message.indexOf(`BlobId is already taken ${blobId}`) > -1) {\n              uploadedBlobs.push(blobId);\n              continue;\n            }\n            throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_FAILED, \"Failed to deploy contract chunk\");\n          }\n          if (!result.status || result.status !== _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.TransactionStatus.success) {\n            throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_FAILED, \"Failed to deploy contract chunk\");\n          }\n          uploadedBlobs.push(blobId);\n        }\n      }\n      await this.assembleTx(createRequest, deployOptions);\n      txIdResolver(createRequest.getTransactionId(await account.provider.getChainId()));\n      const transactionResponse = await account.sendTransaction(createRequest);\n      const transactionResult = await transactionResponse.waitForResult();\n      const contract = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    }, \"waitForResult\");\n    const waitForTransactionId = /* @__PURE__ */ __name(() => txIdPromise, \"waitForTransactionId\");\n    return { waitForResult, contractId, waitForTransactionId };\n  }\n  /**\n   * Set configurable constants of the contract with the specified values.\n   *\n   * @param configurableConstants - An object containing configurable names and their values.\n   */\n  setConfigurableConstants(configurableConstants) {\n    try {\n      const hasConfigurable = Object.keys(this.interface.configurables).length;\n      if (!hasConfigurable) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n          \"Contract does not have configurables to be set\"\n        );\n      }\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `Contract does not have a configurable named: '${key}'`\n          );\n        }\n        const { offset } = this.interface.configurables[key];\n        const encoded = this.interface.encodeConfigurable(key, value);\n        const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(this.bytecode);\n        bytes.set(encoded, offset);\n        this.bytecode = bytes;\n      });\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants on contract: ${err.message}.`\n      );\n    }\n  }\n  getAccount() {\n    if (!this.account) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ACCOUNT_REQUIRED, \"Account not assigned to contract.\");\n    }\n    return this.account;\n  }\n  async prepareDeploy(deployOptions) {\n    const { configurableConstants } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n    const { contractId, transactionRequest } = this.createTransactionRequest(deployOptions);\n    await this.assembleTx(transactionRequest, deployOptions);\n    return {\n      contractId,\n      transactionRequest\n    };\n  }\n  /**\n   * Create a blob transaction request, used for deploying contract chunks.\n   *\n   * @param options - options for creating a blob transaction request.\n   * @returns a populated BlobTransactionRequest.\n   */\n  blobTransactionRequest(options) {\n    const { bytecode } = options;\n    return new _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.BlobTransactionRequest({\n      blobId: (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.hash)(bytecode),\n      witnessIndex: 0,\n      witnesses: [bytecode],\n      ...options\n    });\n  }\n  /**\n   * Get the maximum chunk size for deploying a contract by chunks.\n   */\n  async getMaxChunkSize(deployOptions, chunkSizeMultiplier = CHUNK_SIZE_MULTIPLIER) {\n    if (chunkSizeMultiplier < 0 || chunkSizeMultiplier > 1) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CHUNK_SIZE_MULTIPLIER,\n        \"Chunk size multiplier must be between 0 and 1\"\n      );\n    }\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const contractSizeLimit = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    const transactionSizeLimit = consensusParameters.txParameters.maxSize.toNumber();\n    const maxLimit = 64e3;\n    const chainLimit = transactionSizeLimit < contractSizeLimit ? transactionSizeLimit : contractSizeLimit;\n    const sizeLimit = chainLimit < maxLimit ? chainLimit : maxLimit;\n    const blobTx = this.blobTransactionRequest({\n      ...deployOptions,\n      bytecode: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32)\n    }).addResources(\n      account.generateFakeResources([\n        { assetId: await account.provider.getBaseAssetId(), amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__.bn)(1) }\n      ])\n    );\n    const maxChunkSize = (sizeLimit - blobTx.byteLength() - _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE) * chunkSizeMultiplier;\n    return Math.round(maxChunkSize / _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE) * _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE;\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuel-ts+contract@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6._0bbd028485ce7a57cb1e5340b17ff500/node_modules/@fuel-ts/contract/dist/index.mjs\n");

/***/ })

};
;