"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51";
exports.ids = ["vendor-chunks/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/configs.mjs":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/configs.mjs ***!
  \****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEVNET_NETWORK_URL: () => (/* binding */ DEVNET_NETWORK_URL),\n/* harmony export */   TESTNET_NETWORK_URL: () => (/* binding */ TESTNET_NETWORK_URL)\n/* harmony export */ });\n// src/configs.ts\nvar DEVNET_NETWORK_URL = \"https://devnet.fuel.network/v1/graphql\";\nvar TESTNET_NETWORK_URL = \"https://testnet.fuel.network/v1/graphql\";\n\n//# sourceMappingURL=configs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGZ1ZWwtdHMrYWNjb3VudEAwLjEwMS4xX3ZpdGVzdEAzLjIuNF9AdHlwZXMrZGVidWdANC4xLjEyX0B0eXBlcytub2RlQDI0LjcuMl9qaXRpQDIuNi4xX2YyMDRkYWExYjViZDBkOGY4MGFiMzk4ZGI3OWE4ZjUxL25vZGVfbW9kdWxlcy9AZnVlbC10cy9hY2NvdW50L2Rpc3QvY29uZmlncy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMveW91c3VrZS9NeVByb2plY3QvbXktbmV4dXMtYXBwL25vZGVfbW9kdWxlcy8ucG5wbS9AZnVlbC10cythY2NvdW50QDAuMTAxLjFfdml0ZXN0QDMuMi40X0B0eXBlcytkZWJ1Z0A0LjEuMTJfQHR5cGVzK25vZGVAMjQuNy4yX2ppdGlAMi42LjFfZjIwNGRhYTFiNWJkMGQ4ZjgwYWIzOThkYjc5YThmNTEvbm9kZV9tb2R1bGVzL0BmdWVsLXRzL2FjY291bnQvZGlzdC9jb25maWdzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29uZmlncy50c1xudmFyIERFVk5FVF9ORVRXT1JLX1VSTCA9IFwiaHR0cHM6Ly9kZXZuZXQuZnVlbC5uZXR3b3JrL3YxL2dyYXBocWxcIjtcbnZhciBURVNUTkVUX05FVFdPUktfVVJMID0gXCJodHRwczovL3Rlc3RuZXQuZnVlbC5uZXR3b3JrL3YxL2dyYXBocWxcIjtcbmV4cG9ydCB7XG4gIERFVk5FVF9ORVRXT1JLX1VSTCxcbiAgVEVTVE5FVF9ORVRXT1JLX1VSTFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZ3MubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/configs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/index.mjs":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/index.mjs ***!
  \**************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractAccount: () => (/* binding */ AbstractAccount),\n/* harmony export */   AbstractScriptRequest: () => (/* binding */ AbstractScriptRequest),\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AddressType: () => (/* binding */ AddressType),\n/* harmony export */   BALANCES_PAGE_SIZE_LIMIT: () => (/* binding */ BALANCES_PAGE_SIZE_LIMIT),\n/* harmony export */   BLOCKS_PAGE_SIZE_LIMIT: () => (/* binding */ BLOCKS_PAGE_SIZE_LIMIT),\n/* harmony export */   BaseTransactionRequest: () => (/* binding */ BaseTransactionRequest),\n/* harmony export */   BaseWalletUnlocked: () => (/* binding */ BaseWalletUnlocked),\n/* harmony export */   BlobTransactionRequest: () => (/* binding */ BlobTransactionRequest),\n/* harmony export */   CHAIN_IDS: () => (/* binding */ CHAIN_IDS),\n/* harmony export */   ChainName: () => (/* binding */ ChainName),\n/* harmony export */   ChangeOutputCollisionError: () => (/* binding */ ChangeOutputCollisionError),\n/* harmony export */   CreateTransactionRequest: () => (/* binding */ CreateTransactionRequest),\n/* harmony export */   DEFAULT_RESOURCE_CACHE_TTL: () => (/* binding */ DEFAULT_RESOURCE_CACHE_TTL),\n/* harmony export */   Fuel: () => (/* binding */ Fuel),\n/* harmony export */   FuelConnector: () => (/* binding */ FuelConnector),\n/* harmony export */   FuelConnectorEventType: () => (/* binding */ FuelConnectorEventType),\n/* harmony export */   FuelConnectorEventTypes: () => (/* binding */ FuelConnectorEventTypes),\n/* harmony export */   FuelConnectorMethods: () => (/* binding */ FuelConnectorMethods),\n/* harmony export */   GAS_USED_MODIFIER: () => (/* binding */ GAS_USED_MODIFIER),\n/* harmony export */   HDWallet: () => (/* binding */ hdwallet_default),\n/* harmony export */   Language: () => (/* binding */ Language),\n/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage),\n/* harmony export */   MNEMONIC_SIZES: () => (/* binding */ MNEMONIC_SIZES),\n/* harmony export */   MemoryStorage: () => (/* binding */ MemoryStorage),\n/* harmony export */   Mnemonic: () => (/* binding */ mnemonic_default),\n/* harmony export */   MnemonicVault: () => (/* binding */ MnemonicVault),\n/* harmony export */   NON_PAGINATED_BALANCES_SIZE: () => (/* binding */ NON_PAGINATED_BALANCES_SIZE),\n/* harmony export */   NoWitnessAtIndexError: () => (/* binding */ NoWitnessAtIndexError),\n/* harmony export */   NoWitnessByOwnerError: () => (/* binding */ NoWitnessByOwnerError),\n/* harmony export */   OperationName: () => (/* binding */ OperationName),\n/* harmony export */   Predicate: () => (/* binding */ Predicate),\n/* harmony export */   PrivateKeyVault: () => (/* binding */ PrivateKeyVault),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   RESOURCES_PAGE_SIZE_LIMIT: () => (/* binding */ RESOURCES_PAGE_SIZE_LIMIT),\n/* harmony export */   ScriptTransactionRequest: () => (/* binding */ ScriptTransactionRequest),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   StorageAbstract: () => (/* binding */ StorageAbstract),\n/* harmony export */   TRANSACTIONS_PAGE_SIZE_LIMIT: () => (/* binding */ TRANSACTIONS_PAGE_SIZE_LIMIT),\n/* harmony export */   TransactionResponse: () => (/* binding */ TransactionResponse),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType),\n/* harmony export */   TransactionTypeName: () => (/* binding */ TransactionTypeName),\n/* harmony export */   UpgradeTransactionRequest: () => (/* binding */ UpgradeTransactionRequest),\n/* harmony export */   UploadTransactionRequest: () => (/* binding */ UploadTransactionRequest),\n/* harmony export */   Vault: () => (/* binding */ Vault),\n/* harmony export */   Wallet: () => (/* binding */ Wallet),\n/* harmony export */   WalletLocked: () => (/* binding */ WalletLocked),\n/* harmony export */   WalletManager: () => (/* binding */ WalletManager),\n/* harmony export */   WalletUnlocked: () => (/* binding */ WalletUnlocked),\n/* harmony export */   addAmountToCoinQuantities: () => (/* binding */ addAmountToCoinQuantities),\n/* harmony export */   addOperation: () => (/* binding */ addOperation),\n/* harmony export */   aggregateInputsAmountsByAssetAndOwner: () => (/* binding */ aggregateInputsAmountsByAssetAndOwner),\n/* harmony export */   assemblePanicError: () => (/* binding */ assemblePanicError),\n/* harmony export */   assemblePreConfirmationTransactionSummary: () => (/* binding */ assemblePreConfirmationTransactionSummary),\n/* harmony export */   assembleReceiptByType: () => (/* binding */ assembleReceiptByType),\n/* harmony export */   assembleRevertError: () => (/* binding */ assembleRevertError),\n/* harmony export */   assembleTransactionSummary: () => (/* binding */ assembleTransactionSummary),\n/* harmony export */   assembleTransactionSummaryFromJson: () => (/* binding */ assembleTransactionSummaryFromJson),\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   buildBlockExplorerUrl: () => (/* binding */ buildBlockExplorerUrl),\n/* harmony export */   cacheFor: () => (/* binding */ cacheFor),\n/* harmony export */   cacheRequestInputsResources: () => (/* binding */ cacheRequestInputsResources),\n/* harmony export */   cacheRequestInputsResourcesFromOwner: () => (/* binding */ cacheRequestInputsResourcesFromOwner),\n/* harmony export */   calculateGasFee: () => (/* binding */ calculateGasFee),\n/* harmony export */   calculateMetadataGasForTxBlob: () => (/* binding */ calculateMetadataGasForTxBlob),\n/* harmony export */   calculateMetadataGasForTxCreate: () => (/* binding */ calculateMetadataGasForTxCreate),\n/* harmony export */   calculateMetadataGasForTxScript: () => (/* binding */ calculateMetadataGasForTxScript),\n/* harmony export */   calculateMetadataGasForTxUpgrade: () => (/* binding */ calculateMetadataGasForTxUpgrade),\n/* harmony export */   calculateMetadataGasForTxUpload: () => (/* binding */ calculateMetadataGasForTxUpload),\n/* harmony export */   calculateMinGasForTxUpload: () => (/* binding */ calculateMinGasForTxUpload),\n/* harmony export */   calculateTXFeeForSummary: () => (/* binding */ calculateTXFeeForSummary),\n/* harmony export */   coinQuantityfy: () => (/* binding */ coinQuantityfy),\n/* harmony export */   deferPromise: () => (/* binding */ deferPromise),\n/* harmony export */   deployScriptOrPredicate: () => (/* binding */ deployScriptOrPredicate),\n/* harmony export */   deserializeChain: () => (/* binding */ deserializeChain),\n/* harmony export */   deserializeInput: () => (/* binding */ deserializeInput),\n/* harmony export */   deserializeNodeInfo: () => (/* binding */ deserializeNodeInfo),\n/* harmony export */   deserializeOutput: () => (/* binding */ deserializeOutput),\n/* harmony export */   deserializeProcessedTxOutput: () => (/* binding */ deserializeProcessedTxOutput),\n/* harmony export */   deserializeProviderCache: () => (/* binding */ deserializeProviderCache),\n/* harmony export */   deserializeReceipt: () => (/* binding */ deserializeReceipt),\n/* harmony export */   deserializeTransactionResponseJson: () => (/* binding */ deserializeTransactionResponseJson),\n/* harmony export */   dispatchFuelConnectorEvent: () => (/* binding */ dispatchFuelConnectorEvent),\n/* harmony export */   english: () => (/* binding */ english),\n/* harmony export */   extractBurnedAssetsFromReceipts: () => (/* binding */ extractBurnedAssetsFromReceipts),\n/* harmony export */   extractMintedAssetsFromReceipts: () => (/* binding */ extractMintedAssetsFromReceipts),\n/* harmony export */   extractResolvedOutputs: () => (/* binding */ extractResolvedOutputs),\n/* harmony export */   extractTxError: () => (/* binding */ extractTxError),\n/* harmony export */   fuelAssetsBaseUrl: () => (/* binding */ fuelAssetsBaseUrl),\n/* harmony export */   gasUsedByInputs: () => (/* binding */ gasUsedByInputs),\n/* harmony export */   getAllDecodedLogs: () => (/* binding */ getAllDecodedLogs),\n/* harmony export */   getAssetAmountInRequestInputs: () => (/* binding */ getAssetAmountInRequestInputs),\n/* harmony export */   getAssetById: () => (/* binding */ getAssetById),\n/* harmony export */   getAssetEth: () => (/* binding */ getAssetEth),\n/* harmony export */   getAssetFuel: () => (/* binding */ getAssetFuel),\n/* harmony export */   getAssetNetwork: () => (/* binding */ getAssetNetwork),\n/* harmony export */   getAssetWithNetwork: () => (/* binding */ getAssetWithNetwork),\n/* harmony export */   getAssetsByOwner: () => (/* binding */ getAssetsByOwner),\n/* harmony export */   getBurnableAssetCount: () => (/* binding */ getBurnableAssetCount),\n/* harmony export */   getBytecodeConfigurableOffset: () => (/* binding */ getBytecodeConfigurableOffset),\n/* harmony export */   getBytecodeDataOffset: () => (/* binding */ getBytecodeDataOffset),\n/* harmony export */   getBytecodeId: () => (/* binding */ getBytecodeId),\n/* harmony export */   getContractCallOperations: () => (/* binding */ getContractCallOperations),\n/* harmony export */   getContractCreatedOperations: () => (/* binding */ getContractCreatedOperations),\n/* harmony export */   getDecodedLogs: () => (/* binding */ getDecodedLogs),\n/* harmony export */   getDefaultChainId: () => (/* binding */ getDefaultChainId),\n/* harmony export */   getGasUsedFromReceipts: () => (/* binding */ getGasUsedFromReceipts),\n/* harmony export */   getInputAccountAddress: () => (/* binding */ getInputAccountAddress),\n/* harmony export */   getInputContractFromIndex: () => (/* binding */ getInputContractFromIndex),\n/* harmony export */   getInputFromAssetId: () => (/* binding */ getInputFromAssetId),\n/* harmony export */   getInputsByType: () => (/* binding */ getInputsByType),\n/* harmony export */   getInputsByTypes: () => (/* binding */ getInputsByTypes),\n/* harmony export */   getInputsCoin: () => (/* binding */ getInputsCoin),\n/* harmony export */   getInputsCoinAndMessage: () => (/* binding */ getInputsCoinAndMessage),\n/* harmony export */   getInputsContract: () => (/* binding */ getInputsContract),\n/* harmony export */   getInputsMessage: () => (/* binding */ getInputsMessage),\n/* harmony export */   getLegacyBlobId: () => (/* binding */ getLegacyBlobId),\n/* harmony export */   getMaxGas: () => (/* binding */ getMaxGas),\n/* harmony export */   getMinGas: () => (/* binding */ getMinGas),\n/* harmony export */   getOperations: () => (/* binding */ getOperations),\n/* harmony export */   getOutputsByType: () => (/* binding */ getOutputsByType),\n/* harmony export */   getOutputsChange: () => (/* binding */ getOutputsChange),\n/* harmony export */   getOutputsCoin: () => (/* binding */ getOutputsCoin),\n/* harmony export */   getOutputsContract: () => (/* binding */ getOutputsContract),\n/* harmony export */   getOutputsContractCreated: () => (/* binding */ getOutputsContractCreated),\n/* harmony export */   getOutputsVariable: () => (/* binding */ getOutputsVariable),\n/* harmony export */   getPayProducerOperations: () => (/* binding */ getPayProducerOperations),\n/* harmony export */   getPredicateRoot: () => (/* binding */ getPredicateRoot),\n/* harmony export */   getReceiptsByType: () => (/* binding */ getReceiptsByType),\n/* harmony export */   getReceiptsCall: () => (/* binding */ getReceiptsCall),\n/* harmony export */   getReceiptsMessageOut: () => (/* binding */ getReceiptsMessageOut),\n/* harmony export */   getReceiptsTransferOut: () => (/* binding */ getReceiptsTransferOut),\n/* harmony export */   getReceiptsWithMissingData: () => (/* binding */ getReceiptsWithMissingData),\n/* harmony export */   getRequestInputResourceOwner: () => (/* binding */ getRequestInputResourceOwner),\n/* harmony export */   getTotalFeeFromStatus: () => (/* binding */ getTotalFeeFromStatus),\n/* harmony export */   getTransactionStatusName: () => (/* binding */ getTransactionStatusName),\n/* harmony export */   getTransactionSummary: () => (/* binding */ getTransactionSummary),\n/* harmony export */   getTransactionSummaryFromRequest: () => (/* binding */ getTransactionSummaryFromRequest),\n/* harmony export */   getTransactionTypeName: () => (/* binding */ getTransactionTypeName),\n/* harmony export */   getTransactionsSummaries: () => (/* binding */ getTransactionsSummaries),\n/* harmony export */   getTransferOperations: () => (/* binding */ getTransferOperations),\n/* harmony export */   getWithdrawFromFuelOperations: () => (/* binding */ getWithdrawFromFuelOperations),\n/* harmony export */   hasSameAssetId: () => (/* binding */ hasSameAssetId),\n/* harmony export */   inputify: () => (/* binding */ inputify),\n/* harmony export */   isCoin: () => (/* binding */ isCoin),\n/* harmony export */   isInputCoin: () => (/* binding */ isInputCoin),\n/* harmony export */   isMessage: () => (/* binding */ isMessage),\n/* harmony export */   isMessageCoin: () => (/* binding */ isMessageCoin),\n/* harmony export */   isPredicate: () => (/* binding */ isPredicate),\n/* harmony export */   isRawCoin: () => (/* binding */ isRawCoin),\n/* harmony export */   isRawMessage: () => (/* binding */ isRawMessage),\n/* harmony export */   isRequestInputCoin: () => (/* binding */ isRequestInputCoin),\n/* harmony export */   isRequestInputCoinOrMessage: () => (/* binding */ isRequestInputCoinOrMessage),\n/* harmony export */   isRequestInputMessage: () => (/* binding */ isRequestInputMessage),\n/* harmony export */   isRequestInputMessageWithoutData: () => (/* binding */ isRequestInputMessageWithoutData),\n/* harmony export */   isRequestInputResource: () => (/* binding */ isRequestInputResource),\n/* harmony export */   isRequestInputResourceFromOwner: () => (/* binding */ isRequestInputResourceFromOwner),\n/* harmony export */   isTransactionTypeBlob: () => (/* binding */ isTransactionTypeBlob),\n/* harmony export */   isTransactionTypeCreate: () => (/* binding */ isTransactionTypeCreate),\n/* harmony export */   isTransactionTypeScript: () => (/* binding */ isTransactionTypeScript),\n/* harmony export */   isTransactionTypeUpgrade: () => (/* binding */ isTransactionTypeUpgrade),\n/* harmony export */   isTransactionTypeUpload: () => (/* binding */ isTransactionTypeUpload),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isTypeBlob: () => (/* binding */ isTypeBlob),\n/* harmony export */   isTypeCreate: () => (/* binding */ isTypeCreate),\n/* harmony export */   isTypeMint: () => (/* binding */ isTypeMint),\n/* harmony export */   isTypeScript: () => (/* binding */ isTypeScript),\n/* harmony export */   isTypeUpgrade: () => (/* binding */ isTypeUpgrade),\n/* harmony export */   isTypeUpload: () => (/* binding */ isTypeUpload),\n/* harmony export */   mergeQuantities: () => (/* binding */ mergeQuantities),\n/* harmony export */   normalizeJSON: () => (/* binding */ normalizeJSON),\n/* harmony export */   outputify: () => (/* binding */ outputify),\n/* harmony export */   processGqlReceipt: () => (/* binding */ processGqlReceipt),\n/* harmony export */   processGraphqlStatus: () => (/* binding */ processGraphqlStatus),\n/* harmony export */   rawAssets: () => (/* binding */ rawAssets),\n/* harmony export */   resolveAccountForAssembleTxParams: () => (/* binding */ resolveAccountForAssembleTxParams),\n/* harmony export */   resolveGasDependentCosts: () => (/* binding */ resolveGasDependentCosts),\n/* harmony export */   resolveIconPaths: () => (/* binding */ resolveIconPaths),\n/* harmony export */   returnZeroScript: () => (/* binding */ returnZeroScript),\n/* harmony export */   serializeChain: () => (/* binding */ serializeChain),\n/* harmony export */   serializeNodeInfo: () => (/* binding */ serializeNodeInfo),\n/* harmony export */   serializeProviderCache: () => (/* binding */ serializeProviderCache),\n/* harmony export */   serializeTransactionResponseJson: () => (/* binding */ serializeTransactionResponseJson),\n/* harmony export */   setAndValidateGasAndFeeForAssembledTx: () => (/* binding */ setAndValidateGasAndFeeForAssembledTx),\n/* harmony export */   transactionRequestify: () => (/* binding */ transactionRequestify),\n/* harmony export */   urlJoin: () => (/* binding */ urlJoin),\n/* harmony export */   validateTransactionForAssetBurn: () => (/* binding */ validateTransactionForAssetBurn),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout),\n/* harmony export */   withdrawScript: () => (/* binding */ withdrawScript)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d/node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/address */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+address@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_12808c1e18925070bf8378bf9ead890c/node_modules/@fuel-ts/address/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+crypto@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__2af6281b4693138068177942c72da7d9/node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+errors@0.101.1/node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+math@0.101.1/node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fuel-ts/transactions */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+transactions@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@_dc6813ea14c53ffd87ce32c7cc62a339/node_modules/@fuel-ts/transactions/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/clone.js\");\n/* harmony import */ var _fuel_ts_versions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fuel-ts/versions */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+versions@0.101.1/node_modules/@fuel-ts/versions/dist/index.mjs\");\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! graphql-request */ \"(ssr)/./node_modules/.pnpm/graphql-request@6.1.0_graphql@16.10.0/node_modules/graphql-request/build/esm/index.js\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! graphql-tag */ \"(ssr)/./node_modules/.pnpm/graphql-tag@2.12.6_graphql@16.10.0/node_modules/graphql-tag/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @fuel-ts/address/configs */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+address@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_12808c1e18925070bf8378bf9ead890c/node_modules/@fuel-ts/address/dist/configs.mjs\");\n/* harmony import */ var _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @fuel-ts/transactions/configs */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+transactions@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@_dc6813ea14c53ffd87ce32c7cc62a339/node_modules/@fuel-ts/transactions/dist/configs.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+hasher@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__3de5373ec566d2f8672f34c376d1b1fa/node_modules/@fuel-ts/hasher/dist/index.mjs\");\n/* harmony import */ var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @fuels/vm-asm */ \"(ssr)/./node_modules/.pnpm/@fuels+vm-asm@0.60.2/node_modules/@fuels/vm-asm/dist/node/index.cjs\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @fuel-ts/merkle */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+merkle@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__de9684f3895abff2485b47f5d673b5af/node_modules/@fuel-ts/merkle/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/providers/chains.ts\nvar CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889\n  }\n};\n\n// src/assets/utils/network.ts\nvar getDefaultChainId = /* @__PURE__ */ __name((networkType) => {\n  if (networkType === \"ethereum\") {\n    return CHAIN_IDS.eth.sepolia;\n  }\n  if (networkType === \"fuel\") {\n    return CHAIN_IDS.fuel.testnet;\n  }\n  return void 0;\n}, \"getDefaultChainId\");\nvar getAssetNetwork = /* @__PURE__ */ __name(({\n  asset,\n  chainId,\n  networkType\n}) => {\n  const network = asset.networks.find(\n    (item) => item.chainId === chainId && item.type === networkType\n  );\n  return network;\n}, \"getAssetNetwork\");\nvar getAssetWithNetwork = /* @__PURE__ */ __name(({\n  asset,\n  chainId,\n  networkType\n}) => {\n  const { networks: _, ...assetRest } = asset;\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  if (chainIdToUse === void 0) {\n    return void 0;\n  }\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType\n  });\n  if (!assetNetwork) {\n    return void 0;\n  }\n  return {\n    ...assetRest,\n    ...assetNetwork\n  };\n}, \"getAssetWithNetwork\");\nvar getAssetEth = /* @__PURE__ */ __name((asset, chainId) => getAssetWithNetwork({\n  asset,\n  networkType: \"ethereum\",\n  chainId\n}), \"getAssetEth\");\nvar getAssetFuel = /* @__PURE__ */ __name((asset, chainId) => getAssetWithNetwork({\n  asset,\n  networkType: \"fuel\",\n  chainId\n}), \"getAssetFuel\");\n\n// src/assets/utils/url.ts\nvar DELIMITER_PATH = \"/\";\nvar trimRegex = /^\\/|\\/$/g;\nvar trimPath = /* @__PURE__ */ __name((path = \"\") => path.replace(trimRegex, \"\"), \"trimPath\");\nfunction urlJoin(baseUrl, ...paths) {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== void 0;\n  const rootPath = baseUrl?.[0] === \"/\" && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift(\"\");\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n__name(urlJoin, \"urlJoin\");\n\n// src/assets/utils/resolveIconPaths.ts\nfunction resolveIconPaths(assets2, basePath = \"./\") {\n  return assets2.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon)\n  }));\n}\n__name(resolveIconPaths, \"resolveIconPaths\");\n\n// src/assets/utils/fuelAssetsBaseUrl.ts\nvar fuelAssetsBaseUrl = \"https://assets.fuel.network/providers/\";\n\n// src/assets/assets.ts\nvar rawAssets = [\n  {\n    name: \"Ethereum\",\n    symbol: \"ETH\",\n    icon: \"eth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18\n      },\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18\n      },\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      }\n    ]\n  },\n  {\n    name: \"WETH\",\n    symbol: \"WETH\",\n    icon: \"weth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"weETH\",\n    symbol: \"weETH\",\n    icon: \"weETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rsETH\",\n    symbol: \"rsETH\",\n    icon: \"rsETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rETH\",\n    symbol: \"rETH\",\n    icon: \"reth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xae78736cd615f374d3085123a210448e74fc6393\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"wbETH\",\n    symbol: \"wbETH\",\n    icon: \"wbeth.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xa2E3356610840701BDf5611a53974510Ae27E2e1\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rstETH\",\n    symbol: \"rstETH\",\n    icon: \"rstETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7a4EffD87C2f3C55CA251080b1343b605f327E3a\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"amphrETH\",\n    symbol: \"amphrETH\",\n    icon: \"amphrETH.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x5fD13359Ba15A84B76f7F87568309040176167cd\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mBTC\",\n    symbol: \"Manta mBTC\",\n    icon: \"manta-mbtc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x4041381e947CFD3D483d67a25C6aa9Dc924250c5\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mETH\",\n    symbol: \"Manta mETH\",\n    icon: \"manta-meth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x8CdF550C04Bc9B9F10938368349C9c8051A772b6\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mUSD\",\n    symbol: \"Manta mUSD\",\n    icon: \"manta-musd.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x3f24E1d7a973867fC2A03fE199E5502514E0e11E\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"pumpBTC\",\n    symbol: \"pumpBTC\",\n    icon: \"pumpbtc.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xf469fbd2abcd6b9de8e169d128226c0fc90a012e\",\n        decimals: 8\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f\",\n        decimals: 8\n      }\n    ]\n  },\n  {\n    name: \"FBTC\",\n    symbol: \"FBTC\",\n    icon: \"fbtc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xc96de26018a54d51c097160568752c4e3bd6c364\",\n        decimals: 8\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a\",\n        decimals: 8\n      }\n    ]\n  },\n  {\n    name: \"SolvBTC\",\n    symbol: \"SolvBTC\",\n    icon: \"solvBTC.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7a56e1c57c7475ccf742a1832b028f0456652f97\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"SolvBTC.BBN\",\n    symbol: \"SolvBTC.BBN\",\n    icon: \"SolvBTC.BBN.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xd9d920aa40f578ab794426f5c90f6c731d159def\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Mantle mETH\",\n    symbol: \"Mantle mETH\",\n    icon: \"mantle-meth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"sDAI\",\n    symbol: \"sDAI\",\n    icon: \"sdai.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x83f20f44975d03b1b09e64809b757c47f942beea\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"USDT\",\n    symbol: \"USDT\",\n    icon: \"usdt.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n        decimals: 6\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e\",\n        decimals: 6\n      }\n    ]\n  },\n  {\n    name: \"USDC\",\n    symbol: \"USDC\",\n    icon: \"usdc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b\",\n        decimals: 6\n      }\n    ]\n  },\n  {\n    name: \"USDe\",\n    symbol: \"USDe\",\n    icon: \"USDe.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x4c9edd5852cd905f086c759e8383e09bff1e68b3\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"sUSDe\",\n    symbol: \"sUSDe\",\n    icon: \"sUSDe.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x9d39a5de30e57443bff2a8307a4256c8797a3497\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rsUSDe\",\n    symbol: \"rsUSDe\",\n    icon: \"rsUSDe.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"wstETH\",\n    symbol: \"wstETH\",\n    icon: \"wsteth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"ezETH\",\n    symbol: \"ezETH\",\n    icon: \"ezeth.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xbf5495Efe5DB9ce00f80364C8B423567e58d2110\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"pzETH\",\n    symbol: \"pzETH\",\n    icon: \"pzETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Re7LRT\",\n    symbol: \"Re7LRT\",\n    icon: \"Re7LRT.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"steakLRT\",\n    symbol: \"steakLRT\",\n    icon: \"steakLRT.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30\",\n        decimals: 9\n      }\n    ]\n  }\n];\nvar assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);\n\n// src/assets/asset-api.ts\nvar networks = {\n  mainnet: \"https://mainnet-explorer.fuel.network\",\n  testnet: \"https://explorer-indexer-testnet.fuel.network\"\n};\nvar request = /* @__PURE__ */ __name(async (url, slug) => {\n  const response = await fetch(`${url}${slug}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    }\n  });\n  try {\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n}, \"request\");\nvar buildQueryString = /* @__PURE__ */ __name((parameters) => {\n  const query = new URLSearchParams();\n  Object.entries(parameters).forEach(([key, value]) => {\n    query.set(key, value.toString());\n  });\n  return query.size > 0 ? `?${query.toString()}` : \"\";\n}, \"buildQueryString\");\nvar getAssetById = /* @__PURE__ */ __name((opts) => {\n  const { network = \"mainnet\", assetId } = opts;\n  const url = networks[network];\n  return request(url, `/assets/${assetId}`);\n}, \"getAssetById\");\nvar getAssetsByOwner = /* @__PURE__ */ __name(async (opts) => {\n  const { network = \"mainnet\", owner, pagination = { last: 10 } } = opts;\n  const url = networks[network];\n  const { last } = pagination;\n  const queryString = buildQueryString({ last });\n  const response = await request(url, `/accounts/${owner}/assets${queryString}`);\n  if (!response) {\n    return { data: [], pageInfo: { count: 0 } };\n  }\n  return response;\n}, \"getAssetsByOwner\");\n\n// src/account.ts\n\n\n\n\n\n\n\n\n\n// src/providers/coin-quantity.ts\n\n\nvar coinQuantityfy = /* @__PURE__ */ __name((coinQuantityLike) => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? void 0;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? void 0;\n  }\n  return {\n    assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId),\n    amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount),\n    max: max ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(max) : void 0\n  };\n}, \"coinQuantityfy\");\nvar addAmountToCoinQuantities = /* @__PURE__ */ __name((params) => {\n  const { amount, assetId } = params;\n  const coinQuantities = [...params.coinQuantities];\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n  return coinQuantities;\n}, \"addAmountToCoinQuantities\");\n\n// src/providers/provider.ts\n\n\n\n\n\n\n\n\n\n\n// src/providers/__generated__/operations.ts\n\nvar InputCoinFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment InputCoinFragment on InputCoin {\n  type: __typename\n  utxoId\n  owner\n  amount\n  assetId\n  txPointer\n  coinWitnessIndex: witnessIndex\n  predicateGasUsed\n  predicate\n  predicateData\n}\n    `;\nvar InputMessageFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment InputMessageFragment on InputMessage {\n  type: __typename\n  sender\n  recipient\n  amount\n  nonce\n  messageWitnessIndex: witnessIndex\n  predicateGasUsed\n  data\n  predicate\n  predicateData\n}\n    `;\nvar InputContractFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment InputContractFragment on InputContract {\n  type: __typename\n  utxoId\n  balanceRoot\n  stateRoot\n  txPointer\n  contractId\n}\n    `;\nvar OutputCoinFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment OutputCoinFragment on CoinOutput {\n  type: __typename\n  to\n  amount\n  assetId\n}\n    `;\nvar OutputContractFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment OutputContractFragment on ContractOutput {\n  type: __typename\n  inputIndex\n  balanceRoot\n  stateRoot\n}\n    `;\nvar OutputChangeFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment OutputChangeFragment on ChangeOutput {\n  type: __typename\n  to\n  amount\n  assetId\n}\n    `;\nvar OutputVariableFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment OutputVariableFragment on VariableOutput {\n  type: __typename\n  to\n  amount\n  assetId\n}\n    `;\nvar OutputContractCreatedFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment OutputContractCreatedFragment on ContractCreated {\n  type: __typename\n  contract\n  stateRoot\n}\n    `;\nvar SubmittedStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nvar ReceiptFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nvar SuccessStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nvar SuccessStatusWithBlockIdFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nvar MalleableTransactionFieldsFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nvar FailureStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar FailureStatusWithBlockIdFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nvar SqueezedOutStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nvar PreconfirmationSuccessStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment PreconfirmationSuccessStatusFragment on PreconfirmationSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  resolvedOutputs {\n    utxoId\n    output {\n      type: __typename\n      ... on CoinOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractOutput {\n        inputIndex\n        balanceRoot\n        stateRoot\n      }\n      ... on ChangeOutput {\n        to\n        amount\n        assetId\n      }\n      ... on VariableOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractCreated {\n        contract\n        stateRoot\n      }\n    }\n  }\n  preconfirmationReceipts: receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar PreconfirmationFailureStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment PreconfirmationFailureStatusFragment on PreconfirmationFailureStatus {\n  type: __typename\n  reason\n  totalGas\n  totalFee\n  resolvedOutputs {\n    utxoId\n    output {\n      type: __typename\n      ... on CoinOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractOutput {\n        inputIndex\n        balanceRoot\n        stateRoot\n      }\n      ... on ChangeOutput {\n        to\n        amount\n        assetId\n      }\n      ... on VariableOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractCreated {\n        contract\n        stateRoot\n      }\n    }\n  }\n  preconfirmationReceipts: receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar TransactionStatusSubscriptionFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n  ... on PreconfirmationSuccessStatus {\n    ...PreconfirmationSuccessStatusFragment\n  }\n  ... on PreconfirmationFailureStatus {\n    ...PreconfirmationFailureStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}\n${PreconfirmationSuccessStatusFragmentDoc}\n${PreconfirmationFailureStatusFragmentDoc}`;\nvar TransactionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar TransactionFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nvar TransactionRawPayloadFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nvar InputEstimatePredicatesFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nvar TransactionEstimatePredicatesFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nvar DryRunFailureAssembleTxFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunFailureAssembleTxFragment on DryRunFailureStatus {\n  type: __typename\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar DryRunSuccessAssembleTxFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunSuccessAssembleTxFragment on DryRunSuccessStatus {\n  type: __typename\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar DryRunFailureStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nvar DryRunSuccessStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nvar DryRunTransactionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nvar DryRunTransactionExecutionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nvar BlockFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nvar CoinFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nvar MessageCoinFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nvar MessageFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nvar GetMessageFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nvar MessageProofFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nvar TxParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nvar PredicateParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nvar ScriptParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nvar ContractParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nvar FeeParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nvar DependentCostFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nvar GasCostsFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nvar ConsensusParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nvar ChainInfoFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n  latestBlock {\n    header {\n      consensusParametersVersion\n    }\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nvar ContractBalanceFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nvar PageInfoFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nvar NodeInfoFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n  indexation {\n    balances\n    coinsToSpend\n    assetMetadata\n  }\n}\n    `;\nvar RelayedTransactionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nvar GetVersionDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nvar GetNodeInfoDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nvar GetChainDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nvar GetChainAndNodeInfoDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nvar GetTransactionDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nvar GetTransactionWithReceiptsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n      ... on PreconfirmationSuccessStatus {\n        ...PreconfirmationSuccessStatusFragment\n      }\n      ... on PreconfirmationFailureStatus {\n        ...PreconfirmationFailureStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}\n${PreconfirmationSuccessStatusFragmentDoc}\n${PreconfirmationFailureStatusFragmentDoc}`;\nvar GetTransactionsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nvar GetTransactionsByOwnerDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nvar EstimatePredicatesDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nvar EstimatePredicatesAndGasPriceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query estimatePredicatesAndGasPrice($encodedTransaction: HexString!, $blockHorizon: U32!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nvar GetLatestBlockDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nvar GetLatestBlockHeightDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nvar GetBlockDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nvar GetBlockWithTransactionsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nvar GetBlocksDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nvar GetCoinDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nvar GetCoinsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nvar GetCoinsToSpendDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nvar GetContractDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nvar GetContractBalanceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nvar GetBalanceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nvar GetBalanceV2Document = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBalanceV2($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amountU128\n  }\n}\n    `;\nvar GetLatestGasPriceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nvar EstimateGasPriceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nvar GetBalancesDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    `;\nvar GetBalancesV2Document = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBalancesV2($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int, $supportsPagination: Boolean!) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo @include(if: $supportsPagination) {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        assetId\n        amountU128\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nvar GetMessagesDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nvar DaCompressedBlockDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query daCompressedBlock($height: U32!) {\n  daCompressedBlock(height: $height) {\n    bytes\n  }\n}\n    `;\nvar GetMessageProofDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nvar GetMessageStatusDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nvar GetRelayedTransactionStatusDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nvar GetAssetDetailsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getAssetDetails($assetId: AssetId!) {\n  assetDetails(id: $assetId) {\n    subId\n    contractId\n    totalSupply\n  }\n}\n    `;\nvar AssembleTxDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query assembleTx($tx: HexString!, $blockHorizon: U32!, $requiredBalances: [RequiredBalance!]!, $feeAddressIndex: U16!, $excludeInput: ExcludeInput, $estimatePredicates: Boolean, $reserveGas: U64) {\n  assembleTx(\n    tx: $tx\n    blockHorizon: $blockHorizon\n    requiredBalances: $requiredBalances\n    feeAddressIndex: $feeAddressIndex\n    excludeInput: $excludeInput\n    estimatePredicates: $estimatePredicates\n    reserveGas: $reserveGas\n  ) {\n    transaction {\n      id\n      inputs {\n        ... on InputCoin {\n          ...InputCoinFragment\n        }\n        ... on InputContract {\n          ...InputContractFragment\n        }\n        ... on InputMessage {\n          ...InputMessageFragment\n        }\n      }\n      outputs {\n        ... on CoinOutput {\n          ...OutputCoinFragment\n        }\n        ... on ContractOutput {\n          ...OutputContractFragment\n        }\n        ... on ChangeOutput {\n          ...OutputChangeFragment\n        }\n        ... on VariableOutput {\n          ...OutputVariableFragment\n        }\n        ... on ContractCreated {\n          ...OutputContractCreatedFragment\n        }\n      }\n      policies {\n        tip\n        witnessLimit\n        maturity\n        maxFee\n      }\n      witnesses\n      scriptGasLimit\n    }\n    status {\n      ... on DryRunFailureStatus {\n        ...dryRunFailureAssembleTxFragment\n      }\n      ... on DryRunSuccessStatus {\n        ...dryRunSuccessAssembleTxFragment\n      }\n    }\n    gasPrice\n  }\n}\n    ${InputCoinFragmentDoc}\n${InputContractFragmentDoc}\n${InputMessageFragmentDoc}\n${OutputCoinFragmentDoc}\n${OutputContractFragmentDoc}\n${OutputChangeFragmentDoc}\n${OutputVariableFragmentDoc}\n${OutputContractCreatedFragmentDoc}\n${DryRunFailureAssembleTxFragmentDoc}\n${DryRunSuccessAssembleTxFragmentDoc}`;\nvar DryRunDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nvar SubmitDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nvar ProduceBlocksDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nvar GetMessageByNonceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nvar IsUserAccountDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nvar GetConsensusParametersVersionDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nvar SubmitAndAwaitStatusDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!, $estimatePredicates: Boolean, $includePreConfirmation: Boolean) {\n  submitAndAwaitStatus(\n    tx: $encodedTransaction\n    estimatePredicates: $estimatePredicates\n    includePreconfirmation: $includePreConfirmation\n  ) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nvar StatusChangeDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    subscription statusChange($transactionId: TransactionId!, $includePreConfirmation: Boolean) {\n  statusChange(\n    id: $transactionId\n    includePreconfirmation: $includePreConfirmation\n  ) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nfunction getSdk(requester) {\n  return {\n    getVersion(variables, options) {\n      return requester(GetVersionDocument, variables, options);\n    },\n    getNodeInfo(variables, options) {\n      return requester(GetNodeInfoDocument, variables, options);\n    },\n    getChain(variables, options) {\n      return requester(GetChainDocument, variables, options);\n    },\n    getChainAndNodeInfo(variables, options) {\n      return requester(GetChainAndNodeInfoDocument, variables, options);\n    },\n    getTransaction(variables, options) {\n      return requester(GetTransactionDocument, variables, options);\n    },\n    getTransactionWithReceipts(variables, options) {\n      return requester(GetTransactionWithReceiptsDocument, variables, options);\n    },\n    getTransactions(variables, options) {\n      return requester(GetTransactionsDocument, variables, options);\n    },\n    getTransactionsByOwner(variables, options) {\n      return requester(GetTransactionsByOwnerDocument, variables, options);\n    },\n    estimatePredicates(variables, options) {\n      return requester(EstimatePredicatesDocument, variables, options);\n    },\n    estimatePredicatesAndGasPrice(variables, options) {\n      return requester(EstimatePredicatesAndGasPriceDocument, variables, options);\n    },\n    getLatestBlock(variables, options) {\n      return requester(GetLatestBlockDocument, variables, options);\n    },\n    getLatestBlockHeight(variables, options) {\n      return requester(GetLatestBlockHeightDocument, variables, options);\n    },\n    getBlock(variables, options) {\n      return requester(GetBlockDocument, variables, options);\n    },\n    getBlockWithTransactions(variables, options) {\n      return requester(GetBlockWithTransactionsDocument, variables, options);\n    },\n    getBlocks(variables, options) {\n      return requester(GetBlocksDocument, variables, options);\n    },\n    getCoin(variables, options) {\n      return requester(GetCoinDocument, variables, options);\n    },\n    getCoins(variables, options) {\n      return requester(GetCoinsDocument, variables, options);\n    },\n    getCoinsToSpend(variables, options) {\n      return requester(GetCoinsToSpendDocument, variables, options);\n    },\n    getContract(variables, options) {\n      return requester(GetContractDocument, variables, options);\n    },\n    getContractBalance(variables, options) {\n      return requester(GetContractBalanceDocument, variables, options);\n    },\n    getBalance(variables, options) {\n      return requester(GetBalanceDocument, variables, options);\n    },\n    getBalanceV2(variables, options) {\n      return requester(GetBalanceV2Document, variables, options);\n    },\n    getLatestGasPrice(variables, options) {\n      return requester(GetLatestGasPriceDocument, variables, options);\n    },\n    estimateGasPrice(variables, options) {\n      return requester(EstimateGasPriceDocument, variables, options);\n    },\n    getBalances(variables, options) {\n      return requester(GetBalancesDocument, variables, options);\n    },\n    getBalancesV2(variables, options) {\n      return requester(GetBalancesV2Document, variables, options);\n    },\n    getMessages(variables, options) {\n      return requester(GetMessagesDocument, variables, options);\n    },\n    daCompressedBlock(variables, options) {\n      return requester(DaCompressedBlockDocument, variables, options);\n    },\n    getMessageProof(variables, options) {\n      return requester(GetMessageProofDocument, variables, options);\n    },\n    getMessageStatus(variables, options) {\n      return requester(GetMessageStatusDocument, variables, options);\n    },\n    getRelayedTransactionStatus(variables, options) {\n      return requester(GetRelayedTransactionStatusDocument, variables, options);\n    },\n    getAssetDetails(variables, options) {\n      return requester(GetAssetDetailsDocument, variables, options);\n    },\n    assembleTx(variables, options) {\n      return requester(AssembleTxDocument, variables, options);\n    },\n    dryRun(variables, options) {\n      return requester(DryRunDocument, variables, options);\n    },\n    submit(variables, options) {\n      return requester(SubmitDocument, variables, options);\n    },\n    produceBlocks(variables, options) {\n      return requester(ProduceBlocksDocument, variables, options);\n    },\n    getMessageByNonce(variables, options) {\n      return requester(GetMessageByNonceDocument, variables, options);\n    },\n    isUserAccount(variables, options) {\n      return requester(IsUserAccountDocument, variables, options);\n    },\n    getConsensusParametersVersion(variables, options) {\n      return requester(GetConsensusParametersVersionDocument, variables, options);\n    },\n    submitAndAwaitStatus(variables, options) {\n      return requester(SubmitAndAwaitStatusDocument, variables, options);\n    },\n    statusChange(variables, options) {\n      return requester(StatusChangeDocument, variables, options);\n    }\n  };\n}\n__name(getSdk, \"getSdk\");\n\n// src/providers/assemble-tx-helpers.ts\n\n\n\n\nvar resolveAccountForAssembleTxParams = /* @__PURE__ */ __name((account) => {\n  const assembleTxAccount = {};\n  const accountIsPredicate = \"bytes\" in account;\n  if (accountIsPredicate) {\n    assembleTxAccount.predicate = {\n      predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(account.bytes),\n      predicateAddress: account.address.toB256(),\n      predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(account.getPredicateData())\n    };\n  } else {\n    assembleTxAccount.address = account.address.toB256();\n  }\n  return assembleTxAccount;\n}, \"resolveAccountForAssembleTxParams\");\nvar setAndValidateGasAndFeeForAssembledTx = /* @__PURE__ */ __name(async (params) => {\n  const { gasPrice, transactionRequest, setGasLimit, setMaxFee, provider } = params;\n  const gasLimitSpecified = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(setGasLimit);\n  const maxFeeSpecified = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(setMaxFee);\n  const isScriptTx = transactionRequest.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script;\n  if (gasLimitSpecified && isScriptTx) {\n    const requiredGasLimit = transactionRequest.gasLimit;\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(setGasLimit).lt((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(requiredGasLimit))) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${requiredGasLimit}'.`\n      );\n    }\n    transactionRequest.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(setGasLimit);\n  }\n  if (maxFeeSpecified) {\n    const requiredMaxFee = transactionRequest.maxFee;\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(setMaxFee).lt(requiredMaxFee)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${requiredMaxFee}'.`\n      );\n    }\n    transactionRequest.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(setMaxFee);\n  }\n  if (gasLimitSpecified && !maxFeeSpecified) {\n    const { maxFee: feeForGasPrice } = await provider.estimateTxGasAndFee({\n      transactionRequest,\n      gasPrice\n    });\n    transactionRequest.maxFee = feeForGasPrice;\n  }\n  return transactionRequest;\n}, \"setAndValidateGasAndFeeForAssembledTx\");\n\n// src/providers/fuel-graphql-subscriber.ts\n\n\n\n// src/providers/utils/handle-gql-error-message.ts\n\nvar gqlErrorMessage = {\n  RPC_CONSISTENCY: /The required fuel block height is higher than the current block height. Required: \\d+, Current: \\d+/,\n  NOT_ENOUGH_COINS_MAX_COINS: /the target cannot be met due to no coins available or exceeding the \\d+ coin limit./,\n  ASSET_NOT_FOUND: /resource was not found in table/,\n  MULTIPLE_CHANGE_POLICIES: /The asset ([a-fA-F0-9]{64}) has multiple change policies/,\n  DUPLICATE_CHANGE_OUTPUT_ACCOUNT: /required balances contain duplicate \\(asset, account\\) pair/,\n  INSUFFICIENT_FEE_AMOUNT: /InsufficientFeeAmount { expected: (\\d+), provided: (\\d+) }/\n};\nvar mapGqlErrorMessage = /* @__PURE__ */ __name((error) => {\n  if (gqlErrorMessage.NOT_ENOUGH_COINS_MAX_COINS.test(error.message)) {\n    return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,\n      `Insufficient funds or too many small value coins. Consider combining UTXOs.`,\n      {},\n      error\n    );\n  }\n  if (gqlErrorMessage.MULTIPLE_CHANGE_POLICIES.test(error.message)) {\n    const match = error.message.match(/asset ([a-fA-F0-9]{64})/);\n    const assetId = match?.[1] || \"\";\n    return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CHANGE_OUTPUT_COLLISION,\n      `OutputChange address for asset 0x${assetId} differs between transaction request and assembleTx parameters.`,\n      {},\n      error\n    );\n  }\n  if (gqlErrorMessage.DUPLICATE_CHANGE_OUTPUT_ACCOUNT.test(error.message)) {\n    return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.DUPLICATE_CHANGE_OUTPUT_ACCOUNT,\n      `The parameter 'accountCoinQuantities' of assembleTx contains duplicate entries for the same assetId with different 'changeOutputAccount'.`,\n      {},\n      error\n    );\n  }\n  if (gqlErrorMessage.ASSET_NOT_FOUND.test(error.message)) {\n    return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ASSET_NOT_FOUND,\n      `Asset not found for given asset id.`,\n      {},\n      error\n    );\n  }\n  if (gqlErrorMessage.RPC_CONSISTENCY.test(error.message)) {\n    return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.RPC_CONSISTENCY, error.message, {}, error);\n  }\n  if (gqlErrorMessage.INSUFFICIENT_FEE_AMOUNT.test(error.message)) {\n    const match = error.message.match(gqlErrorMessage.INSUFFICIENT_FEE_AMOUNT);\n    return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.FUNDS_TOO_LOW, match?.[0] || error.message, {}, error);\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_REQUEST, error.message, {}, error);\n}, \"mapGqlErrorMessage\");\nvar mapGqlErrorWithIncompatibleNodeVersion = /* @__PURE__ */ __name((error, incompatibleNodeVersionMessage) => {\n  if (!incompatibleNodeVersionMessage) {\n    return error;\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n    error.code,\n    `${error.message}\n\n${incompatibleNodeVersionMessage}`,\n    error.metadata,\n    error.rawError\n  );\n}, \"mapGqlErrorWithIncompatibleNodeVersion\");\nvar assertGqlResponseHasNoErrors = /* @__PURE__ */ __name((errors, incompatibleNodeVersionMessage = false) => {\n  if (!Array.isArray(errors)) {\n    return;\n  }\n  const mappedErrors = errors.map(mapGqlErrorMessage);\n  if (mappedErrors.length === 1) {\n    throw mapGqlErrorWithIncompatibleNodeVersion(mappedErrors[0], incompatibleNodeVersionMessage);\n  }\n  const errorMessage = mappedErrors.map((err) => err.message).join(\"\\n\");\n  throw mapGqlErrorWithIncompatibleNodeVersion(\n    new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_REQUEST, errorMessage, {}, mappedErrors),\n    incompatibleNodeVersionMessage\n  );\n}, \"assertGqlResponseHasNoErrors\");\n\n// src/providers/fuel-graphql-subscriber.ts\nvar FuelGraphqlSubscriber = class _FuelGraphqlSubscriber {\n  constructor(stream, onEvent) {\n    this.stream = stream;\n    this.onEvent = onEvent;\n  }\n  static {\n    __name(this, \"FuelGraphqlSubscriber\");\n  }\n  static incompatibleNodeVersionMessage = false;\n  static textDecoder = new TextDecoder();\n  static async create(options) {\n    const { url, query, variables, fetchFn, operationName, onEvent } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: (0,graphql__WEBPACK_IMPORTED_MODULE_10__.print)(query),\n        variables,\n        operationName\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"text/event-stream\"\n      }\n    });\n    const [errorReader, resultReader] = response.body.tee().map((stream) => stream.getReader());\n    await new _FuelGraphqlSubscriber(errorReader).next();\n    return new _FuelGraphqlSubscriber(resultReader, onEvent);\n  }\n  /**\n   * This method will take a stream reader and parse the event from the stream.\n   *\n   * @param reader - The reader of the SSE stream\n   * @param parsingLeftover - The leftover string from parsing the previous event\n   * @returns The event parsed as a full GraphQL response, whether the stream is done and the leftover string after parsing\n   */\n  static async readEvent(reader, parsingLeftover = \"\") {\n    let text = parsingLeftover;\n    const regex = /data:.*\\n\\n/g;\n    while (true) {\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n      if (matches.length > 0) {\n        try {\n          const event = JSON.parse(matches[0].replace(/^data:/, \"\"));\n          return {\n            event,\n            done: false,\n            parsingLeftover: text.replace(matches[0], \"\")\n          };\n        } catch (e) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      }\n      const { value, done } = await reader.read();\n      if (done) {\n        return { event: void 0, done, parsingLeftover: \"\" };\n      }\n      const decoded = _FuelGraphqlSubscriber.textDecoder.decode(value).replace(\":keep-alive-text\\n\\n\", \"\");\n      text += decoded;\n    }\n  }\n  events = [];\n  parsingLeftover = \"\";\n  /**\n   * Gets automatically called when iterating in a `for-await-of` loop.\n   * It can also be called manually.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\n   */\n  async next() {\n    while (true) {\n      const nextEvent = this.events.shift();\n      if (nextEvent) {\n        this.onEvent?.(nextEvent);\n        assertGqlResponseHasNoErrors(\n          nextEvent.errors,\n          _FuelGraphqlSubscriber.incompatibleNodeVersionMessage\n        );\n        return { value: nextEvent.data, done: false };\n      }\n      const { event, done, parsingLeftover } = await _FuelGraphqlSubscriber.readEvent(\n        this.stream,\n        this.parsingLeftover\n      );\n      this.parsingLeftover = parsingLeftover;\n      if (done) {\n        return { value: void 0, done: true };\n      }\n      this.events.push(event);\n    }\n  }\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return() {\n    return Promise.resolve({ done: true, value: void 0 });\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n};\n\n// src/providers/resource-cache.ts\n\n\n\n// src/providers/transaction-request/input.ts\n\n\n\n\n\n\nvar inputify = /* @__PURE__ */ __name((value) => {\n  const { type } = value;\n  switch (value.type) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin: {\n      const predicate = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicate ?? \"0x\");\n      const predicateData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicateData ?? \"0x\");\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin,\n        txID: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.id).slice(0, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BYTES_32)),\n        outputIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.id).slice(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BYTES_32, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN)),\n        owner: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.owner),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId),\n        txPointer: {\n          blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(0, 8)),\n          txIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(8, 16))\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.predicateGasUsed),\n        predicateLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicate.length),\n        predicateDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateData.length),\n        predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicate),\n        predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicateData)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract,\n        txID: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.txID || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32),\n        outputIndex: 0,\n        balanceRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        stateRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        txPointer: {\n          blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(0, 8)),\n          txIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(8, 16))\n        },\n        contractID: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.contractId)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message: {\n      const predicate = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicate ?? \"0x\");\n      const predicateData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicateData ?? \"0x\");\n      const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.data ?? \"0x\");\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message,\n        sender: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.sender),\n        recipient: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.recipient),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        nonce: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.predicateGasUsed),\n        predicateLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicate.length),\n        predicateDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateData.length),\n        predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicate),\n        predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicateData),\n        data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data),\n        dataLength: data.length\n      };\n    }\n    default: {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n}, \"inputify\");\n\n// src/providers/transaction-request/output.ts\n\n\n\n\n\nvar outputify = /* @__PURE__ */ __name((value) => {\n  const { type } = value;\n  switch (type) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n        to: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        stateRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change,\n        to: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable,\n        to: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.to || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n        contractId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.contractId),\n        stateRoot: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.stateRoot)\n      };\n    }\n    default: {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n}, \"outputify\");\n\n// src/providers/transaction-request/transaction-request.ts\n\n\n\n\n\n\n\n\n\n// src/providers/message.ts\nvar isMessageCoin = /* @__PURE__ */ __name((message) => !(\"data\" in message), \"isMessageCoin\");\n\n// src/providers/resource.ts\nvar isRawCoin = /* @__PURE__ */ __name((resource) => \"utxoId\" in resource, \"isRawCoin\");\nvar isRawMessage = /* @__PURE__ */ __name((resource) => \"recipient\" in resource, \"isRawMessage\");\nvar isCoin = /* @__PURE__ */ __name((resource) => \"id\" in resource, \"isCoin\");\nvar isMessage = /* @__PURE__ */ __name((resource) => \"recipient\" in resource, \"isMessage\");\n\n// src/providers/utils/receipts.ts\n\n\n\n// src/providers/utils/serialization.ts\n\n\n\n\n\nvar deserializeChain = /* @__PURE__ */ __name((chain) => {\n  const { name, daHeight, consensusParameters, latestBlock } = chain;\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version\n  } = consensusParameters;\n  return {\n    name,\n    baseChainHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(daHeight),\n    consensusParameters: {\n      version,\n      chainId: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPerByte),\n        gasPriceFactor: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPriceFactor)\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(contractParams.contractMaxSize),\n        maxStorageSlots: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(contractParams.maxStorageSlots)\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxInputs),\n        maxOutputs: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxOutputs),\n        maxWitnesses: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxWitnesses),\n        maxGasPerTx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxGasPerTx),\n        maxSize: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxSize),\n        maxBytecodeSubsections: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxBytecodeSubsections)\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxMessageDataLength)\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(scriptParams.maxScriptLength),\n        maxScriptDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(scriptParams.maxScriptDataLength)\n      },\n      gasCosts\n    },\n    latestBlock\n  };\n}, \"deserializeChain\");\nvar serializeChain = /* @__PURE__ */ __name((chain) => {\n  const { name, baseChainHeight, consensusParameters, latestBlock } = chain;\n  const {\n    contractParameters,\n    feeParameters,\n    predicateParameters,\n    scriptParameters,\n    txParameters,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version\n  } = consensusParameters;\n  return {\n    name,\n    daHeight: baseChainHeight.toString(),\n    consensusParameters: {\n      version,\n      chainId: chainId.toString(),\n      baseAssetId,\n      feeParams: {\n        version: feeParameters.version,\n        gasPerByte: feeParameters.gasPerByte.toString(),\n        gasPriceFactor: feeParameters.gasPriceFactor.toString()\n      },\n      contractParams: {\n        version: contractParameters.version,\n        contractMaxSize: contractParameters.contractMaxSize.toString(),\n        maxStorageSlots: contractParameters.maxStorageSlots.toString()\n      },\n      txParams: {\n        version: txParameters.version,\n        maxInputs: txParameters.maxInputs.toString(),\n        maxOutputs: txParameters.maxOutputs.toString(),\n        maxWitnesses: txParameters.maxWitnesses.toString(),\n        maxGasPerTx: txParameters.maxGasPerTx.toString(),\n        maxSize: txParameters.maxSize.toString(),\n        maxBytecodeSubsections: txParameters.maxBytecodeSubsections.toString()\n      },\n      predicateParams: {\n        version: predicateParameters.version,\n        maxPredicateLength: predicateParameters.maxPredicateLength.toString(),\n        maxPredicateDataLength: predicateParameters.maxPredicateDataLength.toString(),\n        maxGasPerPredicate: predicateParameters.maxGasPerPredicate.toString(),\n        maxMessageDataLength: predicateParameters.maxMessageDataLength.toString()\n      },\n      scriptParams: {\n        version: scriptParameters.version,\n        maxScriptLength: scriptParameters.maxScriptLength.toString(),\n        maxScriptDataLength: scriptParameters.maxScriptDataLength.toString()\n      },\n      gasCosts\n    },\n    latestBlock\n  };\n}, \"serializeChain\");\nvar deserializeNodeInfo = /* @__PURE__ */ __name((nodeInfo) => {\n  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;\n  return {\n    maxDepth: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(maxDepth),\n    maxTx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(maxTx),\n    nodeVersion,\n    utxoValidation,\n    vmBacktrace,\n    indexation\n  };\n}, \"deserializeNodeInfo\");\nvar serializeNodeInfo = /* @__PURE__ */ __name((nodeInfo) => {\n  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;\n  return {\n    maxDepth: maxDepth.toString(),\n    maxTx: maxTx.toString(),\n    nodeVersion,\n    utxoValidation,\n    vmBacktrace,\n    indexation\n  };\n}, \"serializeNodeInfo\");\nvar deserializeProviderCache = /* @__PURE__ */ __name((cache2) => ({\n  consensusParametersTimestamp: cache2.consensusParametersTimestamp,\n  chain: deserializeChain(cache2.chain),\n  nodeInfo: deserializeNodeInfo(cache2.nodeInfo)\n}), \"deserializeProviderCache\");\nvar serializeProviderCache = /* @__PURE__ */ __name(async (provider) => ({\n  consensusParametersTimestamp: provider.consensusParametersTimestamp,\n  chain: serializeChain(await provider.getChain()),\n  nodeInfo: serializeNodeInfo(await provider.getNode())\n}), \"serializeProviderCache\");\nvar hexOrZero = /* @__PURE__ */ __name((hex) => hex || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32, \"hexOrZero\");\nvar deserializeReceipt = /* @__PURE__ */ __name((receipt) => {\n  const { receiptType } = receipt;\n  switch (receiptType) {\n    case \"CALL\" /* Call */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.gas),\n        param1: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.param1),\n        param2: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.param2),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return callReceipt;\n    }\n    case \"RETURN\" /* Return */: {\n      const returnReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.val),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return returnReceipt;\n    }\n    case \"RETURN_DATA\" /* ReturnData */: {\n      const returnDataReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ptr),\n        len: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return returnDataReceipt;\n    }\n    case \"PANIC\" /* Panic */: {\n      const panicReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.reason),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is),\n        contractId: hexOrZero(receipt.contractId)\n      };\n      return panicReceipt;\n    }\n    case \"REVERT\" /* Revert */: {\n      const revertReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ra),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return revertReceipt;\n    }\n    case \"LOG\" /* Log */: {\n      const ra = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ra);\n      const rb = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rb);\n      const rc = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rc);\n      const rd = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rd);\n      const logReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return logReceipt;\n    }\n    case \"LOG_DATA\" /* LogData */: {\n      const ra = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ra);\n      const rb = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rb);\n      const logDataReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ptr),\n        len: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return logDataReceipt;\n    }\n    case \"TRANSFER\" /* Transfer */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return transferReceipt;\n    }\n    case \"TRANSFER_OUT\" /* TransferOut */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return transferOutReceipt;\n    }\n    case \"SCRIPT_RESULT\" /* ScriptResult */: {\n      const scriptResultReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.ScriptResult,\n        result: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.result),\n        gasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.gasUsed)\n      };\n      return scriptResultReceipt;\n    }\n    case \"MESSAGE_OUT\" /* MessageOut */: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount);\n      const data = receipt.data ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.len).toNumber();\n      const messageId = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data)\n      });\n      const receiptMessageOut = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId\n      };\n      return receiptMessageOut;\n    }\n    case \"MINT\" /* Mint */: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = (0,_fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.getMintedAssetId)(contractId, subId);\n      const mintReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.val),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return mintReceipt;\n    }\n    case \"BURN\" /* Burn */: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = (0,_fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.getMintedAssetId)(contractId, subId);\n      const burnReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.val),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return burnReceipt;\n    }\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n}, \"deserializeReceipt\");\nvar deserializeInput = /* @__PURE__ */ __name((input) => {\n  let parsedInput;\n  switch (input.type) {\n    case \"InputCoin\":\n      parsedInput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin,\n        id: input.utxoId,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.amount),\n        assetId: input.assetId,\n        owner: input.owner,\n        txPointer: `0x${input.txPointer}`,\n        witnessIndex: Number(input.coinWitnessIndex),\n        predicate: input.predicate,\n        predicateData: input.predicateData,\n        predicateGasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed)\n      };\n      break;\n    case \"InputMessage\":\n      parsedInput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message,\n        nonce: input.nonce,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.amount),\n        recipient: input.recipient,\n        sender: input.sender,\n        data: input.data,\n        witnessIndex: Number(input.messageWitnessIndex),\n        predicate: input.predicate,\n        predicateData: input.predicateData,\n        predicateGasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed)\n      };\n      break;\n    case \"InputContract\":\n      parsedInput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract,\n        contractId: input.contractId,\n        txPointer: `0x${input.txPointer}`,\n        txID: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(input.utxoId).slice(0, 32))\n      };\n      break;\n    default:\n      (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.assertUnreachable)(input);\n  }\n  return parsedInput;\n}, \"deserializeInput\");\nvar deserializeOutput = /* @__PURE__ */ __name((output) => {\n  let parsedOutput;\n  switch (output.type) {\n    case \"CoinOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(output.amount),\n        assetId: output.assetId,\n        to: output.to\n      };\n      break;\n    case \"ContractOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n        inputIndex: Number(output.inputIndex)\n      };\n      break;\n    case \"ChangeOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change,\n        assetId: output.assetId,\n        to: output.to\n      };\n      break;\n    case \"ContractCreated\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n        stateRoot: output.stateRoot,\n        contractId: output.contract\n      };\n      break;\n    case \"VariableOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(output.amount),\n        assetId: output.assetId,\n        to: output.to\n      };\n      break;\n    default:\n      (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.assertUnreachable)(output);\n  }\n  return parsedOutput;\n}, \"deserializeOutput\");\nvar deserializeProcessedTxOutput = /* @__PURE__ */ __name((output) => {\n  let parsedOutput;\n  switch (output.type) {\n    case \"CoinOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(output.amount),\n        assetId: output.assetId,\n        to: output.to\n      };\n      break;\n    case \"ContractOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n        inputIndex: Number(output.inputIndex),\n        balanceRoot: output.balanceRoot,\n        stateRoot: output.stateRoot\n      };\n      break;\n    case \"ChangeOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change,\n        assetId: output.assetId,\n        to: output.to,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(output.amount)\n      };\n      break;\n    case \"ContractCreated\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n        stateRoot: output.stateRoot,\n        contractId: output.contract\n      };\n      break;\n    case \"VariableOutput\":\n      parsedOutput = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(output.amount),\n        assetId: output.assetId,\n        to: output.to\n      };\n      break;\n    default:\n      (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.assertUnreachable)(output);\n  }\n  return parsedOutput;\n}, \"deserializeProcessedTxOutput\");\n\n// src/providers/utils/receipts.ts\nvar doesReceiptHaveMissingOutputVariables = /* @__PURE__ */ __name((receipt) => receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert && receipt.val.toString(\"hex\") === _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_TRANSFER_TO_ADDRESS_SIGNAL, \"doesReceiptHaveMissingOutputVariables\");\nvar doesReceiptHaveMissingContractId = /* @__PURE__ */ __name((receipt) => receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Panic && receipt.contractId !== \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"doesReceiptHaveMissingContractId\");\nvar getReceiptsWithMissingData = /* @__PURE__ */ __name((receipts) => receipts.reduce(\n  (memo, receipt) => {\n    if (doesReceiptHaveMissingOutputVariables(receipt)) {\n      memo.missingOutputVariables.push(receipt);\n    }\n    if (doesReceiptHaveMissingContractId(receipt)) {\n      memo.missingOutputContractIds.push(receipt);\n    }\n    return memo;\n  },\n  {\n    missingOutputVariables: [],\n    missingOutputContractIds: []\n  }\n), \"getReceiptsWithMissingData\");\nvar assembleReceiptByType = /* @__PURE__ */ __name((gqlReceipt) => deserializeReceipt(gqlReceipt), \"assembleReceiptByType\");\n\n// src/providers/utils/block-explorer.ts\n\nvar DEFAULT_BLOCK_EXPLORER_URL = \"https://app.fuel.network\";\nvar getPathFromInput = /* @__PURE__ */ __name((key, value) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n}, \"getPathFromInput\");\nvar buildBlockExplorerUrl = /* @__PURE__ */ __name((options = {}) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n  const customInputParams = [\n    {\n      key: \"address\",\n      value: address\n    },\n    {\n      key: \"txId\",\n      value: txId\n    },\n    {\n      key: \"blockNumber\",\n      value: blockNumber\n    }\n  ];\n  const definedValues = customInputParams.filter((param) => !!param.value).map(({ key, value }) => ({\n    key,\n    value\n  }));\n  const hasAnyDefinedValues = definedValues.length > 0;\n  if (definedValues.length > 1) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams.map((param) => param.key).join(\", \")}.`\n    );\n  }\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(\", \");\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n  const pathGeneratedFromInputParams = hasAnyDefinedValues ? getPathFromInput(\n    definedValues[0].key,\n    definedValues[0].value\n  ) : \"\";\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, \"\") : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, \"\");\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, \"\");\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : void 0;\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? \"\" : \"https://\";\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? \"\" : \"https://\";\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : \"\"}`;\n  return url;\n}, \"buildBlockExplorerUrl\");\n\n// src/providers/utils/gas.ts\n\n\n\nvar getGasUsedFromReceipts = /* @__PURE__ */ __name((receipts) => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.ScriptResult\n  );\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0));\n  return gasUsed;\n}, \"getGasUsedFromReceipts\");\nfunction resolveGasDependentCosts(byteSize, gasDependentCost) {\n  const base = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasDependentCost.base);\n  let dependentValue = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  if (\"unitsPerGas\" in gasDependentCost) {\n    dependentValue = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(byteSize).div((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasDependentCost.unitsPerGas));\n  } else {\n    dependentValue = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(byteSize).mul((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasDependentCost.gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\n__name(resolveGasDependentCosts, \"resolveGasDependentCosts\");\nfunction gasUsedByInputs(inputs, txBytesSize, gasCosts) {\n  const witnessCache = [];\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = \"owner\" in input || \"sender\" in input;\n    if (isCoinOrMessage) {\n      if (\"predicate\" in input && input.predicate && input.predicate !== \"0x\") {\n        return true;\n      }\n      if (!witnessCache.includes(input.witnessIndex)) {\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if (\"predicate\" in input && input.predicate && input.predicate !== \"0x\") {\n      return total.add(\n        vmInitializationCost.add(resolveGasDependentCosts((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(input.predicate).length, gasCosts.contractRoot)).add((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed))\n      );\n    }\n    return total.add(gasCosts.ecr1);\n  }, (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0));\n  return totalGas;\n}\n__name(gasUsedByInputs, \"gasUsedByInputs\");\nfunction getMinGas(params) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n  return minGas;\n}\n__name(getMinGas, \"getMinGas\");\nfunction getMaxGas(params) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0),\n    maxGasPerTx\n  } = params;\n  let remainingAllowedWitnessGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\n__name(getMaxGas, \"getMaxGas\");\nfunction calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const contractIdInputSize = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\n__name(calculateMetadataGasForTxCreate, \"calculateMetadataGasForTxCreate\");\nfunction calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\n__name(calculateMetadataGasForTxScript, \"calculateMetadataGasForTxScript\");\nfunction calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\n__name(calculateMetadataGasForTxBlob, \"calculateMetadataGasForTxBlob\");\nfunction calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n  return txId;\n}\n__name(calculateMetadataGasForTxUpgrade, \"calculateMetadataGasForTxUpgrade\");\nfunction calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n  return txId;\n}\n__name(calculateMetadataGasForTxUpload, \"calculateMetadataGasForTxUpload\");\nfunction calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize\n}) {\n  const additionalStoragePerByte = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(baseMinGas).add(additionalStoragePerByte);\n}\n__name(calculateMinGasForTxUpload, \"calculateMinGasForTxUpload\");\nvar calculateGasFee = /* @__PURE__ */ __name((params) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip));\n}, \"calculateGasFee\");\n\n// src/providers/utils/json.ts\n\n\nfunction normalize(object) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case \"Uint8Array\":\n        object[key] = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(object[key]);\n        break;\n      case \"Array\":\n        object[key] = normalize(object[key]);\n        break;\n      case \"BN\":\n        object[key] = object[key].toHex();\n        break;\n      case \"Address\":\n        object[key] = object[key].toB256();\n        break;\n      case \"Object\":\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\n__name(normalize, \"normalize\");\nfunction normalizeJSON(root) {\n  return normalize((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(root));\n}\n__name(normalizeJSON, \"normalizeJSON\");\n\n// src/providers/utils/extract-tx-error.ts\n\n\n\n\nvar assemblePanicError = /* @__PURE__ */ __name((statusReason, metadata) => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n  if (_fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\n\nYou can read more about this error at:\n\n${_fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason\n  });\n}, \"assemblePanicError\");\nvar stringify = /* @__PURE__ */ __name((obj) => JSON.stringify(obj, null, 2), \"stringify\");\nvar assembleRevertError = /* @__PURE__ */ __name((receipts, logs, metadata) => {\n  let errorMessage = \"The transaction reverted with an unknown reason.\";\n  const revertReceipt = receipts.find(({ type }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert);\n  let reason = \"\";\n  if (revertReceipt) {\n    const reasonHex = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n    switch (reasonHex) {\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_REQUIRE_SIGNAL: {\n        reason = \"require\";\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${logs.length ? stringify(lastLog) : \"an error.\"}.`;\n        break;\n      }\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_ASSERT_EQ_SIGNAL: {\n        const suffix = logs.length >= 2 ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.` : \".\";\n        reason = \"assert_eq\";\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${suffix}`;\n        break;\n      }\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_ASSERT_NE_SIGNAL: {\n        const suffix = logs.length >= 2 ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.` : \".\";\n        reason = \"assert_ne\";\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${suffix}`;\n        break;\n      }\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_ASSERT_SIGNAL:\n        reason = \"assert\";\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_TRANSFER_TO_ADDRESS_SIGNAL:\n        reason = \"MissingOutputVariable\";\n        errorMessage = `The transaction reverted because it's missing an \"OutputVariable\".`;\n        break;\n      default:\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: \"unknown\"\n          }\n        );\n    }\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason\n  });\n}, \"assembleRevertError\");\nvar extractTxError = /* @__PURE__ */ __name((params) => {\n  const { receipts, statusReason, logs, groupedLogs } = params;\n  const isPanic = receipts.some(({ type }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Panic);\n  const isRevert = receipts.some(({ type }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert);\n  const metadata = {\n    logs,\n    groupedLogs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: \"\"\n  };\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n}, \"extractTxError\");\n\n// src/providers/utils/merge-quantities.ts\nvar mergeQuantities = /* @__PURE__ */ __name((...coinQuantities) => {\n  const resultMap = {};\n  function addToMap({ amount, assetId }) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n  __name(addToMap, \"addToMap\");\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n}, \"mergeQuantities\");\n\n// src/providers/transaction-request/errors.ts\nvar ChangeOutputCollisionError = class extends Error {\n  static {\n    __name(this, \"ChangeOutputCollisionError\");\n  }\n  name = \"ChangeOutputCollisionError\";\n  message = 'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n};\nvar NoWitnessAtIndexError = class extends Error {\n  constructor(index) {\n    super();\n    this.index = index;\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n  static {\n    __name(this, \"NoWitnessAtIndexError\");\n  }\n  name = \"NoWitnessAtIndexError\";\n};\nvar NoWitnessByOwnerError = class extends Error {\n  constructor(owner) {\n    super();\n    this.owner = owner;\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n  static {\n    __name(this, \"NoWitnessByOwnerError\");\n  }\n  name = \"NoWitnessByOwnerError\";\n};\n\n// src/providers/transaction-request/helpers.ts\n\n\n\n\nvar isRequestInputCoin = /* @__PURE__ */ __name((input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin, \"isRequestInputCoin\");\nvar isRequestInputMessage = /* @__PURE__ */ __name((input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message, \"isRequestInputMessage\");\nvar isRequestInputMessageWithoutData = /* @__PURE__ */ __name((input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.data).isZero(), \"isRequestInputMessageWithoutData\");\nvar isRequestInputCoinOrMessage = /* @__PURE__ */ __name((input) => isRequestInputCoin(input) || isRequestInputMessage(input), \"isRequestInputCoinOrMessage\");\nvar isRequestInputResource = /* @__PURE__ */ __name((input) => isRequestInputCoin(input) || isRequestInputMessageWithoutData(input), \"isRequestInputResource\");\nvar getRequestInputResourceOwner = /* @__PURE__ */ __name((input) => isRequestInputCoin(input) ? input.owner : input.recipient, \"getRequestInputResourceOwner\");\nvar isRequestInputResourceFromOwner = /* @__PURE__ */ __name((input, owner) => getRequestInputResourceOwner(input) === owner.toB256(), \"isRequestInputResourceFromOwner\");\nvar isPredicate = /* @__PURE__ */ __name((input) => isRequestInputCoinOrMessage(input) && !!input.predicate && (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.predicate) !== \"0x\", \"isPredicate\");\nvar getAssetAmountInRequestInputs = /* @__PURE__ */ __name((inputs, assetId, baseAsset) => inputs.filter(isRequestInputResource).reduce((acc, input) => {\n  if (isRequestInputCoin(input) && input.assetId === assetId) {\n    return acc.add(input.amount);\n  }\n  if (isRequestInputMessage(input) && assetId === baseAsset) {\n    return acc.add(input.amount);\n  }\n  return acc;\n}, (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0)), \"getAssetAmountInRequestInputs\");\nvar cacheRequestInputsResources = /* @__PURE__ */ __name((inputs) => inputs.filter(isRequestInputResource).reduce(\n  (cache2, input) => {\n    if (isRequestInputCoin(input)) {\n      cache2.utxos.push(input.id);\n    } else {\n      cache2.messages.push(input.nonce);\n    }\n    return cache2;\n  },\n  {\n    utxos: [],\n    messages: []\n  }\n), \"cacheRequestInputsResources\");\nvar cacheRequestInputsResourcesFromOwner = /* @__PURE__ */ __name((inputs, owner) => inputs.reduce(\n  (acc, input) => {\n    if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n      acc.utxos.push(input.id);\n    } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n      acc.messages.push(input.nonce);\n    }\n    return acc;\n  },\n  {\n    utxos: [],\n    messages: []\n  }\n), \"cacheRequestInputsResourcesFromOwner\");\nvar getBurnableAssetCount = /* @__PURE__ */ __name((baseAssetId, transactionRequest) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  if (inputs.some((i) => isRequestInputMessage(i) && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n}, \"getBurnableAssetCount\");\nvar validateTransactionForAssetBurn = /* @__PURE__ */ __name((baseAssetId, transactionRequest, enableAssetBurn = false) => {\n  if (enableAssetBurn === true) {\n    return;\n  }\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n  const message = [\n    \"Asset burn detected.\",\n    \"Add the relevant change outputs to the transaction to avoid burning assets.\",\n    \"Or enable asset burn, upon sending the transaction.\"\n  ].join(\"\\n\");\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ASSET_BURN_DETECTED, message);\n}, \"validateTransactionForAssetBurn\");\n\n// src/providers/transaction-request/witness.ts\n\nvar witnessify = /* @__PURE__ */ __name((value) => {\n  const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value);\n  return {\n    data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data),\n    dataLength: data.length\n  };\n}, \"witnessify\");\n\n// src/providers/transaction-request/transaction-request.ts\nvar BaseTransactionRequest = class _BaseTransactionRequest {\n  static {\n    __name(this, \"BaseTransactionRequest\");\n  }\n  /** Gas price for transaction */\n  tip;\n  /** Block until which tx cannot be included */\n  maturity;\n  /** The block number after which the transaction is no longer valid. */\n  expiration;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit;\n  /** List of inputs */\n  inputs = [];\n  /** List of outputs */\n  outputs = [];\n  /** List of witnesses */\n  witnesses = [];\n  /**\n   * The current status of the transaction\n   */\n  flag = { state: void 0, transactionId: void 0, summary: void 0 };\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    expiration,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses,\n    flag\n  } = {}) {\n    this.tip = tip ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip) : void 0;\n    this.maturity = maturity && maturity > 0 ? maturity : void 0;\n    this.expiration = expiration && expiration > 0 ? expiration : void 0;\n    this.witnessLimit = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(witnessLimit) ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit) : void 0;\n    this.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n    this.flag = flag ?? { state: void 0, transactionId: void 0, summary: void 0 };\n  }\n  static getPolicyMeta(req) {\n    let policyTypes = 0;\n    const policies = [];\n    const { tip, witnessLimit, maturity, expiration } = req;\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip).gt(0)) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip;\n      policies.push({ data: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip), type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip });\n    }\n    if ((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(witnessLimit) && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit).gte(0)) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.WitnessLimit;\n      policies.push({ data: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit), type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Maturity;\n      policies.push({ data: maturity, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Maturity });\n    }\n    policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.MaxFee });\n    if (expiration && expiration > 0) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Expiration;\n      policies.push({ data: expiration, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Expiration });\n    }\n    return {\n      policyTypes,\n      policies\n    };\n  }\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n  getBaseTransaction() {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n    const { policyTypes, policies } = _BaseTransactionRequest.getPolicyMeta(this);\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length\n    };\n  }\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes() {\n    return new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().encode(this.toTransaction());\n  }\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  pushInput(input) {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  pushOutput(output) {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness() {\n    return this.addWitness((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([_fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32, _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32]));\n  }\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address, signature) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === \"number\") {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index, witness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(this));\n      })\n    );\n    return this;\n  }\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs() {\n    return this.inputs.filter(\n      (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin\n    );\n  }\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin\n    );\n  }\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change\n    );\n  }\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner) {\n    const ownerAddress = (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(owner);\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin:\n          return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.owner) === ownerAddress.toB256();\n        case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message:\n          return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.recipient) === ownerAddress.toB256();\n        default:\n          return false;\n      }\n    });\n    return found?.witnessIndex;\n  }\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n    let witnessIndex;\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n      if (typeof witnessIndex !== \"number\") {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n    const input = {\n      id,\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: \"0x00000000000000000000000000000000\",\n      witnessIndex,\n      predicate,\n      predicateData\n    };\n    this.pushInput(input);\n    this.addChangeOutput(owner, assetId);\n  }\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n    let witnessIndex;\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n      if (typeof witnessIndex !== \"number\") {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n    const input = {\n      nonce,\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? \"0x\" : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData\n    };\n    this.pushInput(input);\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n    return this;\n  }\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources) {\n    resources.forEach((resource) => this.addResource(resource));\n    return this;\n  }\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to, amount, assetId) {\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n      to: (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(to).toB256(),\n      amount,\n      assetId\n    });\n    return this;\n  }\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to, quantities) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n        to: (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId\n      });\n    });\n    return this;\n  }\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to, assetId) {\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(output.assetId) === assetId\n    );\n    if (!changeOutput) {\n      this.pushOutput({\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change,\n        to: (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(to).toB256(),\n        assetId\n      });\n    }\n  }\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Not implemented\");\n  }\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo) {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte }\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts)\n    });\n  }\n  calculateMaxGas(chainInfo, minGas) {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx }\n    } = consensusParameters;\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx\n    });\n  }\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities, baseAssetId, resourcesOwner) {\n    const findAssetInput = /* @__PURE__ */ __name((assetId) => this.inputs.find((input) => {\n      if (\"assetId\" in input) {\n        return input.assetId === assetId;\n      }\n      return false;\n    }), \"findAssetInput\");\n    const updateAssetInput = /* @__PURE__ */ __name((assetId, quantity) => {\n      const assetInput = findAssetInput(assetId);\n      let usedQuantity = quantity;\n      if (assetId === baseAssetId) {\n        usedQuantity = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(\"1000000000000000000\");\n      }\n      if (assetInput && \"assetId\" in assetInput) {\n        assetInput.id = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address.fromRandom(),\n            blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1),\n            txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1)\n          }\n        ]);\n      }\n    }, \"updateAssetInput\");\n    updateAssetInput(baseAssetId, (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1e11));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n    return this;\n  }\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities() {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount),\n      assetId: assetId.toString()\n    }));\n    return coinsQuantities;\n  }\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n  removeWitness(index) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n  adjustWitnessIndexes(removedIndex) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n  updatePredicateGasUsed(inputs) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find(\n        (x) => isRequestInputResourceFromOwner(x, new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(String(owner)))\n      );\n      if (correspondingInput && \"predicateGasUsed\" in correspondingInput && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(correspondingInput.predicateGasUsed).gt(0)) {\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n  byteLength() {\n    return this.toTransactionBytes().byteLength;\n  }\n  /**\n   * @hidden\n   *\n   * Used internally to update the state of a transaction request.\n   *\n   * @param state - The state to update.\n   */\n  updateState(chainId, state, summary) {\n    if (!state) {\n      this.flag = { state: void 0, transactionId: void 0, summary: void 0 };\n      return;\n    }\n    const transactionId = this.getTransactionId(chainId);\n    this.flag = { state, transactionId, summary };\n  }\n};\n\n// src/providers/transaction-request/blob-transaction-request.ts\n\n\n// src/providers/transaction-request/hash-transaction.ts\n\n\n\n\n\n\nfunction hashTransaction(transactionRequest, chainId) {\n  const transaction = transactionRequest.toTransaction();\n  if (transaction.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script) {\n    transaction.receiptsRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n  }\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(input);\n    switch (inputClone.type) {\n      // Zero out on signing: txPointer, predicateGasUsed\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0\n        };\n        inputClone.predicateGasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        return inputClone;\n      }\n      // Zero out on signing: predicateGasUsed\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message: {\n        inputClone.predicateGasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txPointer\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0\n        };\n        inputClone.txID = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        inputClone.stateRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(output);\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract: {\n        outputClone.balanceRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        outputClone.stateRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change: {\n        outputClone.amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable: {\n        outputClone.to = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        outputClone.amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        outputClone.assetId = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n  const chainIdBytes = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.uint64ToBytesBE)(chainId);\n  const concatenatedData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([chainIdBytes, new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().encode(transaction)]);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(concatenatedData);\n}\n__name(hashTransaction, \"hashTransaction\");\n\n// src/providers/transaction-request/blob-transaction-request.ts\nvar BlobTransactionRequest = class extends BaseTransactionRequest {\n  static {\n    __name(this, \"BlobTransactionRequest\");\n  }\n  static from(obj) {\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob;\n  /** Blob ID */\n  blobId;\n  /** Witness index of the bytecode to create */\n  witnessIndex;\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex\n    };\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length\n    });\n  }\n};\n\n// src/providers/transaction-request/create-transaction-request.ts\n\n\n\n\n\n\n// src/providers/transaction-request/storage-slot.ts\n\nvar getStorageValue = /* @__PURE__ */ __name((value) => {\n  const v = new Uint8Array(32);\n  v.set((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value));\n  return v;\n}, \"getStorageValue\");\nvar storageSlotify = /* @__PURE__ */ __name((storageSlot) => {\n  let key;\n  let value;\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n  return {\n    key: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(key),\n    value: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(getStorageValue(value))\n  };\n}, \"storageSlotify\");\n\n// src/providers/transaction-request/create-transaction-request.ts\nvar CreateTransactionRequest = class extends BaseTransactionRequest {\n  static {\n    __name(this, \"CreateTransactionRequest\");\n  }\n  static from(obj) {\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex;\n  /** Salt */\n  salt;\n  /** List of storage slots to initialize */\n  storageSlots;\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(salt ?? _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32);\n    this.storageSlots = [...storageSlots ?? []];\n  }\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(storageSlots.length),\n      salt: this.salt ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.salt) : _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n      storageSlots\n    };\n  }\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated\n    );\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(contractId, stateRoot) {\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n      contractId,\n      stateRoot\n    });\n  }\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.witnesses[this.bytecodeWitnessIndex] || \"0x\").length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize()\n    });\n  }\n};\n\n// src/providers/transaction-request/script-transaction-request.ts\n\n\n\n\n\n\n\n\n// src/providers/transaction-request/scripts.ts\n\nvar returnZeroScript = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\"0x24000000\"),\n  encodeScriptData: /* @__PURE__ */ __name(() => new Uint8Array(0), \"encodeScriptData\")\n};\nvar withdrawScript = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\"0x5040C0105D44C0064C40001124000000\"),\n  encodeScriptData: /* @__PURE__ */ __name(() => new Uint8Array(0), \"encodeScriptData\")\n};\n\n// src/providers/transaction-request/script-transaction-request.ts\nvar ScriptTransactionRequest = class extends BaseTransactionRequest {\n  static {\n    __name(this, \"ScriptTransactionRequest\");\n  }\n  static from(obj) {\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script;\n  /** Gas limit for transaction */\n  gasLimit;\n  /** Script to execute */\n  script;\n  /** Script input data (parameters) */\n  scriptData;\n  abis;\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest } = {}) {\n    super(rest);\n    this.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasLimit);\n    this.script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(script ?? returnZeroScript.bytes);\n    this.scriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   *\n   * @deprecated Use `provider.assembleTx` instead.\n   * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.\n   */\n  async estimateAndFund(account, { signatureCallback, quantities = [] } = {}) {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n    await account.fund(this, txCost);\n    return this;\n  }\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction() {\n    const script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.script ?? \"0x\");\n    const scriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.scriptData ?? \"0x\");\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(script.length),\n      scriptDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(scriptData.length),\n      receiptsRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n      script: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(script),\n      scriptData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(scriptData)\n    };\n  }\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs() {\n    return this.inputs.filter(\n      (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract\n    );\n  }\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract\n    );\n  }\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable\n    );\n  }\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript(script, data) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables = 1) {\n    let outputsNumber = numberOfVariables;\n    while (outputsNumber) {\n      this.pushOutput({\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable\n      });\n      outputsNumber -= 1;\n    }\n    return this.outputs.length - 1;\n  }\n  /**\n   * Adds a variable output to the transaction request.\n   *\n   * @param to - The recipient address as a BytesLike object. Defaults to ZeroBytes32 if not provided.\n   * @param amount - The amount to be transferred as a BigNumberish object. Defaults to 0 if not provided.\n   * @param assetId - The asset ID as a BytesLike object. Defaults to ZeroBytes32 if not provided.\n   */\n  addVariableOutput(to, amount, assetId) {\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable,\n      to,\n      amount,\n      assetId\n    });\n  }\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  calculateMaxGas(chainInfo, minGas) {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx }\n    } = consensusParameters;\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx\n    });\n  }\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract) {\n    const contractAddress = (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(contract);\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n    const inputIndex = super.pushInput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: \"0x00000000000000000000000000000000\"\n    });\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n      inputIndex\n    });\n    return this;\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi, args) {\n    const abiInterface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize()\n    });\n  }\n};\n\n// src/providers/transaction-request/upgrade-transaction-request.ts\n\n\n\n\n\nvar UpgradeTransactionRequest = class _UpgradeTransactionRequest extends BaseTransactionRequest {\n  static {\n    __name(this, \"UpgradeTransactionRequest\");\n  }\n  static from(obj) {\n    if (obj instanceof _UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** The type of transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade;\n  /** The upgrade purpose */\n  upgradePurpose;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex;\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  } = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: \"0x\"\n    };\n  }\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hash)(consensus)\n    };\n    return this;\n  }\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot) {\n    this.upgradePurpose = {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition,\n      data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytecodeRoot)\n    };\n    return this;\n  }\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type, data) {\n    if (type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n    if (type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n    return this;\n  }\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    let upgradePurpose;\n    if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum\n        }\n      };\n    } else if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.upgradePurpose.data)\n        }\n      };\n    } else {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Invalid upgrade purpose\");\n    }\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose\n    };\n  }\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  metadataGas(gasCosts) {\n    const txBytesSize = this.byteSize();\n    if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize\n      });\n    }\n    if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize\n      });\n    }\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Invalid upgrade purpose\");\n  }\n};\n\n// src/providers/transaction-request/upload-transaction-request.ts\n\n\n\n\nvar UploadTransactionRequest = class _UploadTransactionRequest extends BaseTransactionRequest {\n  static {\n    __name(this, \"UploadTransactionRequest\");\n  }\n  static from(obj) {\n    if (obj instanceof _UploadTransactionRequest) {\n      return obj;\n    }\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex;\n  /** The subsection data. */\n  subsection;\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest } = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n      subsectionIndex: 0,\n      subsectionsNumber: 0\n    };\n  }\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(root),\n      proofSet: proofSet.map(_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length\n    };\n  }\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber\n    });\n  }\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  calculateMinGas(chainInfo) {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode).length\n    });\n  }\n};\n\n// src/providers/transaction-request/types.ts\nvar AbstractScriptRequest = class {\n  static {\n    __name(this, \"AbstractScriptRequest\");\n  }\n};\n\n// src/providers/transaction-request/utils.ts\n\n\nvar transactionRequestify = /* @__PURE__ */ __name((obj) => {\n  if (obj instanceof ScriptTransactionRequest || obj instanceof CreateTransactionRequest || obj instanceof BlobTransactionRequest || obj instanceof UpgradeTransactionRequest || obj instanceof UploadTransactionRequest) {\n    return obj;\n  }\n  const { type } = obj;\n  switch (obj.type) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n}, \"transactionRequestify\");\nvar isTransactionTypeScript = /* @__PURE__ */ __name((request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script, \"isTransactionTypeScript\");\nvar isTransactionTypeCreate = /* @__PURE__ */ __name((request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create, \"isTransactionTypeCreate\");\nvar isTransactionTypeBlob = /* @__PURE__ */ __name((request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob, \"isTransactionTypeBlob\");\nvar isTransactionTypeUpgrade = /* @__PURE__ */ __name((request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade, \"isTransactionTypeUpgrade\");\nvar isTransactionTypeUpload = /* @__PURE__ */ __name((request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload, \"isTransactionTypeUpload\");\n\n// src/providers/resource-cache.ts\nvar cache = /* @__PURE__ */ new Map();\nvar ResourceCache = class {\n  static {\n    __name(this, \"ResourceCache\");\n  }\n  ttl;\n  constructor(ttl) {\n    this.ttl = ttl;\n    if (typeof ttl !== \"number\" || this.ttl <= 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n  // Add resources to the cache\n  set(transactionId, inputs) {\n    const transactionResourceCache = this.setupResourcesCache(inputs);\n    cache.set(transactionId, transactionResourceCache);\n  }\n  unset(transactionId) {\n    cache.delete(transactionId);\n  }\n  getActiveData(owner) {\n    const activeData = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    const expired = [];\n    cache.forEach((resource, transactionId) => {\n      const isActive = currentTime - resource.timestamp < this.ttl;\n      if (isActive) {\n        const resourcesFromOwner = resource.owners.get(owner);\n        if (resourcesFromOwner) {\n          activeData.utxos.push(...resourcesFromOwner.utxos);\n          activeData.messages.push(...resourcesFromOwner.messages);\n        }\n      } else {\n        expired.push(transactionId);\n      }\n    });\n    expired.forEach(this.unset);\n    activeData.utxos.reverse();\n    activeData.messages.reverse();\n    return activeData;\n  }\n  isCached(owner, key) {\n    const currentTime = Date.now();\n    let cached = false;\n    const expired = [];\n    for (const [transactionId, resourceData] of cache.entries()) {\n      const isActive = currentTime - resourceData.timestamp < this.ttl;\n      if (isActive) {\n        const resourcesFromOwner = resourceData.owners.get(owner);\n        if (resourcesFromOwner?.utxos.has(key) || resourcesFromOwner?.messages.has(key)) {\n          cached = true;\n          break;\n        }\n      } else {\n        expired.push(transactionId);\n      }\n    }\n    expired.forEach(this.unset);\n    return cached;\n  }\n  clear() {\n    cache.clear();\n  }\n  setupResourcesCache(inputs) {\n    const currentTime = Date.now();\n    const transactionResourcesCache = {\n      owners: /* @__PURE__ */ new Map(),\n      timestamp: currentTime\n    };\n    inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      const { owner, key, type } = this.extractResourceData(input);\n      if (!transactionResourcesCache.owners.has(owner)) {\n        transactionResourcesCache.owners.set(owner, { utxos: /* @__PURE__ */ new Set(), messages: /* @__PURE__ */ new Set() });\n      }\n      if (type === \"utxo\") {\n        transactionResourcesCache.owners.get(owner)?.utxos.add(key);\n      } else {\n        transactionResourcesCache.owners.get(owner)?.messages.add(key);\n      }\n    });\n    return transactionResourcesCache;\n  }\n  extractResourceData(input) {\n    if (isRequestInputCoin(input)) {\n      return { owner: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.owner), key: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.id), type: \"utxo\" };\n    }\n    return { owner: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.recipient), key: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.nonce), type: \"message\" };\n  }\n};\n\n// src/providers/transaction-response/transaction-response.ts\n\n\n\n\n\n// src/providers/transaction-summary/assemble-transaction-summary.ts\n\n\n\n\n// src/providers/transaction-summary/calculate-tx-fee-for-summary.ts\n\n\n\nvar calculateTXFeeForSummary = /* @__PURE__ */ __name((params) => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx }\n  } = params;\n  const gasPerByte = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPerByte);\n  const gasPriceFactor = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPriceFactor);\n  const transactionBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload);\n  const [transaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(transactionBytes, 0);\n  const { type, witnesses, inputs, policies } = transaction;\n  let metadataGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  let gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  if (type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create && type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script) {\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  }\n  if (type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction;\n    const contractBytesSize = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(witnesses[bytecodeWitnessIndex].data).length);\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length\n    });\n  }\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length\n  });\n  const witnessLimit = policies.find((policy) => policy.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.WitnessLimit)?.data;\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx\n  });\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip\n  });\n  return maxFee;\n}, \"calculateTXFeeForSummary\");\n\n// src/providers/transaction-summary/operations.ts\n\n\n\n\n\n// src/providers/transaction-summary/input.ts\n\n\n\nfunction getInputsByTypes(inputs, types) {\n  return inputs.filter((i) => types.includes(i.type));\n}\n__name(getInputsByTypes, \"getInputsByTypes\");\nfunction getInputsByType(inputs, type) {\n  return inputs.filter((i) => i.type === type);\n}\n__name(getInputsByType, \"getInputsByType\");\nfunction getInputsCoin(inputs) {\n  return getInputsByType(inputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin);\n}\n__name(getInputsCoin, \"getInputsCoin\");\nfunction getInputsMessage(inputs) {\n  return getInputsByType(inputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message);\n}\n__name(getInputsMessage, \"getInputsMessage\");\nfunction getInputsCoinAndMessage(inputs) {\n  return getInputsByTypes(inputs, [_fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message]);\n}\n__name(getInputsCoinAndMessage, \"getInputsCoinAndMessage\");\nfunction isInputCoin(input) {\n  return input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin;\n}\n__name(isInputCoin, \"isInputCoin\");\nfunction getInputsContract(inputs) {\n  return getInputsByType(inputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract);\n}\n__name(getInputsContract, \"getInputsContract\");\nfunction findCoinInput(inputs, assetId) {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\n__name(findCoinInput, \"findCoinInput\");\nfunction aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId) {\n  const aggregated = /* @__PURE__ */ new Map();\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = /* @__PURE__ */ new Map();\n      aggregated.set(assetId, ownersMap);\n    }\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new _fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n  return aggregated;\n}\n__name(aggregateInputsAmountsByAssetAndOwner, \"aggregateInputsAmountsByAssetAndOwner\");\nfunction findMessageInput(inputs) {\n  return getInputsMessage(inputs)?.[0];\n}\n__name(findMessageInput, \"findMessageInput\");\nfunction getInputFromAssetId(inputs, assetId, isBaseAsset = false) {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n  return void 0;\n}\n__name(getInputFromAssetId, \"getInputFromAssetId\");\nfunction getInputContractFromIndex(inputs, inputIndex) {\n  if (inputIndex == null) {\n    return void 0;\n  }\n  const contractInput = inputs?.[inputIndex];\n  if (!contractInput) {\n    return void 0;\n  }\n  if (contractInput.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n  return contractInput;\n}\n__name(getInputContractFromIndex, \"getInputContractFromIndex\");\nfunction getInputAccountAddress(input) {\n  if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin) {\n    return input.owner.toString();\n  }\n  if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message) {\n    return input.recipient.toString();\n  }\n  return \"\";\n}\n__name(getInputAccountAddress, \"getInputAccountAddress\");\n\n// src/providers/transaction-summary/output.ts\n\nfunction getOutputsByType(outputs, type) {\n  return outputs.filter((o) => o.type === type);\n}\n__name(getOutputsByType, \"getOutputsByType\");\nfunction getOutputsContractCreated(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated);\n}\n__name(getOutputsContractCreated, \"getOutputsContractCreated\");\nfunction getOutputsCoin(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin);\n}\n__name(getOutputsCoin, \"getOutputsCoin\");\nfunction getOutputsChange(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change);\n}\n__name(getOutputsChange, \"getOutputsChange\");\nfunction getOutputsContract(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract);\n}\n__name(getOutputsContract, \"getOutputsContract\");\nfunction getOutputsVariable(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable);\n}\n__name(getOutputsVariable, \"getOutputsVariable\");\n\n// src/providers/transaction-summary/types.ts\nvar TransactionTypeName = /* @__PURE__ */ ((TransactionTypeName2) => {\n  TransactionTypeName2[\"Create\"] = \"Create\";\n  TransactionTypeName2[\"Mint\"] = \"Mint\";\n  TransactionTypeName2[\"Script\"] = \"Script\";\n  TransactionTypeName2[\"Upgrade\"] = \"Upgrade\";\n  TransactionTypeName2[\"Upload\"] = \"Upload\";\n  TransactionTypeName2[\"Blob\"] = \"Blob\";\n  return TransactionTypeName2;\n})(TransactionTypeName || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"submitted\"] = \"submitted\";\n  TransactionStatus2[\"success\"] = \"success\";\n  TransactionStatus2[\"squeezedout\"] = \"squeezedout\";\n  TransactionStatus2[\"failure\"] = \"failure\";\n  TransactionStatus2[\"preconfirmationSuccess\"] = \"preconfirmationSuccess\";\n  TransactionStatus2[\"preconfirmationFailure\"] = \"preconfirmationFailure\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar OperationName = /* @__PURE__ */ ((OperationName2) => {\n  OperationName2[\"payBlockProducer\"] = \"Pay network fee to block producer\";\n  OperationName2[\"contractCreated\"] = \"Contract created\";\n  OperationName2[\"transfer\"] = \"Transfer asset\";\n  OperationName2[\"contractCall\"] = \"Contract call\";\n  OperationName2[\"receive\"] = \"Receive asset\";\n  OperationName2[\"withdrawFromFuel\"] = \"Withdraw from Fuel\";\n  return OperationName2;\n})(OperationName || {});\nvar AddressType = /* @__PURE__ */ ((AddressType2) => {\n  AddressType2[AddressType2[\"contract\"] = 0] = \"contract\";\n  AddressType2[AddressType2[\"account\"] = 1] = \"account\";\n  return AddressType2;\n})(AddressType || {});\nvar ChainName = /* @__PURE__ */ ((ChainName2) => {\n  ChainName2[\"ethereum\"] = \"ethereum\";\n  ChainName2[\"fuel\"] = \"fuel\";\n  return ChainName2;\n})(ChainName || {});\n\n// src/providers/transaction-summary/operations.ts\nfunction getReceiptsByType(receipts, type) {\n  return (receipts ?? []).filter((r) => r.type === type);\n}\n__name(getReceiptsByType, \"getReceiptsByType\");\nfunction getTransactionTypeName(transactionType) {\n  switch (transactionType) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Mint:\n      return \"Mint\" /* Mint */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create:\n      return \"Create\" /* Create */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script:\n      return \"Script\" /* Script */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob:\n      return \"Blob\" /* Blob */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade:\n      return \"Upgrade\" /* Upgrade */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload:\n      return \"Upload\" /* Upload */;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\n__name(getTransactionTypeName, \"getTransactionTypeName\");\nfunction isType(transactionType, type) {\n  const txType = getTransactionTypeName(transactionType);\n  return txType === type;\n}\n__name(isType, \"isType\");\nfunction isTypeMint(transactionType) {\n  return isType(transactionType, \"Mint\" /* Mint */);\n}\n__name(isTypeMint, \"isTypeMint\");\nfunction isTypeCreate(transactionType) {\n  return isType(transactionType, \"Create\" /* Create */);\n}\n__name(isTypeCreate, \"isTypeCreate\");\nfunction isTypeScript(transactionType) {\n  return isType(transactionType, \"Script\" /* Script */);\n}\n__name(isTypeScript, \"isTypeScript\");\nfunction isTypeUpgrade(transactionType) {\n  return isType(transactionType, \"Upgrade\" /* Upgrade */);\n}\n__name(isTypeUpgrade, \"isTypeUpgrade\");\nfunction isTypeUpload(transactionType) {\n  return isType(transactionType, \"Upload\" /* Upload */);\n}\n__name(isTypeUpload, \"isTypeUpload\");\nfunction isTypeBlob(transactionType) {\n  return isType(transactionType, \"Blob\" /* Blob */);\n}\n__name(isTypeBlob, \"isTypeBlob\");\nfunction hasSameAssetId(a) {\n  return (b) => a.assetId === b.assetId;\n}\n__name(hasSameAssetId, \"hasSameAssetId\");\nfunction getReceiptsCall(receipts) {\n  return getReceiptsByType(receipts, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Call);\n}\n__name(getReceiptsCall, \"getReceiptsCall\");\nfunction getReceiptsMessageOut(receipts) {\n  return getReceiptsByType(receipts, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.MessageOut);\n}\n__name(getReceiptsMessageOut, \"getReceiptsMessageOut\");\nfunction mergeAssets(op1, op2) {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n  const assetMap = /* @__PURE__ */ new Map();\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n  return Array.from(assetMap.values());\n}\n__name(mergeAssets, \"mergeAssets\");\nfunction isSameOperation(a, b) {\n  return a.name === b.name && a.from?.address === b.from?.address && a.to?.address === b.to?.address && a.from?.type === b.from?.type && a.to?.type === b.to?.type;\n}\n__name(isSameOperation, \"isSameOperation\");\nfunction mergeAssetsSent(existing, toAdd) {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\n__name(mergeAssetsSent, \"mergeAssetsSent\");\nfunction mergeCalls(existing, toAdd) {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n  return [...existing.calls || [], ...toAdd.calls];\n}\n__name(mergeCalls, \"mergeCalls\");\nfunction mergeOperations(existing, toAdd) {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd),\n    receipts: [\n      ...existing.receipts || [],\n      ...toAdd.receipts?.filter((r) => !existing.receipts?.some((er) => er === r)) || []\n    ]\n  };\n}\n__name(mergeOperations, \"mergeOperations\");\nfunction addOperation(operations, toAdd) {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n  return operations.map((op, index) => index === existingIndex ? mergeOperations(op, toAdd) : op);\n}\n__name(addOperation, \"addOperation\");\nfunction getReceiptsTransferOut(receipts) {\n  return getReceiptsByType(receipts, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.TransferOut);\n}\n__name(getReceiptsTransferOut, \"getReceiptsTransferOut\");\nfunction getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId\n}) {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: \"Withdraw from Fuel\" /* withdrawFromFuel */,\n          from: {\n            type: 1 /* account */,\n            address: inputAddress\n          },\n          to: {\n            type: 1 /* account */,\n            address: receipt.recipient.toString(),\n            chain: \"ethereum\" /* ethereum */\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId\n            }\n          ],\n          receipts: [receipt]\n        });\n        return newWithdrawFromFuelOps;\n      }\n      return prevWithdrawFromFuelOps;\n    },\n    []\n  );\n  return withdrawFromFuelOperations;\n}\n__name(getWithdrawFromFuelOperations, \"getWithdrawFromFuelOperations\");\nfunction getContractCalls(contractInput, abiMap, _receipt, _rawPayload, _maxInputs) {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n  return [];\n}\n__name(getContractCalls, \"getContractCalls\");\nfunction getAssetsSent(receipt) {\n  return receipt.amount?.isZero() ? void 0 : [\n    {\n      amount: receipt.amount,\n      assetId: receipt.assetId\n    }\n  ];\n}\n__name(getAssetsSent, \"getAssetsSent\");\nfunction processCallReceipt(receipt, contractInput, inputs, abiMap, rawPayload, maxInputs, baseAssetId) {\n  const assetId = receipt.assetId === _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n  return [\n    {\n      name: \"Contract call\" /* contractCall */,\n      from: {\n        type: 1 /* account */,\n        address: inputAddress\n      },\n      to: {\n        type: 0 /* contract */,\n        address: receipt.to\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls,\n      receipts: [receipt]\n    }\n  ];\n}\n__name(processCallReceipt, \"processCallReceipt\");\nfunction getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId\n}) {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n    return contractCallReceipts.filter((receipt) => receipt.to === contractInput.contractID).flatMap(\n      (receipt) => processCallReceipt(\n        receipt,\n        contractInput,\n        inputs,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId\n      )\n    );\n  });\n}\n__name(getContractCallOperations, \"getContractCallOperations\");\nfunction extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n  const toType = contractInputs.some((input) => input.contractID === toAddress) ? 0 /* contract */ : 1 /* account */;\n  if (_fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n    fromAddress = change?.to || fromAddress;\n  }\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress) ? 0 /* contract */ : 1 /* account */;\n  return {\n    name: \"Transfer asset\" /* transfer */,\n    from: {\n      type: fromType,\n      address: fromAddress\n    },\n    to: {\n      type: toType,\n      address: toAddress\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount\n      }\n    ],\n    receipts: [receipt]\n  };\n}\n__name(extractTransferOperationFromReceipt, \"extractTransferOperationFromReceipt\");\nfunction getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId\n}) {\n  let operations = [];\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || /* @__PURE__ */ new Map();\n    let selectedPayer;\n    let fallbackPayer;\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address;\n      }\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break;\n      }\n    }\n    selectedPayer = selectedPayer || fallbackPayer;\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: \"Transfer asset\" /* transfer */,\n        from: {\n          type: 1 /* account */,\n          address: selectedPayer\n        },\n        to: {\n          type: 1 /* account */,\n          address: to\n        },\n        assetsSent: [{ assetId, amount }]\n      });\n    }\n  });\n  const transferReceipts = getReceiptsByType(\n    receipts,\n    _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Transfer\n  );\n  const transferOutReceipts = getReceiptsByType(\n    receipts,\n    _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.TransferOut\n  );\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n    operations = addOperation(operations, operation);\n  });\n  return operations;\n}\n__name(getTransferOperations, \"getTransferOperations\");\nfunction getPayProducerOperations(outputs) {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: \"Pay network fee to block producer\" /* payBlockProducer */,\n      from: {\n        type: 1 /* account */,\n        address: \"Network\"\n      },\n      to: {\n        type: 1 /* account */,\n        address: output.to.toString()\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount\n        }\n      ]\n    });\n    return operations;\n  }, []);\n  return payProducerOperations;\n}\n__name(getPayProducerOperations, \"getPayProducerOperations\");\nfunction getContractCreatedOperations({ inputs, outputs }) {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: \"Contract created\" /* contractCreated */,\n      from: {\n        type: 1 /* account */,\n        address: fromAddress\n      },\n      to: {\n        type: 0 /* contract */,\n        address: contractCreatedOutput?.contractId || \"\"\n      }\n    });\n    return operations;\n  }, []);\n  return contractCreatedOperations;\n}\n__name(getContractCreatedOperations, \"getContractCreatedOperations\");\nfunction getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId\n}) {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId })\n    ];\n  }\n  return [...getPayProducerOperations(outputs)];\n}\n__name(getOperations, \"getOperations\");\n\n// src/providers/transaction-summary/receipt.ts\n\nvar processGqlReceipt = /* @__PURE__ */ __name((gqlReceipt) => deserializeReceipt(gqlReceipt), \"processGqlReceipt\");\nvar extractMintedAssetsFromReceipts = /* @__PURE__ */ __name((receipts) => {\n  const mintedAssets = [];\n  receipts.forEach((receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val\n      });\n    }\n  });\n  return mintedAssets;\n}, \"extractMintedAssetsFromReceipts\");\nvar extractBurnedAssetsFromReceipts = /* @__PURE__ */ __name((receipts) => {\n  const burnedAssets = [];\n  receipts.forEach((receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val\n      });\n    }\n  });\n  return burnedAssets;\n}, \"extractBurnedAssetsFromReceipts\");\n\n// src/providers/transaction-summary/status.ts\n\n\nvar getTransactionStatusName = /* @__PURE__ */ __name((gqlStatus) => {\n  switch (gqlStatus) {\n    case \"FailureStatus\":\n      return \"failure\" /* failure */;\n    case \"SuccessStatus\":\n      return \"success\" /* success */;\n    case \"SubmittedStatus\":\n      return \"submitted\" /* submitted */;\n    case \"SqueezedOutStatus\":\n      return \"squeezedout\" /* squeezedout */;\n    case \"PreconfirmationSuccessStatus\":\n      return \"preconfirmationSuccess\" /* preconfirmationSuccess */;\n    case \"PreconfirmationFailureStatus\":\n      return \"preconfirmationFailure\" /* preconfirmationFailure */;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n}, \"getTransactionStatusName\");\nvar extractResolvedOutputs = /* @__PURE__ */ __name((serializedOutputs) => {\n  const resolvedOutputs = [];\n  serializedOutputs?.forEach(\n    ({ utxoId, output }) => resolvedOutputs.push({\n      utxoId,\n      output: deserializeProcessedTxOutput(output)\n    })\n  );\n  return resolvedOutputs;\n}, \"extractResolvedOutputs\");\nvar processGraphqlStatus = /* @__PURE__ */ __name((gqlTransactionStatus) => {\n  let time;\n  let blockId;\n  let status;\n  let totalFee;\n  let totalGas;\n  let receipts;\n  let resolvedOutputs = [];\n  let errorReason;\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n  let isStatusPreConfirmationSuccess = false;\n  let isStatusPreConfirmationFailure = false;\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n    switch (gqlTransactionStatus.type) {\n      case \"SuccessStatus\":\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        receipts = gqlTransactionStatus.receipts?.map(deserializeReceipt);\n        totalFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalFee);\n        totalGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalGas);\n        break;\n      case \"FailureStatus\":\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalFee);\n        receipts = gqlTransactionStatus.receipts?.map(deserializeReceipt);\n        totalGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalGas);\n        break;\n      case \"SubmittedStatus\":\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      case \"PreconfirmationSuccessStatus\":\n        isStatusPreConfirmationSuccess = true;\n        totalFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalFee);\n        totalGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalGas);\n        receipts = gqlTransactionStatus.preconfirmationReceipts?.map(deserializeReceipt);\n        resolvedOutputs = extractResolvedOutputs(gqlTransactionStatus.resolvedOutputs);\n        break;\n      case \"PreconfirmationFailureStatus\":\n        isStatusPreConfirmationFailure = true;\n        totalFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalFee);\n        totalGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalGas);\n        receipts = gqlTransactionStatus.preconfirmationReceipts?.map(deserializeReceipt);\n        resolvedOutputs = extractResolvedOutputs(gqlTransactionStatus.resolvedOutputs);\n        errorReason = gqlTransactionStatus.reason;\n        break;\n      default:\n    }\n  }\n  const processedGraphqlStatus = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    receipts,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    isStatusPreConfirmationSuccess,\n    isStatusPreConfirmationFailure,\n    resolvedOutputs,\n    errorReason\n  };\n  return processedGraphqlStatus;\n}, \"processGraphqlStatus\");\nvar getTotalFeeFromStatus = /* @__PURE__ */ __name((status) => status && \"totalFee\" in status ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(status.totalFee) : void 0, \"getTotalFeeFromStatus\");\n\n// src/providers/transaction-summary/assemble-transaction-summary.ts\nfunction assembleTransactionSummary(params) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  } = params;\n  const gasUsed = getGasUsedFromReceipts(receipts);\n  const rawPayload = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionBytes);\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId\n  });\n  const typeName = getTransactionTypeName(transaction.type);\n  const tip = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(transaction.policies?.find((policy) => policy.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip)?.data);\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } = processGraphqlStatus(gqlTransactionStatus);\n  const fee = totalFee ?? calculateTXFeeForSummary({\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: {\n      gasCosts,\n      maxGasPerTx,\n      feeParams: {\n        gasPerByte,\n        gasPriceFactor\n      }\n    }\n  });\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n  let date;\n  if (time) {\n    date = _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.DateTime.fromTai64(time);\n  }\n  const transactionSummary = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction\n  };\n  return transactionSummary;\n}\n__name(assembleTransactionSummary, \"assembleTransactionSummary\");\nfunction assemblePreConfirmationTransactionSummary(params) {\n  const { id, gqlTransactionStatus, transactionRequest, baseAssetId, maxInputs, abiMap } = params;\n  let type;\n  let operations;\n  let gasUsed;\n  let tip;\n  let transaction;\n  let mintedAssets;\n  let burnedAssets;\n  const {\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    status,\n    receipts,\n    resolvedOutputs,\n    errorReason,\n    totalFee,\n    isStatusPreConfirmationFailure,\n    isStatusPreConfirmationSuccess\n  } = processGraphqlStatus(gqlTransactionStatus);\n  if (receipts) {\n    gasUsed = getGasUsedFromReceipts(receipts);\n    mintedAssets = extractMintedAssetsFromReceipts(receipts);\n    burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n  }\n  if (transactionRequest) {\n    transaction = transactionRequest.toTransaction();\n    type = getTransactionTypeName(transaction.type);\n    tip = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(transaction.policies?.find((policy) => policy.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip)?.data);\n    if (receipts) {\n      const rawPayload = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().encode(transaction));\n      operations = getOperations({\n        transactionType: transaction.type,\n        inputs: transaction.inputs || [],\n        outputs: transaction.outputs || [],\n        receipts,\n        rawPayload,\n        abiMap,\n        maxInputs,\n        baseAssetId\n      });\n    }\n  }\n  const transactionSummary = {\n    id,\n    fee: totalFee,\n    type,\n    status,\n    receipts,\n    gasUsed,\n    tip,\n    isStatusPreConfirmationFailure,\n    isStatusPreConfirmationSuccess,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    ...transaction && {\n      isTypeMint: isTypeMint(transaction.type),\n      isTypeCreate: isTypeCreate(transaction.type),\n      isTypeScript: isTypeScript(transaction.type),\n      isTypeUpgrade: isTypeUpgrade(transaction.type),\n      isTypeUpload: isTypeUpload(transaction.type),\n      isTypeBlob: isTypeBlob(transaction.type)\n    },\n    mintedAssets,\n    burnedAssets,\n    resolvedOutputs,\n    errorReason,\n    transaction,\n    operations\n  };\n  return transactionSummary;\n}\n__name(assemblePreConfirmationTransactionSummary, \"assemblePreConfirmationTransactionSummary\");\n\n// src/providers/transaction-response/getAllDecodedLogs.ts\n\n\n\nfunction getAllDecodedLogs(opts) {\n  const { receipts, mainAbi, externalAbis = {} } = opts;\n  let mainContract = \"\";\n  if (mainAbi.programType === \"contract\") {\n    const firstCallReceipt = receipts.find(\n      (r) => r.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Call && r.id === _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32\n    );\n    if (firstCallReceipt) {\n      mainContract = firstCallReceipt.to;\n    }\n  }\n  return receipts.reduce(\n    ({ logs, groupedLogs }, receipt) => {\n      if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.LogData || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log) {\n        const isLogFromMainAbi = receipt.id === _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32 || mainContract === receipt.id;\n        const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];\n        if (isDecodable) {\n          const interfaceToUse = isLogFromMainAbi ? new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(mainAbi) : new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(externalAbis[receipt.id]);\n          const data = receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log ? new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(receipt.ra) : receipt.data;\n          const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n          logs.push(decodedLog);\n          groupedLogs[receipt.id] = [...groupedLogs[receipt.id] || [], decodedLog];\n        }\n      }\n      return { logs, groupedLogs };\n    },\n    { logs: [], groupedLogs: {} }\n  );\n}\n__name(getAllDecodedLogs, \"getAllDecodedLogs\");\n\n// src/providers/transaction-response/transaction-response.ts\nvar TransactionResponse = class _TransactionResponse {\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(tx, provider, chainId, abis, submitTxSubscription) {\n    this.submitTxSubscription = submitTxSubscription;\n    if (typeof tx === \"string\") {\n      this.id = tx;\n    } else {\n      this.id = tx.getTransactionId(chainId);\n      this.request = tx;\n    }\n    this.provider = provider;\n    this.abis = abis;\n    this.waitForResult = this.waitForResult.bind(this);\n    this.waitForPreConfirmation = this.waitForPreConfirmation.bind(this);\n  }\n  static {\n    __name(this, \"TransactionResponse\");\n  }\n  /** Transaction ID */\n  id;\n  /** Current provider */\n  provider;\n  /** Gas used on the transaction */\n  gasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  /** The graphql Transaction with receipts object. */\n  gqlTransaction;\n  request;\n  status;\n  abis;\n  preConfirmationStatus;\n  waitingForStreamData = false;\n  statusResolvers = /* @__PURE__ */ new Map();\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(id, provider, abis) {\n    const chainId = await provider.getChainId();\n    const response = new _TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n  applyMalleableSubscriptionFields(transaction) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n    const tx = transaction;\n    if (status.type === \"SuccessStatus\" || status.type === \"FailureStatus\") {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if (\"txPointer\" in input) {\n          const correspondingInput = status.transaction.inputs?.[idx];\n          return {\n            ...input,\n            txPointer: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer)\n          };\n        }\n        return input;\n      });\n      tx.outputs = status.transaction.outputs.map(deserializeProcessedTxOutput);\n      if (status.transaction.receiptsRoot) {\n        tx.receiptsRoot = status.transaction.receiptsRoot;\n      }\n    }\n  }\n  async getTransaction() {\n    if (this.request) {\n      const tx2 = this.request.toTransaction();\n      this.applyMalleableSubscriptionFields(tx2);\n      return {\n        tx: tx2,\n        bytes: this.request.toTransactionBytes()\n      };\n    }\n    const gqlTransaction = this.gqlTransaction ?? await this.fetch();\n    const { rawPayload } = gqlTransaction;\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload);\n    const [tx] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(bytes, 0);\n    return {\n      tx,\n      bytes\n    };\n  }\n  /**\n   *\n   * NOTE: This method is only called within `getTransactionSummary`, which is invoked after `getTransaction`.\n   * Since `getTransaction` only resolves once the transaction has been processed,\n   * the status at this point is guaranteed to be either `SuccessStatus` or `FailureStatus`.\n   */\n  getReceipts() {\n    const status = this.getTransactionStatus();\n    switch (status?.type) {\n      case \"SuccessStatus\":\n      case \"FailureStatus\":\n        return status.receipts.map(deserializeReceipt);\n      default:\n        return [];\n    }\n  }\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch() {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id\n    });\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id\n      });\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n      return this.fetch();\n    }\n    this.gqlTransaction = response.transaction;\n    return response.transaction;\n  }\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary(contractsAbiMap) {\n    const { tx: transaction, bytes: transactionBytes } = await this.getTransaction();\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await this.provider.getGasConfig();\n    const transactionStatus = this.getTransactionStatus();\n    const totalFee = getTotalFeeFromStatus(transactionStatus);\n    const gasPrice = totalFee ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0) : await this.provider.getLatestGasPrice();\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const transactionSummary = assembleTransactionSummary({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: transactionStatus,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId\n    });\n    return transactionSummary;\n  }\n  async getPreConfirmationTransactionSummary(contractsAbiMap) {\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const transactionSummary = assemblePreConfirmationTransactionSummary({\n      id: this.id,\n      gqlTransactionStatus: this.preConfirmationStatus || this.status,\n      baseAssetId,\n      maxInputs,\n      abiMap: contractsAbiMap,\n      transactionRequest: this.request\n    });\n    return transactionSummary;\n  }\n  resolveStatus(type) {\n    const resolvers = this.statusResolvers.get(type) || [];\n    resolvers.forEach((resolve) => resolve());\n    this.statusResolvers.delete(type);\n  }\n  async waitForStatus(type) {\n    return new Promise((resolve, reject) => {\n      const resolvers = this.statusResolvers.get(type) || [];\n      resolvers.push(() => {\n        resolve();\n      });\n      this.statusResolvers.set(type, resolvers);\n      this.waitForStatusChange().catch(reject);\n    });\n  }\n  /**\n   * Waits for the status change of the transaction.\n   * If the transaction is already in a final state, it will return immediately.\n   * If the transaction is not in a final state, it will wait for the status change.\n   * If we are already subscribed to the status change, it will return immediately.\n   */\n  async waitForStatusChange() {\n    const type = this.status?.type;\n    if (type && (type === \"FailureStatus\" || type === \"SuccessStatus\")) {\n      this.resolveStatus(\"preConfirmation\");\n      this.resolveStatus(\"confirmation\");\n      return;\n    }\n    if (this.waitingForStreamData) {\n      return;\n    }\n    this.waitingForStreamData = true;\n    const subscription = this.submitTxSubscription ?? await this.provider.operations.statusChange({\n      transactionId: this.id,\n      includePreConfirmation: true\n    });\n    for await (const sub2 of subscription) {\n      const statusChange = \"statusChange\" in sub2 ? sub2.statusChange : sub2.submitAndAwaitStatus;\n      this.status = statusChange;\n      if (statusChange.type === \"SqueezedOutStatus\") {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n      if (statusChange.type === \"PreconfirmationSuccessStatus\" || statusChange.type === \"PreconfirmationFailureStatus\") {\n        this.preConfirmationStatus = statusChange;\n        this.resolveStatus(\"preConfirmation\");\n        const pendingConfirmationResolvers = this.statusResolvers.get(\"confirmation\");\n        if (!pendingConfirmationResolvers) {\n          this.waitingForStreamData = false;\n          break;\n        }\n      }\n      if (statusChange.type === \"SuccessStatus\" || statusChange.type === \"FailureStatus\") {\n        this.resolveStatus(\"confirmation\");\n        this.resolveStatus(\"preConfirmation\");\n        this.waitingForStreamData = false;\n        break;\n      }\n    }\n  }\n  async waitForConfirmationStatuses() {\n    try {\n      await this.waitForStatus(\"confirmation\");\n    } catch (error) {\n      this.unsetResourceCache();\n      throw error;\n    }\n  }\n  async waitForPreConfirmationStatuses() {\n    try {\n      await this.waitForStatus(\"preConfirmation\");\n    } catch (error) {\n      this.unsetResourceCache();\n      throw error;\n    }\n  }\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult(contractsAbiMap) {\n    const transactionSummary = await this.getTransactionSummary(contractsAbiMap);\n    const transactionResult = {\n      ...transactionSummary\n    };\n    let { logs, groupedLogs } = { logs: [], groupedLogs: {} };\n    if (this.abis) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts: transactionSummary.receipts,\n        mainAbi: this.abis.main,\n        externalAbis: this.abis.otherContractsAbis\n      }));\n      transactionResult.logs = logs;\n      transactionResult.groupedLogs = groupedLogs;\n    }\n    const { receipts } = transactionResult;\n    const status = this.getTransactionStatus();\n    if (status?.type === \"FailureStatus\") {\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs,\n        groupedLogs\n      });\n    }\n    return transactionResult;\n  }\n  async assemblePreConfirmationResult(contractsAbiMap) {\n    const transactionSummary = await this.getPreConfirmationTransactionSummary(contractsAbiMap);\n    const transactionResult = {\n      ...transactionSummary,\n      logs: [],\n      groupedLogs: {}\n    };\n    let { logs, groupedLogs } = { logs: [], groupedLogs: {} };\n    if (this.abis && transactionSummary.receipts) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts: transactionSummary.receipts,\n        mainAbi: this.abis.main,\n        externalAbis: this.abis.otherContractsAbis\n      }));\n      transactionResult.logs = logs;\n      transactionResult.groupedLogs = groupedLogs;\n    }\n    return transactionResult;\n  }\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult(contractsAbiMap) {\n    await this.waitForConfirmationStatuses();\n    this.unsetResourceCache();\n    return this.assembleResult(contractsAbiMap);\n  }\n  /**\n   * Waits for the transaction's pre-confirmation and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns The pre-confirmed transaction result\n   */\n  async waitForPreConfirmation(contractsAbiMap) {\n    await this.waitForPreConfirmationStatuses();\n    this.unsetResourceCache();\n    return this.assemblePreConfirmationResult(contractsAbiMap);\n  }\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait(contractsAbiMap) {\n    return this.waitForResult(contractsAbiMap);\n  }\n  unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n  getTransactionStatus() {\n    return this.status ?? this.gqlTransaction?.status;\n  }\n};\n\n// src/providers/transaction-response/getDecodedLogs.ts\n\n\n\nfunction getDecodedLogs(receipts, mainAbi, externalAbis = {}) {\n  let mainContract = \"\";\n  if (mainAbi.programType === \"contract\") {\n    const firstCallReceipt = receipts.find(\n      (r) => r.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Call && r.id === _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32\n    );\n    mainContract = firstCallReceipt.to;\n  }\n  return receipts.reduce((logs, receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.LogData || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log) {\n      const isLogFromMainAbi = receipt.id === _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32 || mainContract === receipt.id;\n      const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];\n      if (isDecodable) {\n        const interfaceToUse = isLogFromMainAbi ? new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(mainAbi) : new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(externalAbis[receipt.id]);\n        const data = receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log ? new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(receipt.ra) : receipt.data;\n        const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n        logs.push(decodedLog);\n      }\n    }\n    return logs;\n  }, []);\n}\n__name(getDecodedLogs, \"getDecodedLogs\");\n\n// src/providers/utils/auto-retry-fetch.ts\n\nfunction getWaitDelay(options, retryAttemptNum) {\n  const duration = options.baseDelay ?? 150;\n  switch (options.backoff) {\n    case \"linear\":\n      return duration * retryAttemptNum;\n    case \"fixed\":\n      return duration;\n    case \"exponential\":\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\n__name(getWaitDelay, \"getWaitDelay\");\nfunction autoRetryFetch(fetchFn, options, retryAttemptNum = 0) {\n  if (options === void 0) {\n    return fetchFn;\n  }\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error) {\n      const error = _error;\n      if (error.cause?.code !== \"ECONNREFUSED\") {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n      const delay = getWaitDelay(options, retryNum);\n      await (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.sleep)(delay);\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n__name(autoRetryFetch, \"autoRetryFetch\");\n\n// src/providers/utils/parse-graphql-response.ts\nvar parseGraphqlResponse = /* @__PURE__ */ __name(async (options) => {\n  const { response, isSubscription } = options;\n  let extensions;\n  const responseClone = response.clone();\n  if (isSubscription) {\n    const reader = responseClone.body?.getReader();\n    const { event } = await FuelGraphqlSubscriber.readEvent(reader);\n    extensions = event?.extensions;\n  } else {\n    extensions = (await responseClone.json()).extensions;\n  }\n  return {\n    extensions\n  };\n}, \"parseGraphqlResponse\");\n\n// src/providers/utils/validate-pagination-args.ts\n\nvar validatePaginationArgs = /* @__PURE__ */ __name((params) => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n  if (after && before) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n  if (first && before) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n  if (last && after) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n  return inputArgs;\n}, \"validatePaginationArgs\");\n\n// src/providers/provider.ts\nvar MAX_RETRIES = 10;\nvar RESOURCES_PAGE_SIZE_LIMIT = 512;\nvar TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nvar BALANCES_PAGE_SIZE_LIMIT = 100;\nvar NON_PAGINATED_BALANCES_SIZE = 1e4;\nvar BLOCKS_PAGE_SIZE_LIMIT = 5;\nvar DEFAULT_RESOURCE_CACHE_TTL = 2e4;\nvar GAS_USED_MODIFIER = 1.2;\nvar WRITE_OPERATIONS = [\n  \"submit\",\n  \"submitAndAwaitStatus\",\n  \"produceBlocks\"\n];\nvar Provider = class _Provider {\n  static {\n    __name(this, \"Provider\");\n  }\n  operations;\n  cache;\n  /**\n   * @hidden\n   * @param url - If provided, clears cache only for given url\n   */\n  static clearChainAndNodeCaches(url) {\n    if (url) {\n      delete _Provider.inflightFetchChainAndNodeInfoRequests[url];\n      delete _Provider.chainInfoCache[url];\n      delete _Provider.nodeInfoCache[url];\n      delete _Provider.currentBlockHeightCache[url];\n      return;\n    }\n    _Provider.inflightFetchChainAndNodeInfoRequests = {};\n    _Provider.nodeInfoCache = {};\n    _Provider.chainInfoCache = {};\n    _Provider.currentBlockHeightCache = {};\n  }\n  /** @hidden */\n  url;\n  /** @hidden */\n  urlWithoutAuth;\n  /**\n   * Governs whether to include the required block height in the request body\n   * for block-sensitive operations like when submitting a transaction.\n   *\n   * This ensures that the operation is executed at the correct block height,\n   * regardless of which node in the network the request is routed to.\n   *\n   * `true` by default.\n   */\n  static ENABLE_RPC_CONSISTENCY = true;\n  /** @hidden */\n  static inflightFetchChainAndNodeInfoRequests = {};\n  /** @hidden */\n  static chainInfoCache = {};\n  /** @hidden */\n  static nodeInfoCache = {};\n  /** @hidden */\n  static currentBlockHeightCache = {};\n  /** @hidden */\n  static incompatibleNodeVersionMessage = \"\";\n  /** @hidden */\n  consensusParametersTimestamp;\n  options = {\n    timeout: void 0,\n    resourceCacheTTL: void 0,\n    fetch: void 0,\n    retryOptions: void 0,\n    headers: void 0,\n    cache: void 0\n  };\n  static extractOperationName(body) {\n    return body?.toString().match(/\"operationName\":\"(.+)\"/)?.[1];\n  }\n  static isWriteOperation(body) {\n    return WRITE_OPERATIONS.includes(this.extractOperationName(body));\n  }\n  static normalizeUrl(url) {\n    return url.replace(/-sub$/, \"\");\n  }\n  static hasWriteOperationHappened(url) {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(_Provider.currentBlockHeightCache[this.normalizeUrl(url)]);\n  }\n  /**\n   * @hidden\n   */\n  static getFetchFn(options) {\n    const { retryOptions, timeout, headers } = options;\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request2 = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : void 0;\n      let fullRequest = {\n        ...request2,\n        signal,\n        headers: { ...request2?.headers, ...headers }\n      };\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n      if (_Provider.ENABLE_RPC_CONSISTENCY && _Provider.hasWriteOperationHappened(url)) {\n        _Provider.applyBlockHeight(fullRequest, url);\n      }\n      return _Provider.fetchAndProcessBlockHeight(url, fullRequest, options);\n    }, retryOptions);\n  }\n  static applyBlockHeight(request2, url) {\n    const normalizedUrl = this.normalizeUrl(url);\n    const currentBlockHeight = _Provider.currentBlockHeightCache[normalizedUrl] ?? 0;\n    request2.body = request2.body?.toString().replace(/}$/, `,\"extensions\":{\"required_fuel_block_height\":${currentBlockHeight}}}`);\n  }\n  static async fetchAndProcessBlockHeight(url, request2, options) {\n    const fetchFn = /* @__PURE__ */ __name(() => options.fetch ? options.fetch(url, request2, options) : fetch(url, request2), \"fetchFn\");\n    const isWriteOperation = _Provider.isWriteOperation(request2.body);\n    if (isWriteOperation && !_Provider.hasWriteOperationHappened(url)) {\n      _Provider.currentBlockHeightCache[_Provider.normalizeUrl(url)] = 0;\n    }\n    let response = await fetchFn();\n    if (!_Provider.ENABLE_RPC_CONSISTENCY) {\n      return response;\n    }\n    const retryOptions = {\n      maxRetries: 5,\n      baseDelay: 500\n    };\n    for (let retriesLeft = retryOptions.maxRetries; retriesLeft > 0; --retriesLeft) {\n      const { extensions } = await parseGraphqlResponse({\n        response,\n        isSubscription: url.endsWith(\"-sub\")\n      });\n      _Provider.setCurrentBlockHeight(url, extensions?.current_fuel_block_height);\n      if (!extensions?.fuel_block_height_precondition_failed) {\n        break;\n      }\n      const retryAttempt = retryOptions.maxRetries - retriesLeft + 1;\n      const sleepTime = getWaitDelay(retryOptions, retryAttempt);\n      await (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.sleep)(sleepTime);\n      response = await fetchFn();\n    }\n    return response;\n  }\n  static setCurrentBlockHeight(url, height) {\n    const writeOperationHappened = _Provider.hasWriteOperationHappened(url);\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(height) || !writeOperationHappened) {\n      return;\n    }\n    const normalizedUrl = _Provider.normalizeUrl(url);\n    if (height > _Provider.currentBlockHeightCache[normalizedUrl]) {\n      _Provider.currentBlockHeightCache[normalizedUrl] = height;\n    }\n  }\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url, options = {}) {\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = _Provider.extractBasicAuth(url);\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n    const { FUELS } = _fuel_ts_versions__WEBPACK_IMPORTED_MODULE_7__.versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n    this.options = {\n      ...this.options,\n      ...options,\n      headers\n    };\n    this.operations = this.createOperations();\n    const { resourceCacheTTL, cache: cache2 } = this.options;\n    if (cache2) {\n      const { consensusParametersTimestamp, chain, nodeInfo } = deserializeProviderCache(cache2);\n      this.consensusParametersTimestamp = consensusParametersTimestamp;\n      _Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      _Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n    }\n    if ((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = void 0;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n  static extractBasicAuth(url) {\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.INVALID_URL, \"Invalid URL provided.\", { url }, error);\n    }\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: void 0 };\n    }\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` }\n    };\n  }\n  /**\n   * Initialize Provider async stuff\n   */\n  async init() {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain() {\n    await this.init();\n    return _Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode() {\n    await this.init();\n    return _Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    await this.init();\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts\n    } = (await this.getChain()).consensusParameters;\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts\n    };\n  }\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url, options) {\n    const { url: rawUrl, urlWithoutAuth, headers } = _Provider.extractBasicAuth(url);\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n    this.operations = this.createOperations();\n    await this.init();\n  }\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(ignoreCache = false) {\n    const nodeInfo = _Provider.nodeInfoCache[this.urlWithoutAuth];\n    const chain = _Provider.chainInfoCache[this.urlWithoutAuth];\n    const hasCache = nodeInfo && chain;\n    if (hasCache && !ignoreCache) {\n      return { nodeInfo, chain };\n    }\n    const inflightRequest = _Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];\n    if (inflightRequest) {\n      return inflightRequest.then((data) => {\n        this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n        return {\n          nodeInfo: _Provider.nodeInfoCache[this.urlWithoutAuth],\n          chain: _Provider.chainInfoCache[this.urlWithoutAuth]\n        };\n      });\n    }\n    const getChainAndNodeInfoFromNetwork = this.operations.getChainAndNodeInfo().then((data) => ({\n      chain: deserializeChain(data.chain),\n      nodeInfo: deserializeNodeInfo(data.nodeInfo),\n      consensusParametersTimestamp: Date.now()\n    })).then((data) => {\n      _Provider.setIncompatibleNodeVersionMessage(data.nodeInfo);\n      _Provider.chainInfoCache[this.urlWithoutAuth] = data.chain;\n      _Provider.nodeInfoCache[this.urlWithoutAuth] = data.nodeInfo;\n      this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n      return data;\n    }).catch((err) => {\n      const error = new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.CONNECTION_REFUSED,\n        \"Unable to fetch chain and node info from the network\",\n        { url: this.urlWithoutAuth },\n        err\n      );\n      error.cause = { code: \"ECONNREFUSED\" };\n      throw error;\n    }).finally(() => {\n      delete _Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];\n    });\n    _Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth] = getChainAndNodeInfoFromNetwork;\n    return _Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth].then((data) => {\n      this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n      return {\n        nodeInfo: _Provider.nodeInfoCache[this.urlWithoutAuth],\n        chain: _Provider.chainInfoCache[this.urlWithoutAuth]\n      };\n    });\n  }\n  /**\n   * @hidden\n   */\n  static setIncompatibleNodeVersionMessage(nodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } = (0,_fuel_ts_versions__WEBPACK_IMPORTED_MODULE_7__.checkFuelCoreVersionCompatibility)(nodeInfo.nodeVersion);\n    if (!isMajorSupported || !isMinorSupported) {\n      _Provider.incompatibleNodeVersionMessage = [\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion}.`,\n        `The TS SDK currently supports fuel-core version ${supportedVersion}.`,\n        `Things may not work as expected.`\n      ].join(\"\\n\");\n      FuelGraphqlSubscriber.incompatibleNodeVersionMessage = _Provider.incompatibleNodeVersionMessage;\n    }\n  }\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  createOperations() {\n    const fetchFn = _Provider.getFetchFn(this.options);\n    const gqlClient = new graphql_request__WEBPACK_IMPORTED_MODULE_8__.GraphQLClient(this.urlWithoutAuth, {\n      fetch: /* @__PURE__ */ __name((input, requestInit) => fetchFn(input.toString(), requestInit || {}, this.options), \"fetch\"),\n      responseMiddleware: /* @__PURE__ */ __name((response) => {\n        if (\"response\" in response) {\n          const graphQlResponse = response.response;\n          assertGqlResponseHasNoErrors(\n            graphQlResponse.errors,\n            _Provider.incompatibleNodeVersionMessage\n          );\n        }\n      }, \"responseMiddleware\")\n    });\n    const executeQuery = /* @__PURE__ */ __name((query, vars) => {\n      const opDefinition = query.definitions.find((x) => x.kind === \"OperationDefinition\");\n      const isSubscription = opDefinition?.operation === \"subscription\";\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: /* @__PURE__ */ __name((url, requestInit) => fetchFn(url, requestInit, this.options), \"fetchFn\"),\n          variables: vars,\n          operationName: opDefinition.name.value,\n          onEvent: /* @__PURE__ */ __name((event) => {\n            _Provider.setCurrentBlockHeight(\n              this.urlWithoutAuth,\n              event.extensions?.current_fuel_block_height\n            );\n          }, \"onEvent\")\n        });\n      }\n      return gqlClient.request(query, vars);\n    }, \"executeQuery\");\n    const customOperations = /* @__PURE__ */ __name((requester) => ({\n      getBlobs(variables) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(\", \");\n        const blobParams = variables.blobIds.map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`).join(\"\\n\");\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {}\n        );\n        const document2 = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n        return requester(document2, updatedVariables);\n      }\n    }), \"customOperations\");\n    return { ...getSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion() {\n    const {\n      nodeInfo: { nodeVersion }\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber() {\n    const {\n      chain: {\n        latestBlock: { height }\n      }\n    } = await this.operations.getLatestBlockHeight();\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(height);\n  }\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode() {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n    const processedNodeInfo = deserializeNodeInfo(nodeInfo);\n    _Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n    return processedNodeInfo;\n  }\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain() {\n    const { chain } = await this.operations.getChain();\n    const processedChain = deserializeChain(chain);\n    _Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n    return processedChain;\n  }\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId }\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId }\n    } = all;\n    return baseAssetId;\n  }\n  /**\n   * Retrieves the details of an asset given its ID.\n   *\n   * @param assetId - The unique identifier of the asset.\n   * @returns A promise that resolves to an object containing the asset details.\n   */\n  async getAssetDetails(assetId) {\n    const { assetMetadata } = await this.getNodeFeatures();\n    if (!assetMetadata) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_FEATURE,\n        \"The current node does not supports fetching asset details\"\n      );\n    }\n    const { assetDetails } = await this.operations.getAssetDetails({ assetId });\n    const { contractId, subId, totalSupply } = assetDetails;\n    return {\n      subId,\n      contractId,\n      totalSupply: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(totalSupply)\n    };\n  }\n  /**\n   * @hidden\n   */\n  #cacheInputs(inputs, transactionId) {\n    if (!this.cache) {\n      return;\n    }\n    this.cache.set(transactionId, inputs);\n  }\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs }\n      }\n    } = await this.getChain();\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tx.inputs.length).gt(maxInputs)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tx.outputs.length).gt(maxOutputs)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(transactionRequestLike, {\n    enableAssetBurn,\n    estimateTxDependencies = true,\n    includePreConfirmation: _includePreConfirmation = true\n  } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n    await this.validateTransaction(transactionRequest);\n    const encodedTransaction = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes());\n    let abis;\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({\n      encodedTransaction,\n      includePreConfirmation: true\n    });\n    this.#cacheInputs(\n      transactionRequest.inputs,\n      transactionRequest.getTransactionId(await this.getChainId())\n    );\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(transactionRequestLike, { utxoValidation, estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(deserializeReceipt);\n    return { receipts, dryRunStatus };\n  }\n  /**\n   * Estimates the gas usage for predicates in a transaction request.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request to estimate predicates for.\n   * @returns A promise that resolves to the updated transaction request with estimated gas usage for predicates.\n   */\n  async estimatePredicates(transactionRequest) {\n    const shouldEstimatePredicates = transactionRequest.inputs.some(\n      (input) => isPredicate(input) && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed).isZero()\n    );\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n    const encodedTransaction = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes());\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction\n    });\n    const { estimatePredicates } = response;\n    transactionRequest = this.parseEstimatePredicatesResponse(\n      transactionRequest,\n      estimatePredicates\n    );\n    return transactionRequest;\n  }\n  /**\n   * Estimates the gas price and predicates for a given transaction request and block horizon.\n   *\n   * @param transactionRequest - The transaction request to estimate predicates and gas price for.\n   * @param blockHorizon - The block horizon to use for gas price estimation.\n   * @returns A promise that resolves to an object containing the updated transaction\n   * request and the estimated gas price.\n   */\n  async estimatePredicatesAndGasPrice(transactionRequest, blockHorizon) {\n    const shouldEstimatePredicates = transactionRequest.inputs.some(\n      (input) => isPredicate(input) && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed).isZero()\n    );\n    if (!shouldEstimatePredicates) {\n      const gasPrice2 = await this.estimateGasPrice(blockHorizon);\n      return { transactionRequest, gasPrice: gasPrice2 };\n    }\n    const {\n      estimateGasPrice: { gasPrice },\n      estimatePredicates\n    } = await this.operations.estimatePredicatesAndGasPrice({\n      blockHorizon: String(blockHorizon),\n      encodedTransaction: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes())\n    });\n    transactionRequest = this.parseEstimatePredicatesResponse(\n      transactionRequest,\n      estimatePredicates\n    );\n    return { transactionRequest, gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice) };\n  }\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @param gasPrice - The gas price to use for the transaction, if not provided it will be fetched.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(transactionRequest, { gasPrice: gasPriceParam } = {}) {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        rawReceipts: [],\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: []\n      };\n    }\n    let rawReceipts = [];\n    let receipts = [];\n    const missingContractIds = [];\n    let outputVariables = 0;\n    let dryRunStatus;\n    await this.validateTransaction(transactionRequest);\n    const gasPrice = gasPriceParam ?? await this.estimateGasPrice(10);\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: serializedReceipts, status }]\n      } = await this.operations.dryRun({\n        encodedTransactions: [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: gasPrice.toString()\n      });\n      rawReceipts = serializedReceipts;\n      receipts = serializedReceipts.map(deserializeReceipt);\n      dryRunStatus = status;\n      const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(receipts);\n      const hasMissingOutputs = missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId));\n          missingContractIds.push(contractId);\n        });\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice\n        });\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n    return {\n      rawReceipts,\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus\n    };\n  }\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(transactionRequests) {\n    const results = transactionRequests.map(() => ({\n      rawReceipts: [],\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: void 0\n    }));\n    const allRequests = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(transactionRequests);\n    const serializedTransactionsMap = /* @__PURE__ */ new Map();\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(req.toTransactionBytes()));\n      }\n    });\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map(\n        (index) => serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false\n      });\n      const nextRoundTransactions = [];\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(deserializeReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs = missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request2 = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request2)) {\n          result.outputVariables += missingOutputVariables.length;\n          request2.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request2.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request2\n          });\n          request2.maxFee = maxFee;\n          serializedTransactionsMap.set(requestIdx, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(request2.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n    return results;\n  }\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(transactionRequests, { utxoValidation, estimateTxDependencies = true } = {}) {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false\n    });\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(deserializeReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n    return results;\n  }\n  async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n    if (diff < 6e4) {\n      return;\n    }\n    if (!_Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n    const chainInfo = _Provider.chainInfoCache[this.urlWithoutAuth];\n    const {\n      latestBlock: {\n        header: { consensusParametersVersion: previous }\n      }\n    } = chainInfo;\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current }\n        }\n      }\n    } = await this.operations.getConsensusParametersVersion();\n    if (previous !== current) {\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param params - The parameters for estimating the transaction gas and fee.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params) {\n    const { transactionRequest, gasPrice: gasPriceParam } = params;\n    let gasPrice = gasPriceParam;\n    await this.autoRefetchConfigs();\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n    const minFee = calculateGasFee({\n      gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip\n    }).add(1);\n    let gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    if (isTransactionTypeScript(transactionRequest)) {\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip\n    }).add(1);\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit\n    };\n  }\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes())];\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true\n    });\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n      const processedReceipts = receipts.map(deserializeReceipt);\n      return { id, receipts: processedReceipts, status };\n    });\n    return { receipts: callResult[0].receipts };\n  }\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   *\n   * @deprecated Use provider.assembleTx instead\n   * Check the migration guide https://docs.fuel.network/docs/fuels-ts/transactions/assemble-tx-migration-guide/ for more information.\n   */\n  async getTransactionCost(transactionRequestLike, { signatureCallback, gasPrice: gasPriceParam } = {}) {\n    const txRequestClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    }\n    const signedRequest = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n    let gasPrice;\n    if (gasPriceParam) {\n      gasPrice = gasPriceParam;\n      await this.estimatePredicates(signedRequest);\n    } else {\n      ({ gasPrice } = await this.estimatePredicatesAndGasPrice(signedRequest, 10));\n    }\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n    let { maxFee, maxGas, minFee, minGas, gasLimit } = await this.estimateTxGasAndFee({\n      // Fetches and returns a gas price\n      transactionRequest: signedRequest,\n      gasPrice\n    });\n    let rawReceipts = [];\n    let receipts = [];\n    let dryRunStatus;\n    let missingContractIds = [];\n    let outputVariables = 0;\n    let gasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n      ({ rawReceipts, receipts, missingContractIds, outputVariables, dryRunStatus } = await this.estimateTxDependencies(txRequestClone, { gasPrice }));\n      if (dryRunStatus && \"reason\" in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus.reason);\n      }\n      const { maxGasPerTx } = await this.getGasConfig();\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n      ({ maxFee, maxGas, minFee, minGas } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice\n      }));\n    }\n    const transactionSummary = {\n      gasPrice: gasPrice.toString(),\n      receipts: rawReceipts\n    };\n    return {\n      rawReceipts,\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee,\n      transactionSummary\n    };\n  }\n  /**\n   * Assembles a transaction by completely estimating and funding it.\n   *\n   * @param params - Parameters used to assemble the transaction.\n   *\n   * @returns The assembled transaction request, estimated gas price, and receipts\n   */\n  async assembleTx(params) {\n    const {\n      request: request2,\n      reserveGas,\n      resourcesIdsToIgnore,\n      feePayerAccount,\n      blockHorizon = 10,\n      estimatePredicates = true,\n      accountCoinQuantities = []\n    } = params;\n    const allAddresses = /* @__PURE__ */ new Set();\n    const baseAssetId = await this.getBaseAssetId();\n    let feePayerIndex = -1;\n    let baseAssetChange;\n    const requiredBalances = accountCoinQuantities.map((quantity, index) => {\n      const { amount, assetId, account = feePayerAccount, changeOutputAccount } = quantity;\n      const changeAccountAddress = changeOutputAccount ? changeOutputAccount.address.toB256() : account.address.toB256();\n      allAddresses.add(account.address.toB256());\n      const changePolicy = {\n        change: changeAccountAddress\n      };\n      if (assetId === baseAssetId) {\n        baseAssetChange = changePolicy.change;\n      }\n      if (account.address.equals(feePayerAccount.address)) {\n        feePayerIndex = index;\n      }\n      const requiredBalance = {\n        account: resolveAccountForAssembleTxParams(account),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).toString(10),\n        assetId,\n        changePolicy\n      };\n      return requiredBalance;\n    });\n    if (feePayerIndex === -1) {\n      allAddresses.add(feePayerAccount.address.toB256());\n      const newLength = requiredBalances.push({\n        account: resolveAccountForAssembleTxParams(feePayerAccount),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0).toString(10),\n        // Since the correct fee amount cannot be determined yet, we can use 0\n        assetId: baseAssetId,\n        changePolicy: {\n          change: baseAssetChange || feePayerAccount.address.toB256()\n        }\n      });\n      feePayerIndex = newLength - 1;\n    }\n    const excludeInput = await this.adjustResourcesToIgnoreForAddresses(\n      Array.from(allAddresses),\n      resourcesIdsToIgnore\n    );\n    const {\n      assembleTx: { status, transaction: gqlTransaction, gasPrice }\n    } = await this.operations.assembleTx({\n      tx: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(request2.toTransactionBytes()),\n      blockHorizon: String(blockHorizon),\n      feeAddressIndex: String(feePayerIndex),\n      requiredBalances,\n      estimatePredicates,\n      excludeInput,\n      reserveGas: reserveGas ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(reserveGas).toString(10) : void 0\n    });\n    if (status.type === \"DryRunFailureStatus\") {\n      const parsedReceipts = status.receipts.map(deserializeReceipt);\n      throw this.extractDryRunError(request2, parsedReceipts, status.reason);\n    }\n    request2.witnesses = gqlTransaction.witnesses || request2.witnesses;\n    request2.inputs = gqlTransaction.inputs?.map(deserializeInput) || request2.inputs;\n    request2.outputs = gqlTransaction.outputs?.map(deserializeOutput) || request2.outputs;\n    if (gqlTransaction.policies?.maxFee) {\n      request2.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransaction.policies.maxFee);\n    }\n    if (request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script) {\n      request2.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransaction.scriptGasLimit).add((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(reserveGas));\n    }\n    const rawReceipts = status.receipts;\n    const chainId = await this.getChainId();\n    request2.updateState(chainId, \"funded\", {\n      gasPrice: gasPrice.toString(),\n      receipts: rawReceipts\n    });\n    return {\n      assembledRequest: request2,\n      gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice),\n      receipts: status.receipts.map(deserializeReceipt),\n      rawReceipts\n    };\n  }\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(owner, assetId, paginationArgs) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner);\n    const {\n      coins: { edges, pageInfo }\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId) }\n    });\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount),\n      owner: ownerAddress,\n      blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.blockCreated),\n      txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.txCreatedIdx)\n    }));\n    return {\n      coins,\n      pageInfo\n    };\n  }\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param resourcesIdsToIgnore - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(owner, quantities, resourcesIdsToIgnore) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner);\n    const excludedIds = await this.adjustResourcesToIgnoreForAddresses(\n      [ownerAddress.b256Address],\n      resourcesIdsToIgnore\n    );\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities.map(coinQuantityfy).map(({ assetId, amount, max: maxPerAsset }) => ({\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId),\n        amount: (amount.eqn(0) ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1) : amount).toString(10),\n        max: maxPerAsset ? maxPerAsset.toString(10) : void 0\n      })),\n      excludedIds\n    };\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n    const coins = result.coinsToSpend.flat().map((coin) => {\n      switch (coin.type) {\n        case \"MessageCoin\":\n          return {\n            amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.amount),\n            assetId: coin.assetId,\n            daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.daHeight),\n            sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(coin.sender),\n            recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(coin.recipient),\n            nonce: coin.nonce\n          };\n        case \"Coin\":\n          return {\n            id: coin.utxoId,\n            amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.amount),\n            assetId: coin.assetId,\n            owner: ownerAddress,\n            blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.blockCreated),\n            txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.txCreatedIdx)\n          };\n        default:\n          return null;\n      }\n    }).filter((v) => !!v);\n    return coins;\n  }\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds) {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs = [];\n    Object.keys(res).forEach((key) => {\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n    return blobs.filter((v) => v);\n  }\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight) {\n    let block;\n    if (idOrHeight === \"latest\") {\n      const {\n        chain: { latestBlock }\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === \"string\" && (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.isB256)(idOrHeight);\n      const variables = isblockId ? { blockId: idOrHeight } : { height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n    if (!block) {\n      return null;\n    }\n    const { header, height, id, transactions } = block;\n    return {\n      id,\n      height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot\n      },\n      transactionIds: transactions.map((tx) => tx.id)\n    };\n  }\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params) {\n    const {\n      blocks: { edges, pageInfo }\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params\n      })\n    });\n    const blocks = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot\n      },\n      transactionIds: block.transactions.map((tx) => tx.id)\n    }));\n    return { blocks, pageInfo };\n  }\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(idOrHeight) {\n    let variables;\n    if (typeof idOrHeight === \"number\") {\n      variables = { blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(idOrHeight).toString(10) };\n    } else if (idOrHeight === \"latest\") {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else if (typeof idOrHeight === \"string\" && (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.isB256)(idOrHeight)) {\n      variables = { blockId: idOrHeight };\n    } else {\n      variables = { blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(idOrHeight).toString() };\n    }\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n    if (!block) {\n      return null;\n    }\n    return {\n      id: block.id,\n      height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(tx.rawPayload), 0)?.[0]\n      )\n    };\n  }\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction(transactionId) {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n    if (!transaction) {\n      return null;\n    }\n    try {\n      return new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(\n        (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(transaction.rawPayload),\n        0\n      )?.[0];\n    } catch (error) {\n      if (error instanceof _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError && error.code === _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n        console.warn(\"Unsupported transaction type encountered\");\n        return null;\n      }\n      throw error;\n    }\n  }\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs) {\n    const {\n      transactions: { edges, pageInfo }\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT\n      })\n    });\n    const coder = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder();\n    const transactions = edges.map(({ node: { rawPayload } }) => {\n      try {\n        return coder.decode((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload), 0)[0];\n      } catch (error) {\n        if (error instanceof _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError && error.code === _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n          console.warn(\"Unsupported transaction type encountered\");\n          return null;\n        }\n        throw error;\n      }\n    }).filter((tx) => tx !== null);\n    return { transactions, pageInfo };\n  }\n  /**\n   * Fetches a compressed block at the specified height.\n   *\n   * @param height - The height of the block to fetch.\n   * @returns The compressed block if available, otherwise `null`.\n   */\n  async daCompressedBlock(height) {\n    const { daCompressedBlock } = await this.operations.daCompressedBlock({\n      height\n    });\n    if (!daCompressedBlock) {\n      return null;\n    }\n    return daCompressedBlock;\n  }\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId) {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(contractId, assetId) {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId).toB256(),\n      asset: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId)\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(contractBalance.amount, 10);\n  }\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(owner, assetId) {\n    const { balance } = await this.operations.getBalanceV2({\n      owner: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner).toB256(),\n      assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId)\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(balance.amountU128, 10);\n  }\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(owner, paginationArgs) {\n    let args = { first: NON_PAGINATED_BALANCES_SIZE };\n    const { balancesPagination: supportsPagination } = await this.getNodeFeatures();\n    if (supportsPagination) {\n      args = validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: BALANCES_PAGE_SIZE_LIMIT\n      });\n    }\n    const {\n      balances: { edges, pageInfo }\n    } = await this.operations.getBalancesV2({\n      ...args,\n      filter: { owner: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner).toB256() },\n      supportsPagination\n    });\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amountU128)\n    }));\n    return {\n      balances,\n      ...supportsPagination ? { pageInfo } : {}\n    };\n  }\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(address, paginationArgs) {\n    const {\n      messages: { edges, pageInfo }\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT\n      }),\n      owner: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address).toB256()\n    });\n    const messages = edges.map(({ node }) => ({\n      messageId: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount),\n        data: node.data\n      }),\n      sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(node.sender),\n      recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(node.recipient),\n      nonce: node.nonce,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount),\n      data: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.decodeData(node.data),\n      daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.daHeight)\n    }));\n    return {\n      messages,\n      pageInfo\n    };\n  }\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(transactionId, nonce, commitBlockId, commitBlockHeight) {\n    let inputObject = {\n      transactionId,\n      nonce\n    };\n    if (commitBlockId && commitBlockHeight) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n        \"commitBlockId and commitBlockHeight cannot be used together\"\n      );\n    }\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId\n      };\n    }\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Convert BN into a number string required on the query\n        // This should probably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString()\n      };\n    }\n    const result = await this.operations.getMessageProof(inputObject);\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data\n    } = result.messageProof;\n    return {\n      messageProof: {\n        proofIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(messageProof.proofIndex),\n        proofSet: messageProof.proofSet\n      },\n      blockProof: {\n        proofIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(blockProof.proofIndex),\n        proofSet: blockProof.proofSet\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion)\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion)\n      },\n      sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(sender),\n      recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(recipient),\n      nonce,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount),\n      data\n    };\n  }\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice() {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(latestGasPrice.gasPrice);\n  }\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon) {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon)\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(estimateGasPrice.gasPrice);\n  }\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(nonce) {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount, startTime) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).toString(10),\n      startTimestamp: startTime ? _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.DateTime.fromUnixMilliseconds(startTime).toTai64() : void 0\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(latestBlockHeight);\n  }\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id) {\n    const type = await this.getAddressType(id);\n    return type === \"Account\";\n  }\n  /**\n   * Determines the type of address based on the provided ID.\n   *\n   * @param id - The ID to be checked.\n   * @returns A promise that resolves to a string indicating the type of address.\n   */\n  async getAddressType(id) {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id\n    });\n    if (contract) {\n      return \"Contract\";\n    }\n    if (blob) {\n      return \"Blob\";\n    }\n    if (transaction) {\n      return \"Transaction\";\n    }\n    try {\n      const asset = await this.getAssetDetails(id);\n      if (asset) {\n        return \"Asset\";\n      }\n    } catch (e) {\n    }\n    return \"Account\";\n  }\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async getTransactionResponse(transactionId) {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce) {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n    if (!rawMessage) {\n      return null;\n    }\n    const message = {\n      messageId: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(rawMessage.amount),\n        data: rawMessage.data\n      }),\n      sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(rawMessage.sender),\n      recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(rawMessage.recipient),\n      nonce,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(rawMessage.amount),\n      data: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.decodeData(rawMessage.data),\n      daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(rawMessage.daHeight)\n    };\n    return message;\n  }\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(relayedTransactionId) {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId\n    });\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n    return relayedTransactionStatus;\n  }\n  /**\n   * @hidden\n   */\n  extractDryRunError(transactionRequest, receipts, reason) {\n    let logs = [];\n    let groupedLogs = {};\n    if (transactionRequest.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script && transactionRequest.abis) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts,\n        mainAbi: transactionRequest.abis.main,\n        externalAbis: transactionRequest.abis.otherContractsAbis\n      }));\n    }\n    return extractTxError({\n      logs,\n      groupedLogs,\n      receipts,\n      statusReason: reason\n    });\n  }\n  /**\n   * @hidden\n   */\n  async getNodeFeatures() {\n    const { indexation } = await this.getNode();\n    return {\n      assetMetadata: Boolean(indexation?.assetMetadata),\n      balancesPagination: Boolean(indexation?.balances),\n      coinsToSpend: Boolean(indexation?.coinsToSpend)\n    };\n  }\n  /**\n   * @hidden\n   */\n  parseEstimatePredicatesResponse(transactionRequest, { inputs }) {\n    if (inputs) {\n      inputs.forEach((input, i) => {\n        if (input && \"predicateGasUsed\" in input && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed).gt(0)) {\n          transactionRequest.inputs[i].predicateGasUsed = input.predicateGasUsed;\n        }\n      });\n    }\n    return transactionRequest;\n  }\n  /**\n   * @hidden\n   *\n   * This helper adjusts the resources to be excluded for a given set of addresses.\n   * Supporting multiple addresses is important because of the `assembleTx` method,\n   * which may be invoked with different addresses. It handles both messages and UTXOs,\n   * ensuring the total number of inputs does not exceed the maximum allowed by the chain's\n   * consensus parameters. The resources specified in the `resourcesIdsToIgnore` parameter have priority\n   * over those retrieved from the cache.\n   */\n  async adjustResourcesToIgnoreForAddresses(addresses, resourcesIdsToIgnore) {\n    const final = {\n      messages: resourcesIdsToIgnore?.messages?.map((nonce) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(nonce)) || [],\n      utxos: resourcesIdsToIgnore?.utxos?.map((id) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(id)) || []\n    };\n    if (this.cache) {\n      const cache2 = this.cache;\n      const allCached = addresses.map((address) => cache2.getActiveData(address));\n      const {\n        consensusParameters: {\n          txParameters: { maxInputs: maxInputsBn }\n        }\n      } = await this.getChain();\n      const maxInputs = maxInputsBn.toNumber();\n      for (let i = 0; i < allCached.length; i++) {\n        let total = final.utxos.length + final.messages.length;\n        if (total >= maxInputs) {\n          break;\n        }\n        final.utxos = [...final.utxos, ...allCached[i].utxos.slice(0, maxInputs - total)];\n        total = final.utxos.length + final.messages.length;\n        if (total >= maxInputs) {\n          break;\n        }\n        final.messages = [...final.messages, ...allCached[i].messages.slice(0, maxInputs - total)];\n      }\n    }\n    return final;\n  }\n};\n\n// src/providers/transaction-summary/get-transaction-summary.ts\n\n\n\n\nasync function getTransactionSummary(params) {\n  const { id, provider, abiMap } = params;\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id\n  });\n  if (!gqlTransaction) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n  const [decodedTransaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(gqlTransaction.rawPayload),\n    0\n  );\n  let txReceipts = [];\n  if (gqlTransaction?.status && \"receipts\" in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n  const receipts = txReceipts.map(deserializeReceipt);\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0) : await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactionInfo = assembleTransactionSummary({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPerByte),\n    gasPriceFactor: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  });\n  return {\n    ...transactionInfo\n  };\n}\n__name(getTransactionSummary, \"getTransactionSummary\");\nasync function getTransactionSummaryFromRequest(params) {\n  const { provider, transactionRequest, abiMap } = params;\n  const { receipts } = await provider.dryRun(transactionRequest);\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactionSummary = assembleTransactionSummary({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  });\n  return transactionSummary;\n}\n__name(getTransactionSummaryFromRequest, \"getTransactionSummaryFromRequest\");\nasync function getTransactionsSummaries(params) {\n  const { filters, provider, abiMap } = params;\n  const { owner, ...inputArgs } = filters;\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT\n  });\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner\n  });\n  const { edges, pageInfo } = transactionsByOwner;\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n    const { id, rawPayload, status } = gqlTransaction;\n    const [decodedTransaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload), 0);\n    let txReceipts = [];\n    if (gqlTransaction?.status && \"receipts\" in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n    const receipts = txReceipts.map(deserializeReceipt);\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload),\n      gqlTransactionStatus: status,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId\n    });\n    const output = {\n      ...transactionSummary\n    };\n    return output;\n  });\n  return {\n    transactions,\n    pageInfo\n  };\n}\n__name(getTransactionsSummaries, \"getTransactionsSummaries\");\n\n// src/providers/transaction-summary/assemble-transaction-summary-from-serialized.ts\n\n\n\nvar assembleTransactionSummaryFromJson = /* @__PURE__ */ __name(async (opts) => {\n  const { provider, transactionSummary } = opts;\n  const { id, transactionBytes, gasPrice, receipts } = transactionSummary;\n  const {\n    consensusParameters: {\n      baseAssetId,\n      txParameters: { maxInputs, maxGasPerTx },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const deserializedTransactionBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(transactionBytes);\n  const [transaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(deserializedTransactionBytes, 0);\n  return assembleTransactionSummary({\n    id,\n    transaction,\n    transactionBytes: deserializedTransactionBytes,\n    receipts: receipts.map(deserializeReceipt),\n    gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice),\n    // From chain\n    baseAssetId,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPerByte,\n    gasPriceFactor\n  });\n}, \"assembleTransactionSummaryFromJson\");\n\n// src/providers/utils/transaction-response-serialization.ts\nvar serializeTransactionResponseJson = /* @__PURE__ */ __name(async (response) => {\n  const { id, status, abis, request: request2, provider, gqlTransaction, preConfirmationStatus } = response;\n  return {\n    id,\n    status,\n    abis,\n    requestJson: request2 ? JSON.stringify(request2.toJSON()) : void 0,\n    providerUrl: provider.url,\n    providerCache: await serializeProviderCache(provider),\n    gqlTransaction,\n    preConfirmationStatus\n  };\n}, \"serializeTransactionResponseJson\");\nvar deserializeTransactionResponseJson = /* @__PURE__ */ __name((json) => {\n  const {\n    id,\n    abis,\n    status,\n    providerUrl,\n    requestJson,\n    providerCache,\n    gqlTransaction,\n    preConfirmationStatus\n  } = json;\n  const provider = new Provider(providerUrl, { cache: providerCache });\n  const { chainId } = providerCache.chain.consensusParameters;\n  const response = new TransactionResponse(id, provider, Number(chainId), abis);\n  if (requestJson) {\n    response.request = transactionRequestify(JSON.parse(requestJson));\n  }\n  response.status = status;\n  response.gqlTransaction = gqlTransaction;\n  response.preConfirmationStatus = preConfirmationStatus;\n  return response;\n}, \"deserializeTransactionResponseJson\");\n\n// src/types.ts\nvar AbstractAccount = class {\n  static {\n    __name(this, \"AbstractAccount\");\n  }\n};\n\n// src/utils/formatTransferToContractScriptData.ts\n\n\n\n\nvar formatTransferToContractScriptData = /* @__PURE__ */ __name((transferParams) => {\n  const numberCoder = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\");\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId).toBytes(), encoded, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(assetId)]);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([acc, scriptData]);\n  }, new Uint8Array());\n}, \"formatTransferToContractScriptData\");\nvar assembleTransferToContractScript = /* @__PURE__ */ __name(async (transferParams) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n  await _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.initWasm();\n  let script = new Uint8Array();\n  transferParams.forEach((_, i) => {\n    const offset = (_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ASSET_ID_LEN) * i;\n    script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\n      script,\n      // Load ScriptData into register 0x10.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.gtf(16, 0, _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(17, 16, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(18, 17, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.lw(19, 18, 0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(20, 18, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.tr(17, 19, 20).to_bytes()\n    ]);\n  });\n  script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([script, _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.ret(1).to_bytes()]);\n  return { script, scriptData };\n}, \"assembleTransferToContractScript\");\n\n// src/utils/split-coins-into-batches.ts\nvar splitCoinsIntoBatches = /* @__PURE__ */ __name((coins, maxBatchLength) => {\n  const batchesNum = Math.ceil(coins.length / maxBatchLength);\n  const batches = [];\n  for (let i = 0; i < batchesNum; i += 1) {\n    const batchStart = i * maxBatchLength;\n    const batchEnd = (i + 1) * maxBatchLength;\n    batches.push(coins.slice(batchStart, batchEnd));\n  }\n  return batches;\n}, \"splitCoinsIntoBatches\");\n\n// src/account.ts\nvar MAX_FUNDING_ATTEMPTS = 5;\nvar Account = class extends AbstractAccount {\n  static {\n    __name(this, \"Account\");\n  }\n  /**\n   * The address associated with the account.\n   */\n  address;\n  /**\n   * The provider used to interact with the network.\n   */\n  _provider;\n  /**\n   * The connector for use with external wallets\n   */\n  _connector;\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address, provider, connector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n  }\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider() {\n    if (!this._provider) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_PROVIDER, \"Provider not set\");\n    }\n    return this._provider;\n  }\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider) {\n    this._provider = provider;\n  }\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider) {\n    this._provider = provider;\n    return this.provider;\n  }\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param resourcesIdsToIgnore - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(quantities, resourcesIdsToIgnore) {\n    return this.provider.getResourcesToSpend(this.address, quantities, resourcesIdsToIgnore);\n  }\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(assetId, paginationArgs) {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs) {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId) {\n    const assetIdToFetch = assetId ?? await this.provider.getBaseAssetId();\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances() {\n    return this.provider.getBalances(this.address);\n  }\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   *\n   * @deprecated Use provider.assembleTx instead\n   * Check the migration guide https://docs.fuel.network/docs/fuels-ts/transactions/assemble-tx-migration-guide/ for more information.\n   */\n  async fund(request2, params) {\n    const {\n      addedSignatures,\n      estimatedPredicates,\n      requiredQuantities,\n      updateMaxFee,\n      gasPrice,\n      transactionSummary\n    } = params;\n    const chainId = await this.provider.getChainId();\n    const fee = request2.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset = requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities\n    });\n    const quantitiesDict = {};\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0)\n      };\n    });\n    request2.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin2 = isRequestInputCoin(input);\n      const assetId = isCoin2 ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n    let missingQuantities = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned)\n        });\n      }\n    });\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request2.inputs, this.address)\n      );\n      request2.addResources(resources);\n      request2.updatePredicateGasUsed(estimatedPredicates);\n      const requestToReestimate2 = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(request2);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(\n          () => requestToReestimate2.addEmptyWitness()\n        );\n      }\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate2,\n        gasPrice\n      });\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request2.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId\n          }\n        ];\n      }\n      fundingAttempts += 1;\n    }\n    if (needsToBeFunded) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n    request2.updateState(chainId, \"funded\", transactionSummary);\n    await this.provider.validateTransaction(request2);\n    request2.updatePredicateGasUsed(estimatedPredicates);\n    const requestToReestimate = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(request2);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n    if (!updateMaxFee) {\n      return request2;\n    }\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice\n    });\n    request2.maxFee = maxFee;\n    return request2;\n  }\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(destination, amount, assetId, txParams = {}) {\n    let request2 = new ScriptTransactionRequest(txParams);\n    request2 = this.addTransfer(request2, {\n      destination,\n      amount,\n      assetId: assetId || await this.provider.getBaseAssetId()\n    });\n    const { gasPrice, transactionRequest } = await this.assembleTx(request2);\n    request2 = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee\n    });\n    return request2;\n  }\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(destination, amount, assetId, txParams = {}) {\n    const request2 = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request2, { estimateTxDependencies: false });\n  }\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(transferParams, txParams = {}) {\n    let request2 = new ScriptTransactionRequest(txParams);\n    request2 = this.addBatchTransfer(request2, transferParams);\n    const { gasPrice, transactionRequest } = await this.assembleTx(request2);\n    request2 = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee\n    });\n    return this.sendTransaction(request2, { estimateTxDependencies: false });\n  }\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request2, transferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request2.addCoinOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(destination), amount, assetId);\n    return request2;\n  }\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request2, transferParams) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request2, {\n        destination,\n        amount,\n        assetId\n      });\n    });\n    return request2;\n  }\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(contractId, amount, assetId, txParams = {}) {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n  async batchTransferToContracts(contractTransferParams, txParams = {}) {\n    let request2 = new ScriptTransactionRequest({\n      ...txParams\n    });\n    const quantities = [];\n    const defaultAssetId = await this.provider.getBaseAssetId();\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(transferParam.amount);\n      const contractAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(transferParam.contractId);\n      const assetId = transferParam.assetId ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transferParam.assetId) : defaultAssetId;\n      if (amount.lte(0)) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSFER_AMOUNT,\n          \"Transfer amount must be a positive number.\"\n        );\n      }\n      request2.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId\n      };\n    });\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n    request2.script = script;\n    request2.scriptData = scriptData;\n    const { gasPrice, transactionRequest } = await this.assembleTx(request2, quantities);\n    request2 = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee\n    });\n    return this.sendTransaction(request2);\n  }\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(recipient, amount, txParams = {}) {\n    const recipientAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(recipient);\n    const recipientDataArray = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\n      \"0x\".concat(recipientAddress.toHexString().substring(2).padStart(64, \"0\"))\n    );\n    const amountDataArray = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\n      \"0x\".concat((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).toHex().substring(2).padStart(16, \"0\"))\n    );\n    const script = new Uint8Array([\n      ...(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray\n    ]);\n    const params = { script, ...txParams };\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request2 = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount), assetId: baseAssetId }];\n    const { gasPrice, transactionRequest } = await this.assembleTx(request2, quantities);\n    request2 = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee\n    });\n    return this.sendTransaction(request2);\n  }\n  /**\n   * Consolidates base asset UTXOs into fewer, larger ones.\n   *\n   * Retrieves a limited number of base asset coins (as defined by `Provider.RESOURCES_PAGE_SIZE_LIMIT`),\n   * assembles consolidation transactions, and submits them to the network.\n   *\n   * Note: This method currently supports only the base asset.\n   *\n   * @param params - The parameters for coin consolidation, including the asset ID, mode, and output number.\n   * @returns A promise that resolves to the response of the submitted transactions.\n   * @throws Will throw an error if the asset is not a base asset as non-base asset consolidation is not implemented.\n   */\n  async consolidateCoins(params) {\n    const { assetId } = params;\n    const { coins } = await this.getCoins(assetId);\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const isBaseAsset = baseAssetId === assetId;\n    let submitAll;\n    const consolidationParams = {\n      coins,\n      mode: params.mode,\n      outputNum: params.outputNum\n    };\n    if (isBaseAsset) {\n      ({ submitAll } = await this.assembleBaseAssetConsolidationTxs(consolidationParams));\n    } else {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_FEATURE,\n        \"Consolidation for non-base assets is not supported yet.\"\n      );\n    }\n    return submitAll();\n  }\n  /**\n   * Assembles transactions for consolidating base asset coins into fewer UTXOs.\n   *\n   * This method splits the provided coins into batches and creates transaction requests\n   * to consolidate them. It calculates the necessary fee and sets up the transactions\n   * to be submitted either in parallel (default) or sequentially.\n   *\n   * @param params - The parameters for assembling base asset consolidation transactions.\n   *\n   * @returns An object containing the assembled transactions, the total fee cost, and a callback to submit all transactions.\n   */\n  async assembleBaseAssetConsolidationTxs(params) {\n    const { coins, mode = \"parallel\", outputNum = 1 } = params;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    this.validateConsolidationTxsCoins(coins, baseAssetId);\n    const chainInfo = await this.provider.getChain();\n    const maxInputsNumber = chainInfo.consensusParameters.txParameters.maxInputs.toNumber();\n    let totalFeeCost = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    const txs = [];\n    const coinsBatches = splitCoinsIntoBatches(coins, maxInputsNumber);\n    const gasPrice = await this.provider.estimateGasPrice(10);\n    const consolidateMoreThanOneCoin = outputNum > 1;\n    coinsBatches.filter((batch) => batch.length > 1).forEach((coinBatch) => {\n      const request2 = new ScriptTransactionRequest({\n        script: \"0x\"\n      });\n      request2.addResources(coinBatch);\n      if (consolidateMoreThanOneCoin) {\n        Array.from({ length: outputNum - 1 }).forEach(() => {\n          request2.addCoinOutput(this.address, 0, baseAssetId);\n        });\n      }\n      const minGas = request2.calculateMinGas(chainInfo);\n      const fee = calculateGasFee({\n        gasPrice,\n        gas: minGas,\n        priceFactor: chainInfo.consensusParameters.feeParameters.gasPriceFactor,\n        tip: request2.tip\n      });\n      request2.maxFee = fee;\n      if (consolidateMoreThanOneCoin) {\n        const total = request2.inputs.filter(isRequestInputCoin).reduce((acc, input) => acc.add(input.amount), (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0));\n        const amountPerNewUtxo = total.div(outputNum + 1);\n        request2.outputs.forEach((output) => {\n          if (output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin) {\n            output.amount = amountPerNewUtxo;\n          }\n        });\n      }\n      totalFeeCost = totalFeeCost.add(fee);\n      txs.push(request2);\n    });\n    const submitAll = this.prepareSubmitAll({ txs, mode });\n    return { txs, totalFeeCost, submitAll };\n  }\n  /**\n   * Prepares a function to submit all transactions either sequentially or in parallel.\n   *\n   * @param params - The parameters for preparing the submitAll callback.\n   *\n   * @returns A callback that, when called, submits all transactions and returns their results and any errors encountered.\n   */\n  prepareSubmitAll = /* @__PURE__ */ __name((params) => {\n    const { txs, mode = \"sequential\" } = params;\n    return async () => {\n      const txResponses = [];\n      const errors = [];\n      if (mode === \"sequential\") {\n        for (const tx of txs) {\n          try {\n            const submit = await this.sendTransaction(tx);\n            const response = await submit.waitForResult();\n            txResponses.push(response);\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n      } else {\n        const results = await Promise.allSettled(\n          txs.map(async (tx) => {\n            const submit = await this.sendTransaction(tx);\n            return submit.waitForResult();\n          })\n        );\n        results.forEach((result) => {\n          if (result.status === \"fulfilled\") {\n            txResponses.push(result.value);\n          } else {\n            errors.push(result.reason);\n          }\n        });\n      }\n      return { txResponses, errors };\n    };\n  }, \"prepareSubmitAll\");\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   *\n   * @deprecated Use provider.assembleTx instead\n   * Check the migration guide https://docs.fuel.network/docs/fuels-ts/transactions/assemble-tx-migration-guide/ for more information.\n   */\n  async getTransactionCost(transactionRequestLike, { signatureCallback, quantities = [], gasPrice } = {}) {\n    const txRequestClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(\"100000000000000000\") }];\n    const findAssetInput = /* @__PURE__ */ __name((assetId) => txRequestClone.inputs.find((input) => {\n      if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin) {\n        return input.assetId === assetId;\n      }\n      if (isRequestInputMessageWithoutData(input)) {\n        return baseAssetId === assetId;\n      }\n      return false;\n    }), \"findAssetInput\");\n    const updateAssetInput = /* @__PURE__ */ __name((assetId, quantity) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n      if (assetInput && \"amount\" in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId\n            }\n          ])\n        );\n      }\n    }, \"updateAssetInput\");\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(\n      ({ amount, assetId }) => updateAssetInput(assetId, amount)\n    );\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n      gasPrice\n    });\n    return {\n      ...txCost,\n      requiredQuantities\n    };\n  }\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message) {\n    if (!this._connector) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_CONNECTOR, \"A connector is required to sign messages.\");\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike, connectorOptions = {}) {\n    if (!this._connector) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_CONNECTOR,\n        \"A connector is required to sign transactions.\"\n      );\n    }\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const { transactionRequest: requestToSign, connectorsSendTxParams } = await this.setTransactionStateForConnectors({\n      transactionRequest,\n      connectorOptions\n    });\n    return this._connector.signTransaction(\n      this.address.toString(),\n      requestToSign,\n      connectorsSendTxParams\n    );\n  }\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, ...connectorOptions } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (this._connector) {\n      const response = await this.setTransactionStateForConnectors({\n        transactionRequest,\n        connectorOptions\n      });\n      const transaction = await this._connector.sendTransaction(\n        this.address.toString(),\n        response.transactionRequest,\n        response.connectorsSendTxParams\n      );\n      return typeof transaction === \"string\" ? this.provider.getTransactionResponse(transaction) : transaction;\n    }\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n  }\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins) {\n    return coins.map((coin) => ({\n      id: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN)),\n      owner: this.address,\n      blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1),\n      txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1),\n      ...coin\n    }));\n  }\n  /** @hidden */\n  async prepareTransactionForSend(request2) {\n    const { transactionId } = request2.flag;\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(transactionId)) {\n      return request2;\n    }\n    const chainId = await this.provider.getChainId();\n    const currentTransactionId = request2.getTransactionId(chainId);\n    if (transactionId !== currentTransactionId) {\n      request2.updateState(chainId);\n    }\n    return request2;\n  }\n  /** @hidden */\n  async prepareTransactionSummary(request2) {\n    const chainId = await this.provider.getChainId();\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(request2.flag.summary) ? {\n      ...request2.flag.summary,\n      id: request2.getTransactionId(chainId),\n      transactionBytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(request2.toTransactionBytes())\n    } : void 0;\n  }\n  /** @hidden * */\n  async assembleTx(transactionRequest, quantities = []) {\n    const outputQuantities = transactionRequest.outputs.filter((o) => o.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin).map(({ amount, assetId }) => ({ assetId: String(assetId), amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount) }));\n    transactionRequest.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    transactionRequest.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    const { assembledRequest, gasPrice } = await this.provider.assembleTx({\n      request: transactionRequest,\n      accountCoinQuantities: mergeQuantities(outputQuantities, quantities),\n      feePayerAccount: this\n    });\n    return { transactionRequest: assembledRequest, gasPrice };\n  }\n  /** @hidden * */\n  validateTransferAmount(amount) {\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).lte(0)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSFER_AMOUNT,\n        \"Transfer amount must be a positive number.\"\n      );\n    }\n  }\n  /** @hidden * */\n  async estimateAndFundTransaction(transactionRequest, txParams, costParams) {\n    let request2 = transactionRequest;\n    const txCost = await this.getTransactionCost(request2, costParams);\n    request2 = this.validateGasLimitAndMaxFee({\n      transactionRequest: request2,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams\n    });\n    request2 = await this.fund(request2, txCost);\n    return request2;\n  }\n  /** @hidden * */\n  validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee }\n  }) {\n    const request2 = transactionRequestify(transactionRequest);\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(setGasLimit)) {\n      request2.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(setMaxFee)) {\n      request2.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n    return request2;\n  }\n  /** @hidden * */\n  validateConsolidationTxsCoins(coins, assetId) {\n    if (coins.length <= 1) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NO_COINS_TO_CONSOLIDATE, \"No coins to consolidate.\");\n    }\n    if (!coins.every((c) => c.assetId === assetId)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.COINS_ASSET_ID_MISMATCH,\n        \"All coins to consolidate must be from the same asset id.\"\n      );\n    }\n  }\n  /** @hidden * */\n  async setTransactionStateForConnectors(params) {\n    const { transactionRequest: requestToPrepare, connectorOptions } = params;\n    const { onBeforeSend, skipCustomFee = false } = connectorOptions;\n    const transactionRequest = await this.prepareTransactionForSend(requestToPrepare);\n    const connectorsSendTxParams = {\n      onBeforeSend,\n      skipCustomFee,\n      provider: {\n        url: this.provider.url,\n        cache: await serializeProviderCache(this.provider)\n      },\n      transactionState: requestToPrepare.flag.state,\n      transactionSummary: await this.prepareTransactionSummary(requestToPrepare)\n    };\n    return { transactionRequest, connectorsSendTxParams };\n  }\n};\n\n// src/wallet/base-wallet-unlocked.ts\n\n\n\n// src/signer/signer.ts\n\n\n\n\n\n\nvar Signer = class _Signer {\n  static {\n    __name(this, \"Signer\");\n  }\n  address;\n  publicKey;\n  compressedPublicKey;\n  privateKey;\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey) {\n    if (typeof privateKey === \"string\") {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    const privateKeyBytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(privateKey, 32);\n    this.privateKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(privateKeyBytes);\n    this.publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(this.publicKey);\n  }\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data) {\n    const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.sign((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(data), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.privateKey));\n    const r = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(`0x${signature.r.toString(16)}`, 32);\n    const s = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(`0x${signature.s.toString(16)}`, 32);\n    s[0] |= (signature.recovery || 0) << 7;\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([r, s]));\n  }\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point) {\n    const p0 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.ProjectivePoint.fromHex((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.compressedPublicKey));\n    const p1 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.ProjectivePoint.fromHex((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data, signature) {\n    const signedMessageBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 128) >> 7;\n    s[0] &= 127;\n    const sig = new _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.Signature(BigInt((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(r)), BigInt((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(s))).addRecoveryBit(\n      recoveryParam\n    );\n    const publicKey = sig.recoverPublicKey((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(data)).toRawBytes(false).slice(1);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(publicKey);\n  }\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data, signature) {\n    return new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(_Signer.recoverPublicKey(data, signature));\n  }\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy) {\n    return entropy ? (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hash)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([(0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(entropy)])) : (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32);\n  }\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey) {\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_16__.secp256k1.ProjectivePoint.fromHex((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(publicKey));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(point.toRawBytes(false).slice(1));\n  }\n};\n\n// src/wallet/keystore-wallet.ts\n\n\n\n\nvar DEFAULT_KDF_PARAMS_LOG_N = 13;\nvar DEFAULT_KDF_PARAMS_R = 8;\nvar DEFAULT_KDF_PARAMS_P = 1;\nvar DEFAULT_KEY_SIZE = 32;\nvar DEFAULT_IV_SIZE = 16;\nvar removeHexPrefix = /* @__PURE__ */ __name((hexString) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n  return hexString;\n}, \"removeHexPrefix\");\nasync function encryptKeystoreWallet(privateKey, address, password) {\n  const privateKeyBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(removeHexPrefix(privateKey), \"hex\");\n  const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n  const salt = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(DEFAULT_KEY_SIZE);\n  const key = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.scrypt)({\n    password: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P\n  });\n  const iv = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(DEFAULT_IV_SIZE);\n  const ciphertext = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.encryptJsonWalletData)(privateKeyBuffer, key, iv);\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n  const macHashUint8Array = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.keccak256)(data);\n  const mac = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(macHashUint8Array, \"hex\");\n  const keystore = {\n    id: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: \"aes-128-ctr\",\n      mac,\n      cipherparams: { iv: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(iv, \"hex\") },\n      ciphertext: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(ciphertext, \"hex\"),\n      kdf: \"scrypt\",\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(salt, \"hex\")\n      }\n    }\n  };\n  return JSON.stringify(keystore);\n}\n__name(encryptKeystoreWallet, \"encryptKeystoreWallet\");\nasync function decryptKeystoreWallet(jsonWallet, password) {\n  const keystoreWallet = JSON.parse(jsonWallet);\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt }\n    }\n  } = keystoreWallet;\n  const ciphertextBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(ciphertext, \"hex\");\n  const ivBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(iv, \"hex\");\n  const saltBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(salt, \"hex\");\n  const passwordBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(password);\n  const key = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.scrypt)({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen\n  });\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n  const macHashUint8Array = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.keccak256)(data);\n  const macHash = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(macHashUint8Array, \"hex\");\n  if (mac !== macHash) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PASSWORD,\n      \"Failed to decrypt the keystore wallet, the provided password is incorrect.\"\n    );\n  }\n  const buffer = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.decryptJsonWalletData)(ciphertextBuffer, key, ivBuffer);\n  const privateKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(buffer);\n  return privateKey;\n}\n__name(decryptKeystoreWallet, \"decryptKeystoreWallet\");\n\n// src/wallet/base-wallet-unlocked.ts\nvar BaseWalletUnlocked = class extends Account {\n  static {\n    __name(this, \"BaseWalletUnlocked\");\n  }\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer;\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey, provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey() {\n    return this.signer().privateKey;\n  }\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey() {\n    return this.signer().publicKey;\n  }\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signMessage(message) {\n    const signedMessage = await this.signer().sign((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hashMessage)(message));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(signedMessage);\n  }\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(signature);\n  }\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const signedTransaction = await this.signTransaction(transactionRequest);\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n    return transactionRequest;\n  }\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = false, enableAssetBurn } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false\n      }\n    );\n  }\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password) {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n};\n\n// src/hdwallet/hdwallet.ts\n\n\n\n\n\n\n// src/mnemonic/mnemonic.ts\n\n\n\n\n\n// src/wordlists/words/english.ts\nvar english = [\n  \"abandon\",\n  \"ability\",\n  \"able\",\n  \"about\",\n  \"above\",\n  \"absent\",\n  \"absorb\",\n  \"abstract\",\n  \"absurd\",\n  \"abuse\",\n  \"access\",\n  \"accident\",\n  \"account\",\n  \"accuse\",\n  \"achieve\",\n  \"acid\",\n  \"acoustic\",\n  \"acquire\",\n  \"across\",\n  \"act\",\n  \"action\",\n  \"actor\",\n  \"actress\",\n  \"actual\",\n  \"adapt\",\n  \"add\",\n  \"addict\",\n  \"address\",\n  \"adjust\",\n  \"admit\",\n  \"adult\",\n  \"advance\",\n  \"advice\",\n  \"aerobic\",\n  \"affair\",\n  \"afford\",\n  \"afraid\",\n  \"again\",\n  \"age\",\n  \"agent\",\n  \"agree\",\n  \"ahead\",\n  \"aim\",\n  \"air\",\n  \"airport\",\n  \"aisle\",\n  \"alarm\",\n  \"album\",\n  \"alcohol\",\n  \"alert\",\n  \"alien\",\n  \"all\",\n  \"alley\",\n  \"allow\",\n  \"almost\",\n  \"alone\",\n  \"alpha\",\n  \"already\",\n  \"also\",\n  \"alter\",\n  \"always\",\n  \"amateur\",\n  \"amazing\",\n  \"among\",\n  \"amount\",\n  \"amused\",\n  \"analyst\",\n  \"anchor\",\n  \"ancient\",\n  \"anger\",\n  \"angle\",\n  \"angry\",\n  \"animal\",\n  \"ankle\",\n  \"announce\",\n  \"annual\",\n  \"another\",\n  \"answer\",\n  \"antenna\",\n  \"antique\",\n  \"anxiety\",\n  \"any\",\n  \"apart\",\n  \"apology\",\n  \"appear\",\n  \"apple\",\n  \"approve\",\n  \"april\",\n  \"arch\",\n  \"arctic\",\n  \"area\",\n  \"arena\",\n  \"argue\",\n  \"arm\",\n  \"armed\",\n  \"armor\",\n  \"army\",\n  \"around\",\n  \"arrange\",\n  \"arrest\",\n  \"arrive\",\n  \"arrow\",\n  \"art\",\n  \"artefact\",\n  \"artist\",\n  \"artwork\",\n  \"ask\",\n  \"aspect\",\n  \"assault\",\n  \"asset\",\n  \"assist\",\n  \"assume\",\n  \"asthma\",\n  \"athlete\",\n  \"atom\",\n  \"attack\",\n  \"attend\",\n  \"attitude\",\n  \"attract\",\n  \"auction\",\n  \"audit\",\n  \"august\",\n  \"aunt\",\n  \"author\",\n  \"auto\",\n  \"autumn\",\n  \"average\",\n  \"avocado\",\n  \"avoid\",\n  \"awake\",\n  \"aware\",\n  \"away\",\n  \"awesome\",\n  \"awful\",\n  \"awkward\",\n  \"axis\",\n  \"baby\",\n  \"bachelor\",\n  \"bacon\",\n  \"badge\",\n  \"bag\",\n  \"balance\",\n  \"balcony\",\n  \"ball\",\n  \"bamboo\",\n  \"banana\",\n  \"banner\",\n  \"bar\",\n  \"barely\",\n  \"bargain\",\n  \"barrel\",\n  \"base\",\n  \"basic\",\n  \"basket\",\n  \"battle\",\n  \"beach\",\n  \"bean\",\n  \"beauty\",\n  \"because\",\n  \"become\",\n  \"beef\",\n  \"before\",\n  \"begin\",\n  \"behave\",\n  \"behind\",\n  \"believe\",\n  \"below\",\n  \"belt\",\n  \"bench\",\n  \"benefit\",\n  \"best\",\n  \"betray\",\n  \"better\",\n  \"between\",\n  \"beyond\",\n  \"bicycle\",\n  \"bid\",\n  \"bike\",\n  \"bind\",\n  \"biology\",\n  \"bird\",\n  \"birth\",\n  \"bitter\",\n  \"black\",\n  \"blade\",\n  \"blame\",\n  \"blanket\",\n  \"blast\",\n  \"bleak\",\n  \"bless\",\n  \"blind\",\n  \"blood\",\n  \"blossom\",\n  \"blouse\",\n  \"blue\",\n  \"blur\",\n  \"blush\",\n  \"board\",\n  \"boat\",\n  \"body\",\n  \"boil\",\n  \"bomb\",\n  \"bone\",\n  \"bonus\",\n  \"book\",\n  \"boost\",\n  \"border\",\n  \"boring\",\n  \"borrow\",\n  \"boss\",\n  \"bottom\",\n  \"bounce\",\n  \"box\",\n  \"boy\",\n  \"bracket\",\n  \"brain\",\n  \"brand\",\n  \"brass\",\n  \"brave\",\n  \"bread\",\n  \"breeze\",\n  \"brick\",\n  \"bridge\",\n  \"brief\",\n  \"bright\",\n  \"bring\",\n  \"brisk\",\n  \"broccoli\",\n  \"broken\",\n  \"bronze\",\n  \"broom\",\n  \"brother\",\n  \"brown\",\n  \"brush\",\n  \"bubble\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"build\",\n  \"bulb\",\n  \"bulk\",\n  \"bullet\",\n  \"bundle\",\n  \"bunker\",\n  \"burden\",\n  \"burger\",\n  \"burst\",\n  \"bus\",\n  \"business\",\n  \"busy\",\n  \"butter\",\n  \"buyer\",\n  \"buzz\",\n  \"cabbage\",\n  \"cabin\",\n  \"cable\",\n  \"cactus\",\n  \"cage\",\n  \"cake\",\n  \"call\",\n  \"calm\",\n  \"camera\",\n  \"camp\",\n  \"can\",\n  \"canal\",\n  \"cancel\",\n  \"candy\",\n  \"cannon\",\n  \"canoe\",\n  \"canvas\",\n  \"canyon\",\n  \"capable\",\n  \"capital\",\n  \"captain\",\n  \"car\",\n  \"carbon\",\n  \"card\",\n  \"cargo\",\n  \"carpet\",\n  \"carry\",\n  \"cart\",\n  \"case\",\n  \"cash\",\n  \"casino\",\n  \"castle\",\n  \"casual\",\n  \"cat\",\n  \"catalog\",\n  \"catch\",\n  \"category\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"caution\",\n  \"cave\",\n  \"ceiling\",\n  \"celery\",\n  \"cement\",\n  \"census\",\n  \"century\",\n  \"cereal\",\n  \"certain\",\n  \"chair\",\n  \"chalk\",\n  \"champion\",\n  \"change\",\n  \"chaos\",\n  \"chapter\",\n  \"charge\",\n  \"chase\",\n  \"chat\",\n  \"cheap\",\n  \"check\",\n  \"cheese\",\n  \"chef\",\n  \"cherry\",\n  \"chest\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"chimney\",\n  \"choice\",\n  \"choose\",\n  \"chronic\",\n  \"chuckle\",\n  \"chunk\",\n  \"churn\",\n  \"cigar\",\n  \"cinnamon\",\n  \"circle\",\n  \"citizen\",\n  \"city\",\n  \"civil\",\n  \"claim\",\n  \"clap\",\n  \"clarify\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clerk\",\n  \"clever\",\n  \"click\",\n  \"client\",\n  \"cliff\",\n  \"climb\",\n  \"clinic\",\n  \"clip\",\n  \"clock\",\n  \"clog\",\n  \"close\",\n  \"cloth\",\n  \"cloud\",\n  \"clown\",\n  \"club\",\n  \"clump\",\n  \"cluster\",\n  \"clutch\",\n  \"coach\",\n  \"coast\",\n  \"coconut\",\n  \"code\",\n  \"coffee\",\n  \"coil\",\n  \"coin\",\n  \"collect\",\n  \"color\",\n  \"column\",\n  \"combine\",\n  \"come\",\n  \"comfort\",\n  \"comic\",\n  \"common\",\n  \"company\",\n  \"concert\",\n  \"conduct\",\n  \"confirm\",\n  \"congress\",\n  \"connect\",\n  \"consider\",\n  \"control\",\n  \"convince\",\n  \"cook\",\n  \"cool\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"core\",\n  \"corn\",\n  \"correct\",\n  \"cost\",\n  \"cotton\",\n  \"couch\",\n  \"country\",\n  \"couple\",\n  \"course\",\n  \"cousin\",\n  \"cover\",\n  \"coyote\",\n  \"crack\",\n  \"cradle\",\n  \"craft\",\n  \"cram\",\n  \"crane\",\n  \"crash\",\n  \"crater\",\n  \"crawl\",\n  \"crazy\",\n  \"cream\",\n  \"credit\",\n  \"creek\",\n  \"crew\",\n  \"cricket\",\n  \"crime\",\n  \"crisp\",\n  \"critic\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crowd\",\n  \"crucial\",\n  \"cruel\",\n  \"cruise\",\n  \"crumble\",\n  \"crunch\",\n  \"crush\",\n  \"cry\",\n  \"crystal\",\n  \"cube\",\n  \"culture\",\n  \"cup\",\n  \"cupboard\",\n  \"curious\",\n  \"current\",\n  \"curtain\",\n  \"curve\",\n  \"cushion\",\n  \"custom\",\n  \"cute\",\n  \"cycle\",\n  \"dad\",\n  \"damage\",\n  \"damp\",\n  \"dance\",\n  \"danger\",\n  \"daring\",\n  \"dash\",\n  \"daughter\",\n  \"dawn\",\n  \"day\",\n  \"deal\",\n  \"debate\",\n  \"debris\",\n  \"decade\",\n  \"december\",\n  \"decide\",\n  \"decline\",\n  \"decorate\",\n  \"decrease\",\n  \"deer\",\n  \"defense\",\n  \"define\",\n  \"defy\",\n  \"degree\",\n  \"delay\",\n  \"deliver\",\n  \"demand\",\n  \"demise\",\n  \"denial\",\n  \"dentist\",\n  \"deny\",\n  \"depart\",\n  \"depend\",\n  \"deposit\",\n  \"depth\",\n  \"deputy\",\n  \"derive\",\n  \"describe\",\n  \"desert\",\n  \"design\",\n  \"desk\",\n  \"despair\",\n  \"destroy\",\n  \"detail\",\n  \"detect\",\n  \"develop\",\n  \"device\",\n  \"devote\",\n  \"diagram\",\n  \"dial\",\n  \"diamond\",\n  \"diary\",\n  \"dice\",\n  \"diesel\",\n  \"diet\",\n  \"differ\",\n  \"digital\",\n  \"dignity\",\n  \"dilemma\",\n  \"dinner\",\n  \"dinosaur\",\n  \"direct\",\n  \"dirt\",\n  \"disagree\",\n  \"discover\",\n  \"disease\",\n  \"dish\",\n  \"dismiss\",\n  \"disorder\",\n  \"display\",\n  \"distance\",\n  \"divert\",\n  \"divide\",\n  \"divorce\",\n  \"dizzy\",\n  \"doctor\",\n  \"document\",\n  \"dog\",\n  \"doll\",\n  \"dolphin\",\n  \"domain\",\n  \"donate\",\n  \"donkey\",\n  \"donor\",\n  \"door\",\n  \"dose\",\n  \"double\",\n  \"dove\",\n  \"draft\",\n  \"dragon\",\n  \"drama\",\n  \"drastic\",\n  \"draw\",\n  \"dream\",\n  \"dress\",\n  \"drift\",\n  \"drill\",\n  \"drink\",\n  \"drip\",\n  \"drive\",\n  \"drop\",\n  \"drum\",\n  \"dry\",\n  \"duck\",\n  \"dumb\",\n  \"dune\",\n  \"during\",\n  \"dust\",\n  \"dutch\",\n  \"duty\",\n  \"dwarf\",\n  \"dynamic\",\n  \"eager\",\n  \"eagle\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"easily\",\n  \"east\",\n  \"easy\",\n  \"echo\",\n  \"ecology\",\n  \"economy\",\n  \"edge\",\n  \"edit\",\n  \"educate\",\n  \"effort\",\n  \"egg\",\n  \"eight\",\n  \"either\",\n  \"elbow\",\n  \"elder\",\n  \"electric\",\n  \"elegant\",\n  \"element\",\n  \"elephant\",\n  \"elevator\",\n  \"elite\",\n  \"else\",\n  \"embark\",\n  \"embody\",\n  \"embrace\",\n  \"emerge\",\n  \"emotion\",\n  \"employ\",\n  \"empower\",\n  \"empty\",\n  \"enable\",\n  \"enact\",\n  \"end\",\n  \"endless\",\n  \"endorse\",\n  \"enemy\",\n  \"energy\",\n  \"enforce\",\n  \"engage\",\n  \"engine\",\n  \"enhance\",\n  \"enjoy\",\n  \"enlist\",\n  \"enough\",\n  \"enrich\",\n  \"enroll\",\n  \"ensure\",\n  \"enter\",\n  \"entire\",\n  \"entry\",\n  \"envelope\",\n  \"episode\",\n  \"equal\",\n  \"equip\",\n  \"era\",\n  \"erase\",\n  \"erode\",\n  \"erosion\",\n  \"error\",\n  \"erupt\",\n  \"escape\",\n  \"essay\",\n  \"essence\",\n  \"estate\",\n  \"eternal\",\n  \"ethics\",\n  \"evidence\",\n  \"evil\",\n  \"evoke\",\n  \"evolve\",\n  \"exact\",\n  \"example\",\n  \"excess\",\n  \"exchange\",\n  \"excite\",\n  \"exclude\",\n  \"excuse\",\n  \"execute\",\n  \"exercise\",\n  \"exhaust\",\n  \"exhibit\",\n  \"exile\",\n  \"exist\",\n  \"exit\",\n  \"exotic\",\n  \"expand\",\n  \"expect\",\n  \"expire\",\n  \"explain\",\n  \"expose\",\n  \"express\",\n  \"extend\",\n  \"extra\",\n  \"eye\",\n  \"eyebrow\",\n  \"fabric\",\n  \"face\",\n  \"faculty\",\n  \"fade\",\n  \"faint\",\n  \"faith\",\n  \"fall\",\n  \"false\",\n  \"fame\",\n  \"family\",\n  \"famous\",\n  \"fan\",\n  \"fancy\",\n  \"fantasy\",\n  \"farm\",\n  \"fashion\",\n  \"fat\",\n  \"fatal\",\n  \"father\",\n  \"fatigue\",\n  \"fault\",\n  \"favorite\",\n  \"feature\",\n  \"february\",\n  \"federal\",\n  \"fee\",\n  \"feed\",\n  \"feel\",\n  \"female\",\n  \"fence\",\n  \"festival\",\n  \"fetch\",\n  \"fever\",\n  \"few\",\n  \"fiber\",\n  \"fiction\",\n  \"field\",\n  \"figure\",\n  \"file\",\n  \"film\",\n  \"filter\",\n  \"final\",\n  \"find\",\n  \"fine\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"firm\",\n  \"first\",\n  \"fiscal\",\n  \"fish\",\n  \"fit\",\n  \"fitness\",\n  \"fix\",\n  \"flag\",\n  \"flame\",\n  \"flash\",\n  \"flat\",\n  \"flavor\",\n  \"flee\",\n  \"flight\",\n  \"flip\",\n  \"float\",\n  \"flock\",\n  \"floor\",\n  \"flower\",\n  \"fluid\",\n  \"flush\",\n  \"fly\",\n  \"foam\",\n  \"focus\",\n  \"fog\",\n  \"foil\",\n  \"fold\",\n  \"follow\",\n  \"food\",\n  \"foot\",\n  \"force\",\n  \"forest\",\n  \"forget\",\n  \"fork\",\n  \"fortune\",\n  \"forum\",\n  \"forward\",\n  \"fossil\",\n  \"foster\",\n  \"found\",\n  \"fox\",\n  \"fragile\",\n  \"frame\",\n  \"frequent\",\n  \"fresh\",\n  \"friend\",\n  \"fringe\",\n  \"frog\",\n  \"front\",\n  \"frost\",\n  \"frown\",\n  \"frozen\",\n  \"fruit\",\n  \"fuel\",\n  \"fun\",\n  \"funny\",\n  \"furnace\",\n  \"fury\",\n  \"future\",\n  \"gadget\",\n  \"gain\",\n  \"galaxy\",\n  \"gallery\",\n  \"game\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"garlic\",\n  \"garment\",\n  \"gas\",\n  \"gasp\",\n  \"gate\",\n  \"gather\",\n  \"gauge\",\n  \"gaze\",\n  \"general\",\n  \"genius\",\n  \"genre\",\n  \"gentle\",\n  \"genuine\",\n  \"gesture\",\n  \"ghost\",\n  \"giant\",\n  \"gift\",\n  \"giggle\",\n  \"ginger\",\n  \"giraffe\",\n  \"girl\",\n  \"give\",\n  \"glad\",\n  \"glance\",\n  \"glare\",\n  \"glass\",\n  \"glide\",\n  \"glimpse\",\n  \"globe\",\n  \"gloom\",\n  \"glory\",\n  \"glove\",\n  \"glow\",\n  \"glue\",\n  \"goat\",\n  \"goddess\",\n  \"gold\",\n  \"good\",\n  \"goose\",\n  \"gorilla\",\n  \"gospel\",\n  \"gossip\",\n  \"govern\",\n  \"gown\",\n  \"grab\",\n  \"grace\",\n  \"grain\",\n  \"grant\",\n  \"grape\",\n  \"grass\",\n  \"gravity\",\n  \"great\",\n  \"green\",\n  \"grid\",\n  \"grief\",\n  \"grit\",\n  \"grocery\",\n  \"group\",\n  \"grow\",\n  \"grunt\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"guilt\",\n  \"guitar\",\n  \"gun\",\n  \"gym\",\n  \"habit\",\n  \"hair\",\n  \"half\",\n  \"hammer\",\n  \"hamster\",\n  \"hand\",\n  \"happy\",\n  \"harbor\",\n  \"hard\",\n  \"harsh\",\n  \"harvest\",\n  \"hat\",\n  \"have\",\n  \"hawk\",\n  \"hazard\",\n  \"head\",\n  \"health\",\n  \"heart\",\n  \"heavy\",\n  \"hedgehog\",\n  \"height\",\n  \"hello\",\n  \"helmet\",\n  \"help\",\n  \"hen\",\n  \"hero\",\n  \"hidden\",\n  \"high\",\n  \"hill\",\n  \"hint\",\n  \"hip\",\n  \"hire\",\n  \"history\",\n  \"hobby\",\n  \"hockey\",\n  \"hold\",\n  \"hole\",\n  \"holiday\",\n  \"hollow\",\n  \"home\",\n  \"honey\",\n  \"hood\",\n  \"hope\",\n  \"horn\",\n  \"horror\",\n  \"horse\",\n  \"hospital\",\n  \"host\",\n  \"hotel\",\n  \"hour\",\n  \"hover\",\n  \"hub\",\n  \"huge\",\n  \"human\",\n  \"humble\",\n  \"humor\",\n  \"hundred\",\n  \"hungry\",\n  \"hunt\",\n  \"hurdle\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hybrid\",\n  \"ice\",\n  \"icon\",\n  \"idea\",\n  \"identify\",\n  \"idle\",\n  \"ignore\",\n  \"ill\",\n  \"illegal\",\n  \"illness\",\n  \"image\",\n  \"imitate\",\n  \"immense\",\n  \"immune\",\n  \"impact\",\n  \"impose\",\n  \"improve\",\n  \"impulse\",\n  \"inch\",\n  \"include\",\n  \"income\",\n  \"increase\",\n  \"index\",\n  \"indicate\",\n  \"indoor\",\n  \"industry\",\n  \"infant\",\n  \"inflict\",\n  \"inform\",\n  \"inhale\",\n  \"inherit\",\n  \"initial\",\n  \"inject\",\n  \"injury\",\n  \"inmate\",\n  \"inner\",\n  \"innocent\",\n  \"input\",\n  \"inquiry\",\n  \"insane\",\n  \"insect\",\n  \"inside\",\n  \"inspire\",\n  \"install\",\n  \"intact\",\n  \"interest\",\n  \"into\",\n  \"invest\",\n  \"invite\",\n  \"involve\",\n  \"iron\",\n  \"island\",\n  \"isolate\",\n  \"issue\",\n  \"item\",\n  \"ivory\",\n  \"jacket\",\n  \"jaguar\",\n  \"jar\",\n  \"jazz\",\n  \"jealous\",\n  \"jeans\",\n  \"jelly\",\n  \"jewel\",\n  \"job\",\n  \"join\",\n  \"joke\",\n  \"journey\",\n  \"joy\",\n  \"judge\",\n  \"juice\",\n  \"jump\",\n  \"jungle\",\n  \"junior\",\n  \"junk\",\n  \"just\",\n  \"kangaroo\",\n  \"keen\",\n  \"keep\",\n  \"ketchup\",\n  \"key\",\n  \"kick\",\n  \"kid\",\n  \"kidney\",\n  \"kind\",\n  \"kingdom\",\n  \"kiss\",\n  \"kit\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kiwi\",\n  \"knee\",\n  \"knife\",\n  \"knock\",\n  \"know\",\n  \"lab\",\n  \"label\",\n  \"labor\",\n  \"ladder\",\n  \"lady\",\n  \"lake\",\n  \"lamp\",\n  \"language\",\n  \"laptop\",\n  \"large\",\n  \"later\",\n  \"latin\",\n  \"laugh\",\n  \"laundry\",\n  \"lava\",\n  \"law\",\n  \"lawn\",\n  \"lawsuit\",\n  \"layer\",\n  \"lazy\",\n  \"leader\",\n  \"leaf\",\n  \"learn\",\n  \"leave\",\n  \"lecture\",\n  \"left\",\n  \"leg\",\n  \"legal\",\n  \"legend\",\n  \"leisure\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"leopard\",\n  \"lesson\",\n  \"letter\",\n  \"level\",\n  \"liar\",\n  \"liberty\",\n  \"library\",\n  \"license\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"like\",\n  \"limb\",\n  \"limit\",\n  \"link\",\n  \"lion\",\n  \"liquid\",\n  \"list\",\n  \"little\",\n  \"live\",\n  \"lizard\",\n  \"load\",\n  \"loan\",\n  \"lobster\",\n  \"local\",\n  \"lock\",\n  \"logic\",\n  \"lonely\",\n  \"long\",\n  \"loop\",\n  \"lottery\",\n  \"loud\",\n  \"lounge\",\n  \"love\",\n  \"loyal\",\n  \"lucky\",\n  \"luggage\",\n  \"lumber\",\n  \"lunar\",\n  \"lunch\",\n  \"luxury\",\n  \"lyrics\",\n  \"machine\",\n  \"mad\",\n  \"magic\",\n  \"magnet\",\n  \"maid\",\n  \"mail\",\n  \"main\",\n  \"major\",\n  \"make\",\n  \"mammal\",\n  \"man\",\n  \"manage\",\n  \"mandate\",\n  \"mango\",\n  \"mansion\",\n  \"manual\",\n  \"maple\",\n  \"marble\",\n  \"march\",\n  \"margin\",\n  \"marine\",\n  \"market\",\n  \"marriage\",\n  \"mask\",\n  \"mass\",\n  \"master\",\n  \"match\",\n  \"material\",\n  \"math\",\n  \"matrix\",\n  \"matter\",\n  \"maximum\",\n  \"maze\",\n  \"meadow\",\n  \"mean\",\n  \"measure\",\n  \"meat\",\n  \"mechanic\",\n  \"medal\",\n  \"media\",\n  \"melody\",\n  \"melt\",\n  \"member\",\n  \"memory\",\n  \"mention\",\n  \"menu\",\n  \"mercy\",\n  \"merge\",\n  \"merit\",\n  \"merry\",\n  \"mesh\",\n  \"message\",\n  \"metal\",\n  \"method\",\n  \"middle\",\n  \"midnight\",\n  \"milk\",\n  \"million\",\n  \"mimic\",\n  \"mind\",\n  \"minimum\",\n  \"minor\",\n  \"minute\",\n  \"miracle\",\n  \"mirror\",\n  \"misery\",\n  \"miss\",\n  \"mistake\",\n  \"mix\",\n  \"mixed\",\n  \"mixture\",\n  \"mobile\",\n  \"model\",\n  \"modify\",\n  \"mom\",\n  \"moment\",\n  \"monitor\",\n  \"monkey\",\n  \"monster\",\n  \"month\",\n  \"moon\",\n  \"moral\",\n  \"more\",\n  \"morning\",\n  \"mosquito\",\n  \"mother\",\n  \"motion\",\n  \"motor\",\n  \"mountain\",\n  \"mouse\",\n  \"move\",\n  \"movie\",\n  \"much\",\n  \"muffin\",\n  \"mule\",\n  \"multiply\",\n  \"muscle\",\n  \"museum\",\n  \"mushroom\",\n  \"music\",\n  \"must\",\n  \"mutual\",\n  \"myself\",\n  \"mystery\",\n  \"myth\",\n  \"naive\",\n  \"name\",\n  \"napkin\",\n  \"narrow\",\n  \"nasty\",\n  \"nation\",\n  \"nature\",\n  \"near\",\n  \"neck\",\n  \"need\",\n  \"negative\",\n  \"neglect\",\n  \"neither\",\n  \"nephew\",\n  \"nerve\",\n  \"nest\",\n  \"net\",\n  \"network\",\n  \"neutral\",\n  \"never\",\n  \"news\",\n  \"next\",\n  \"nice\",\n  \"night\",\n  \"noble\",\n  \"noise\",\n  \"nominee\",\n  \"noodle\",\n  \"normal\",\n  \"north\",\n  \"nose\",\n  \"notable\",\n  \"note\",\n  \"nothing\",\n  \"notice\",\n  \"novel\",\n  \"now\",\n  \"nuclear\",\n  \"number\",\n  \"nurse\",\n  \"nut\",\n  \"oak\",\n  \"obey\",\n  \"object\",\n  \"oblige\",\n  \"obscure\",\n  \"observe\",\n  \"obtain\",\n  \"obvious\",\n  \"occur\",\n  \"ocean\",\n  \"october\",\n  \"odor\",\n  \"off\",\n  \"offer\",\n  \"office\",\n  \"often\",\n  \"oil\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympic\",\n  \"omit\",\n  \"once\",\n  \"one\",\n  \"onion\",\n  \"online\",\n  \"only\",\n  \"open\",\n  \"opera\",\n  \"opinion\",\n  \"oppose\",\n  \"option\",\n  \"orange\",\n  \"orbit\",\n  \"orchard\",\n  \"order\",\n  \"ordinary\",\n  \"organ\",\n  \"orient\",\n  \"original\",\n  \"orphan\",\n  \"ostrich\",\n  \"other\",\n  \"outdoor\",\n  \"outer\",\n  \"output\",\n  \"outside\",\n  \"oval\",\n  \"oven\",\n  \"over\",\n  \"own\",\n  \"owner\",\n  \"oxygen\",\n  \"oyster\",\n  \"ozone\",\n  \"pact\",\n  \"paddle\",\n  \"page\",\n  \"pair\",\n  \"palace\",\n  \"palm\",\n  \"panda\",\n  \"panel\",\n  \"panic\",\n  \"panther\",\n  \"paper\",\n  \"parade\",\n  \"parent\",\n  \"park\",\n  \"parrot\",\n  \"party\",\n  \"pass\",\n  \"patch\",\n  \"path\",\n  \"patient\",\n  \"patrol\",\n  \"pattern\",\n  \"pause\",\n  \"pave\",\n  \"payment\",\n  \"peace\",\n  \"peanut\",\n  \"pear\",\n  \"peasant\",\n  \"pelican\",\n  \"pen\",\n  \"penalty\",\n  \"pencil\",\n  \"people\",\n  \"pepper\",\n  \"perfect\",\n  \"permit\",\n  \"person\",\n  \"pet\",\n  \"phone\",\n  \"photo\",\n  \"phrase\",\n  \"physical\",\n  \"piano\",\n  \"picnic\",\n  \"picture\",\n  \"piece\",\n  \"pig\",\n  \"pigeon\",\n  \"pill\",\n  \"pilot\",\n  \"pink\",\n  \"pioneer\",\n  \"pipe\",\n  \"pistol\",\n  \"pitch\",\n  \"pizza\",\n  \"place\",\n  \"planet\",\n  \"plastic\",\n  \"plate\",\n  \"play\",\n  \"please\",\n  \"pledge\",\n  \"pluck\",\n  \"plug\",\n  \"plunge\",\n  \"poem\",\n  \"poet\",\n  \"point\",\n  \"polar\",\n  \"pole\",\n  \"police\",\n  \"pond\",\n  \"pony\",\n  \"pool\",\n  \"popular\",\n  \"portion\",\n  \"position\",\n  \"possible\",\n  \"post\",\n  \"potato\",\n  \"pottery\",\n  \"poverty\",\n  \"powder\",\n  \"power\",\n  \"practice\",\n  \"praise\",\n  \"predict\",\n  \"prefer\",\n  \"prepare\",\n  \"present\",\n  \"pretty\",\n  \"prevent\",\n  \"price\",\n  \"pride\",\n  \"primary\",\n  \"print\",\n  \"priority\",\n  \"prison\",\n  \"private\",\n  \"prize\",\n  \"problem\",\n  \"process\",\n  \"produce\",\n  \"profit\",\n  \"program\",\n  \"project\",\n  \"promote\",\n  \"proof\",\n  \"property\",\n  \"prosper\",\n  \"protect\",\n  \"proud\",\n  \"provide\",\n  \"public\",\n  \"pudding\",\n  \"pull\",\n  \"pulp\",\n  \"pulse\",\n  \"pumpkin\",\n  \"punch\",\n  \"pupil\",\n  \"puppy\",\n  \"purchase\",\n  \"purity\",\n  \"purpose\",\n  \"purse\",\n  \"push\",\n  \"put\",\n  \"puzzle\",\n  \"pyramid\",\n  \"quality\",\n  \"quantum\",\n  \"quarter\",\n  \"question\",\n  \"quick\",\n  \"quit\",\n  \"quiz\",\n  \"quote\",\n  \"rabbit\",\n  \"raccoon\",\n  \"race\",\n  \"rack\",\n  \"radar\",\n  \"radio\",\n  \"rail\",\n  \"rain\",\n  \"raise\",\n  \"rally\",\n  \"ramp\",\n  \"ranch\",\n  \"random\",\n  \"range\",\n  \"rapid\",\n  \"rare\",\n  \"rate\",\n  \"rather\",\n  \"raven\",\n  \"raw\",\n  \"razor\",\n  \"ready\",\n  \"real\",\n  \"reason\",\n  \"rebel\",\n  \"rebuild\",\n  \"recall\",\n  \"receive\",\n  \"recipe\",\n  \"record\",\n  \"recycle\",\n  \"reduce\",\n  \"reflect\",\n  \"reform\",\n  \"refuse\",\n  \"region\",\n  \"regret\",\n  \"regular\",\n  \"reject\",\n  \"relax\",\n  \"release\",\n  \"relief\",\n  \"rely\",\n  \"remain\",\n  \"remember\",\n  \"remind\",\n  \"remove\",\n  \"render\",\n  \"renew\",\n  \"rent\",\n  \"reopen\",\n  \"repair\",\n  \"repeat\",\n  \"replace\",\n  \"report\",\n  \"require\",\n  \"rescue\",\n  \"resemble\",\n  \"resist\",\n  \"resource\",\n  \"response\",\n  \"result\",\n  \"retire\",\n  \"retreat\",\n  \"return\",\n  \"reunion\",\n  \"reveal\",\n  \"review\",\n  \"reward\",\n  \"rhythm\",\n  \"rib\",\n  \"ribbon\",\n  \"rice\",\n  \"rich\",\n  \"ride\",\n  \"ridge\",\n  \"rifle\",\n  \"right\",\n  \"rigid\",\n  \"ring\",\n  \"riot\",\n  \"ripple\",\n  \"risk\",\n  \"ritual\",\n  \"rival\",\n  \"river\",\n  \"road\",\n  \"roast\",\n  \"robot\",\n  \"robust\",\n  \"rocket\",\n  \"romance\",\n  \"roof\",\n  \"rookie\",\n  \"room\",\n  \"rose\",\n  \"rotate\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"royal\",\n  \"rubber\",\n  \"rude\",\n  \"rug\",\n  \"rule\",\n  \"run\",\n  \"runway\",\n  \"rural\",\n  \"sad\",\n  \"saddle\",\n  \"sadness\",\n  \"safe\",\n  \"sail\",\n  \"salad\",\n  \"salmon\",\n  \"salon\",\n  \"salt\",\n  \"salute\",\n  \"same\",\n  \"sample\",\n  \"sand\",\n  \"satisfy\",\n  \"satoshi\",\n  \"sauce\",\n  \"sausage\",\n  \"save\",\n  \"say\",\n  \"scale\",\n  \"scan\",\n  \"scare\",\n  \"scatter\",\n  \"scene\",\n  \"scheme\",\n  \"school\",\n  \"science\",\n  \"scissors\",\n  \"scorpion\",\n  \"scout\",\n  \"scrap\",\n  \"screen\",\n  \"script\",\n  \"scrub\",\n  \"sea\",\n  \"search\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"section\",\n  \"security\",\n  \"seed\",\n  \"seek\",\n  \"segment\",\n  \"select\",\n  \"sell\",\n  \"seminar\",\n  \"senior\",\n  \"sense\",\n  \"sentence\",\n  \"series\",\n  \"service\",\n  \"session\",\n  \"settle\",\n  \"setup\",\n  \"seven\",\n  \"shadow\",\n  \"shaft\",\n  \"shallow\",\n  \"share\",\n  \"shed\",\n  \"shell\",\n  \"sheriff\",\n  \"shield\",\n  \"shift\",\n  \"shine\",\n  \"ship\",\n  \"shiver\",\n  \"shock\",\n  \"shoe\",\n  \"shoot\",\n  \"shop\",\n  \"short\",\n  \"shoulder\",\n  \"shove\",\n  \"shrimp\",\n  \"shrug\",\n  \"shuffle\",\n  \"shy\",\n  \"sibling\",\n  \"sick\",\n  \"side\",\n  \"siege\",\n  \"sight\",\n  \"sign\",\n  \"silent\",\n  \"silk\",\n  \"silly\",\n  \"silver\",\n  \"similar\",\n  \"simple\",\n  \"since\",\n  \"sing\",\n  \"siren\",\n  \"sister\",\n  \"situate\",\n  \"six\",\n  \"size\",\n  \"skate\",\n  \"sketch\",\n  \"ski\",\n  \"skill\",\n  \"skin\",\n  \"skirt\",\n  \"skull\",\n  \"slab\",\n  \"slam\",\n  \"sleep\",\n  \"slender\",\n  \"slice\",\n  \"slide\",\n  \"slight\",\n  \"slim\",\n  \"slogan\",\n  \"slot\",\n  \"slow\",\n  \"slush\",\n  \"small\",\n  \"smart\",\n  \"smile\",\n  \"smoke\",\n  \"smooth\",\n  \"snack\",\n  \"snake\",\n  \"snap\",\n  \"sniff\",\n  \"snow\",\n  \"soap\",\n  \"soccer\",\n  \"social\",\n  \"sock\",\n  \"soda\",\n  \"soft\",\n  \"solar\",\n  \"soldier\",\n  \"solid\",\n  \"solution\",\n  \"solve\",\n  \"someone\",\n  \"song\",\n  \"soon\",\n  \"sorry\",\n  \"sort\",\n  \"soul\",\n  \"sound\",\n  \"soup\",\n  \"source\",\n  \"south\",\n  \"space\",\n  \"spare\",\n  \"spatial\",\n  \"spawn\",\n  \"speak\",\n  \"special\",\n  \"speed\",\n  \"spell\",\n  \"spend\",\n  \"sphere\",\n  \"spice\",\n  \"spider\",\n  \"spike\",\n  \"spin\",\n  \"spirit\",\n  \"split\",\n  \"spoil\",\n  \"sponsor\",\n  \"spoon\",\n  \"sport\",\n  \"spot\",\n  \"spray\",\n  \"spread\",\n  \"spring\",\n  \"spy\",\n  \"square\",\n  \"squeeze\",\n  \"squirrel\",\n  \"stable\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"stairs\",\n  \"stamp\",\n  \"stand\",\n  \"start\",\n  \"state\",\n  \"stay\",\n  \"steak\",\n  \"steel\",\n  \"stem\",\n  \"step\",\n  \"stereo\",\n  \"stick\",\n  \"still\",\n  \"sting\",\n  \"stock\",\n  \"stomach\",\n  \"stone\",\n  \"stool\",\n  \"story\",\n  \"stove\",\n  \"strategy\",\n  \"street\",\n  \"strike\",\n  \"strong\",\n  \"struggle\",\n  \"student\",\n  \"stuff\",\n  \"stumble\",\n  \"style\",\n  \"subject\",\n  \"submit\",\n  \"subway\",\n  \"success\",\n  \"such\",\n  \"sudden\",\n  \"suffer\",\n  \"sugar\",\n  \"suggest\",\n  \"suit\",\n  \"summer\",\n  \"sun\",\n  \"sunny\",\n  \"sunset\",\n  \"super\",\n  \"supply\",\n  \"supreme\",\n  \"sure\",\n  \"surface\",\n  \"surge\",\n  \"surprise\",\n  \"surround\",\n  \"survey\",\n  \"suspect\",\n  \"sustain\",\n  \"swallow\",\n  \"swamp\",\n  \"swap\",\n  \"swarm\",\n  \"swear\",\n  \"sweet\",\n  \"swift\",\n  \"swim\",\n  \"swing\",\n  \"switch\",\n  \"sword\",\n  \"symbol\",\n  \"symptom\",\n  \"syrup\",\n  \"system\",\n  \"table\",\n  \"tackle\",\n  \"tag\",\n  \"tail\",\n  \"talent\",\n  \"talk\",\n  \"tank\",\n  \"tape\",\n  \"target\",\n  \"task\",\n  \"taste\",\n  \"tattoo\",\n  \"taxi\",\n  \"teach\",\n  \"team\",\n  \"tell\",\n  \"ten\",\n  \"tenant\",\n  \"tennis\",\n  \"tent\",\n  \"term\",\n  \"test\",\n  \"text\",\n  \"thank\",\n  \"that\",\n  \"theme\",\n  \"then\",\n  \"theory\",\n  \"there\",\n  \"they\",\n  \"thing\",\n  \"this\",\n  \"thought\",\n  \"three\",\n  \"thrive\",\n  \"throw\",\n  \"thumb\",\n  \"thunder\",\n  \"ticket\",\n  \"tide\",\n  \"tiger\",\n  \"tilt\",\n  \"timber\",\n  \"time\",\n  \"tiny\",\n  \"tip\",\n  \"tired\",\n  \"tissue\",\n  \"title\",\n  \"toast\",\n  \"tobacco\",\n  \"today\",\n  \"toddler\",\n  \"toe\",\n  \"together\",\n  \"toilet\",\n  \"token\",\n  \"tomato\",\n  \"tomorrow\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"tool\",\n  \"tooth\",\n  \"top\",\n  \"topic\",\n  \"topple\",\n  \"torch\",\n  \"tornado\",\n  \"tortoise\",\n  \"toss\",\n  \"total\",\n  \"tourist\",\n  \"toward\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"track\",\n  \"trade\",\n  \"traffic\",\n  \"tragic\",\n  \"train\",\n  \"transfer\",\n  \"trap\",\n  \"trash\",\n  \"travel\",\n  \"tray\",\n  \"treat\",\n  \"tree\",\n  \"trend\",\n  \"trial\",\n  \"tribe\",\n  \"trick\",\n  \"trigger\",\n  \"trim\",\n  \"trip\",\n  \"trophy\",\n  \"trouble\",\n  \"truck\",\n  \"true\",\n  \"truly\",\n  \"trumpet\",\n  \"trust\",\n  \"truth\",\n  \"try\",\n  \"tube\",\n  \"tuition\",\n  \"tumble\",\n  \"tuna\",\n  \"tunnel\",\n  \"turkey\",\n  \"turn\",\n  \"turtle\",\n  \"twelve\",\n  \"twenty\",\n  \"twice\",\n  \"twin\",\n  \"twist\",\n  \"two\",\n  \"type\",\n  \"typical\",\n  \"ugly\",\n  \"umbrella\",\n  \"unable\",\n  \"unaware\",\n  \"uncle\",\n  \"uncover\",\n  \"under\",\n  \"undo\",\n  \"unfair\",\n  \"unfold\",\n  \"unhappy\",\n  \"uniform\",\n  \"unique\",\n  \"unit\",\n  \"universe\",\n  \"unknown\",\n  \"unlock\",\n  \"until\",\n  \"unusual\",\n  \"unveil\",\n  \"update\",\n  \"upgrade\",\n  \"uphold\",\n  \"upon\",\n  \"upper\",\n  \"upset\",\n  \"urban\",\n  \"urge\",\n  \"usage\",\n  \"use\",\n  \"used\",\n  \"useful\",\n  \"useless\",\n  \"usual\",\n  \"utility\",\n  \"vacant\",\n  \"vacuum\",\n  \"vague\",\n  \"valid\",\n  \"valley\",\n  \"valve\",\n  \"van\",\n  \"vanish\",\n  \"vapor\",\n  \"various\",\n  \"vast\",\n  \"vault\",\n  \"vehicle\",\n  \"velvet\",\n  \"vendor\",\n  \"venture\",\n  \"venue\",\n  \"verb\",\n  \"verify\",\n  \"version\",\n  \"very\",\n  \"vessel\",\n  \"veteran\",\n  \"viable\",\n  \"vibrant\",\n  \"vicious\",\n  \"victory\",\n  \"video\",\n  \"view\",\n  \"village\",\n  \"vintage\",\n  \"violin\",\n  \"virtual\",\n  \"virus\",\n  \"visa\",\n  \"visit\",\n  \"visual\",\n  \"vital\",\n  \"vivid\",\n  \"vocal\",\n  \"voice\",\n  \"void\",\n  \"volcano\",\n  \"volume\",\n  \"vote\",\n  \"voyage\",\n  \"wage\",\n  \"wagon\",\n  \"wait\",\n  \"walk\",\n  \"wall\",\n  \"walnut\",\n  \"want\",\n  \"warfare\",\n  \"warm\",\n  \"warrior\",\n  \"wash\",\n  \"wasp\",\n  \"waste\",\n  \"water\",\n  \"wave\",\n  \"way\",\n  \"wealth\",\n  \"weapon\",\n  \"wear\",\n  \"weasel\",\n  \"weather\",\n  \"web\",\n  \"wedding\",\n  \"weekend\",\n  \"weird\",\n  \"welcome\",\n  \"west\",\n  \"wet\",\n  \"whale\",\n  \"what\",\n  \"wheat\",\n  \"wheel\",\n  \"when\",\n  \"where\",\n  \"whip\",\n  \"whisper\",\n  \"wide\",\n  \"width\",\n  \"wife\",\n  \"wild\",\n  \"will\",\n  \"win\",\n  \"window\",\n  \"wine\",\n  \"wing\",\n  \"wink\",\n  \"winner\",\n  \"winter\",\n  \"wire\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"witness\",\n  \"wolf\",\n  \"woman\",\n  \"wonder\",\n  \"wood\",\n  \"wool\",\n  \"word\",\n  \"work\",\n  \"world\",\n  \"worry\",\n  \"worth\",\n  \"wrap\",\n  \"wreck\",\n  \"wrestle\",\n  \"wrist\",\n  \"write\",\n  \"wrong\",\n  \"yard\",\n  \"year\",\n  \"yellow\",\n  \"you\",\n  \"young\",\n  \"youth\",\n  \"zebra\",\n  \"zero\",\n  \"zone\",\n  \"zoo\"\n];\n\n// src/wordlists/index.ts\nvar Language = /* @__PURE__ */ ((Language2) => {\n  Language2[\"english\"] = \"english\";\n  return Language2;\n})(Language || {});\n\n// src/mnemonic/utils.ts\n\n\n\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\n__name(getLowerMask, \"getLowerMask\");\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n}\n__name(getUpperMask, \"getUpperMask\");\nfunction getWords(mnemonic) {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\n__name(getWords, \"getWords\");\nfunction getPhrase(mnemonic) {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(\" \");\n  }\n  return mnemonic;\n}\n__name(getPhrase, \"getPhrase\");\nfunction entropyToMnemonicIndices(entropy) {\n  const indices = [0];\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  const checksumBits = entropy.length / 4;\n  const checksum = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(entropy))[0] & getUpperMask(checksumBits);\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return indices;\n}\n__name(entropyToMnemonicIndices, \"entropyToMnemonicIndices\");\nfunction mnemonicWordsToEntropy(words, wordlist) {\n  const size = Math.ceil(11 * words.length / 8);\n  const entropy = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(new Uint8Array(size));\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize(\"NFKD\"));\n    if (index === -1) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = 32 * words.length / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CHECKSUM,\n      \"Checksum validation failed for the provided mnemonic.\"\n    );\n  }\n  return entropy.slice(0, entropyBits / 8);\n}\n__name(mnemonicWordsToEntropy, \"mnemonicWordsToEntropy\");\n\n// src/mnemonic/mnemonic.ts\nvar MasterSecret = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(\"Bitcoin seed\");\nvar MainnetPRV = \"0x0488ade4\";\nvar TestnetPRV = \"0x04358394\";\nvar MNEMONIC_SIZES = [12, 15, 18, 21, 24];\nfunction assertWordList(wordlist) {\n  if (wordlist.length !== 2048) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\n__name(assertWordList, \"assertWordList\");\nfunction assertEntropy(entropy) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\n__name(assertEntropy, \"assertEntropy\");\nfunction assertMnemonic(words) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      \", \"\n    )}] words, but got ${words.length}.`;\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_MNEMONIC, errorMsg);\n  }\n}\n__name(assertMnemonic, \"assertMnemonic\");\nvar Mnemonic = class _Mnemonic {\n  static {\n    __name(this, \"Mnemonic\");\n  }\n  wordlist;\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist = english) {\n    this.wordlist = wordlist;\n    assertWordList(this.wordlist);\n  }\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase) {\n    return _Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy) {\n    return _Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase, wordlist = english) {\n    const words = getWords(phrase);\n    assertMnemonic(words);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(mnemonicWordsToEntropy(words, wordlist));\n  }\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy, wordlist = english) {\n    const entropyBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(entropy);\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n    return entropyToMnemonicIndices(entropyBytes).map((i) => wordlist[i]).join(\" \");\n  }\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase, passphrase = \"\") {\n    assertMnemonic(getWords(phrase));\n    const phraseBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(getPhrase(phrase));\n    const salt = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(`mnemonic${passphrase}`);\n    return (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)(phraseBytes, salt, 2048, 64, \"sha512\");\n  }\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase, passphrase = \"\") {\n    const seed = _Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return _Mnemonic.masterKeysFromSeed(seed);\n  }\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase) {\n    const words = getWords(phrase);\n    let i = 0;\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n    while (i < words.length) {\n      if (_Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n    return true;\n  }\n  static binarySearch(target) {\n    const words = english;\n    let left = 0;\n    let right = words.length - 1;\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return false;\n  }\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed) {\n    const seedArray = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(seed);\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.computeHmac)(\"sha512\", MasterSecret, seedArray));\n  }\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed, testnet = false) {\n    const masterKey = _Mnemonic.masterKeysFromSeed(seed);\n    const prefix = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(testnet ? TestnetPRV : MainnetPRV);\n    const depth = \"0x00\";\n    const fingerprint = \"0x00000000\";\n    const index = \"0x00000000\";\n    const chainCode = masterKey.slice(32);\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\"0x00\", privateKey])\n    ]);\n    const checksum = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.dataSlice)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(extendedKey)), 0, 4);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.encodeBase58)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([extendedKey, checksum]));\n  }\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size = 32, extraEntropy = \"\") {\n    const entropy = extraEntropy ? (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([(0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(size), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(extraEntropy)])) : (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(size);\n    return _Mnemonic.entropyToMnemonic(entropy);\n  }\n};\nvar mnemonic_default = Mnemonic;\n\n// src/hdwallet/hdwallet.ts\nvar HARDENED_INDEX = 2147483648;\nvar MainnetPRV2 = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x0488ade4\");\nvar MainnetPUB = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x0488b21e\");\nvar TestnetPRV2 = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x04358394\");\nvar TestnetPUB = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x043587cf\");\nfunction base58check(data) {\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.encodeBase58)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([data, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.dataSlice)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(data)), 0, 4)]));\n}\n__name(base58check, \"base58check\");\nfunction getExtendedKeyPrefix(isPublic = false, testnet = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV2 : MainnetPRV2;\n}\n__name(getExtendedKeyPrefix, \"getExtendedKeyPrefix\");\nfunction isPublicExtendedKey(extendedKey) {\n  return [MainnetPUB, TestnetPUB].includes((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(extendedKey.slice(0, 4)));\n}\n__name(isPublicExtendedKey, \"isPublicExtendedKey\");\nfunction isValidExtendedKey(extendedKey) {\n  return [MainnetPRV2, TestnetPRV2, MainnetPUB, TestnetPUB].includes(\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(extendedKey.slice(0, 4))\n  );\n}\n__name(isValidExtendedKey, \"isValidExtendedKey\");\nfunction parsePath(path, depth = 0) {\n  const components = path.split(\"/\");\n  if (components.length === 0 || components[0] === \"m\" && depth !== 0) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n  if (components[0] === \"m\") {\n    components.shift();\n  }\n  return components.map(\n    (p) => ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n__name(parsePath, \"parsePath\");\nvar HDWallet = class _HDWallet {\n  static {\n    __name(this, \"HDWallet\");\n  }\n  depth = 0;\n  index = 0;\n  fingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x00000000\");\n  parentFingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x00000000\");\n  privateKey;\n  publicKey;\n  chainCode;\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config) {\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(signer.compressedPublicKey);\n      this.privateKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n          \"Both public and private Key cannot be missing. At least one should be provided.\"\n        );\n      }\n      this.publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(config.publicKey);\n    }\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.dataSlice)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.ripemd160)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index) {\n    const privateKey = this.privateKey && (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.privateKey);\n    const publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.publicKey);\n    const chainCode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.chainCode);\n    const data = new Uint8Array(37);\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n          \"Cannot derive a hardened index without a private Key.\"\n        );\n      }\n      data.set(privateKey, 1);\n    } else {\n      data.set((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.publicKey));\n    }\n    data.set((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(index, 4), 33);\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.computeHmac)(\"sha512\", chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n    if (privateKey) {\n      const N = \"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\";\n      const ki = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(IL).add(privateKey).mod(N).toBytes(32);\n      return new _HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint\n      });\n    }\n    const signer = new Signer((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(IL));\n    const Ki = signer.addPoint(publicKey);\n    return new _HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint\n    });\n  }\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path) {\n    const paths = parsePath(path, this.depth);\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), this);\n  }\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic = false, testnet = false) {\n    if (this.depth >= 256) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toHex)(this.index, 4);\n    const chainCode = this.chainCode;\n    const key = this.privateKey != null && !isPublic ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\"0x00\", this.privateKey]) : this.publicKey;\n    const extendedKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([prefix, depth, parentFingerprint, index, chainCode, key]));\n    return base58check(extendedKey);\n  }\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed) {\n    const masterKey = mnemonic_default.masterKeysFromSeed(seed);\n    return new _HDWallet({\n      chainCode: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(masterKey.slice(32)),\n      privateKey: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(masterKey.slice(0, 32))\n    });\n  }\n  static fromExtendedKey(extendedKey) {\n    const decoded = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.decodeBase58)(extendedKey)));\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Provided key is not a valid extended key.\");\n    }\n    if (!validChecksum) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Provided key has an invalid checksum.\");\n    }\n    const depth = bytes[4];\n    const parentFingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes.slice(5, 9));\n    const index = parseInt((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n    if (depth === 0 && parentFingerprint !== \"0x00000000\" || depth === 0 && index !== 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n        \"Inconsistency detected: Depth is zero but fingerprint/index is non-zero.\"\n      );\n    }\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Invalid public extended key.\");\n      }\n      return new _HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint\n      });\n    }\n    if (key[0] !== 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Invalid private extended key.\");\n    }\n    return new _HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint\n    });\n  }\n};\nvar hdwallet_default = HDWallet;\n\n// src/wallet/wallets.ts\nvar WalletLocked = class extends Account {\n  static {\n    __name(this, \"WalletLocked\");\n  }\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey) {\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n};\nvar WalletUnlocked = class _WalletUnlocked extends BaseWalletUnlocked {\n  static {\n    __name(this, \"WalletUnlocked\");\n  }\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock() {\n    this.signer = () => new Signer(\"0x00\");\n    return new WalletLocked(this.address, this._provider);\n  }\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions) {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n    return new _WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed, path, provider) {\n    const hdWallet = hdwallet_default.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || _WalletUnlocked.defaultPath);\n    return new _WalletUnlocked(childWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(mnemonic, path, passphrase, provider) {\n    const seed = mnemonic_default.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = hdwallet_default.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || _WalletUnlocked.defaultPath);\n    return new _WalletUnlocked(childWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey, provider) {\n    const hdWallet = hdwallet_default.fromExtendedKey(extendedKey);\n    return new _WalletUnlocked(hdWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(jsonWallet, password, provider) {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n    return new _WalletUnlocked(privateKey, provider);\n  }\n};\n\n// src/wallet/wallet.ts\nvar Wallet = class {\n  static {\n    __name(this, \"Wallet\");\n  }\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address, provider) {\n    return new WalletLocked(address, provider);\n  }\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey, provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n};\n\n// src/wallet-manager/wallet-manager.ts\n\n\n\n\n\n// src/wallet-manager/storages/memory-storage.ts\nvar MemoryStorage = class {\n  static {\n    __name(this, \"MemoryStorage\");\n  }\n  storage = /* @__PURE__ */ new Map();\n  async getItem(key) {\n    const item = await this.storage.get(key);\n    return item;\n  }\n  async setItem(key, value) {\n    await this.storage.set(key, value);\n  }\n  async removeItem(key) {\n    await this.storage.delete(key);\n  }\n  async clear() {\n    await this.storage.clear();\n  }\n};\n\n// src/wallet-manager/vaults/mnemonic-vault.ts\n\n\nvar MnemonicVault = class {\n  static {\n    __name(this, \"MnemonicVault\");\n  }\n  static type = \"mnemonic\";\n  #secret;\n  pathKey = \"{}\";\n  rootPath = `m/44'/1179993420'/${this.pathKey}'/0/0`;\n  numberOfAccounts = 0;\n  constructor(options) {\n    this.#secret = options.secret || mnemonic_default.generate();\n    this.rootPath = options.rootPath || this.rootPath;\n    this.numberOfAccounts = options.numberOfAccounts || 1;\n  }\n  getDerivePath(index) {\n    if (this.rootPath.includes(this.pathKey)) {\n      return this.rootPath.replace(this.pathKey, String(index));\n    }\n    return `${this.rootPath}/${index}`;\n  }\n  serialize() {\n    return {\n      secret: this.#secret,\n      rootPath: this.rootPath,\n      numberOfAccounts: this.numberOfAccounts\n    };\n  }\n  getAccounts() {\n    const accounts = [];\n    let numberOfAccounts = 0;\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      accounts.push({\n        publicKey: wallet.publicKey,\n        address: wallet.address\n      });\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n    return accounts;\n  }\n  addAccount() {\n    this.numberOfAccounts += 1;\n    const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(this.numberOfAccounts - 1));\n    return {\n      publicKey: wallet.publicKey,\n      address: wallet.address\n    };\n  }\n  exportAccount(address) {\n    let numberOfAccounts = 0;\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      if (wallet.address.equals(ownerAddress)) {\n        return wallet.privateKey;\n      }\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.WALLET_MANAGER_ERROR,\n      `Account with address '${address}' not found in derived wallets.`\n    );\n  }\n  getWallet(address) {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n};\n\n// src/wallet-manager/vaults/privatekey-vault.ts\n\n\nvar PrivateKeyVault = class {\n  static {\n    __name(this, \"PrivateKeyVault\");\n  }\n  static type = \"privateKey\";\n  #privateKeys = [];\n  /**\n   * If privateKey vault is initialized with a secretKey, it creates\n   * one account with the fallowing secret\n   */\n  constructor(options = {}) {\n    if (options.secret) {\n      this.#privateKeys = [options.secret];\n    } else {\n      this.#privateKeys = options.accounts || [Wallet.generate().privateKey];\n    }\n  }\n  serialize() {\n    return {\n      accounts: this.#privateKeys\n    };\n  }\n  getPublicAccount(privateKey) {\n    const wallet = Wallet.fromPrivateKey(privateKey);\n    return {\n      address: wallet.address,\n      publicKey: wallet.publicKey\n    };\n  }\n  getAccounts() {\n    return this.#privateKeys.map((pk) => this.getPublicAccount(pk));\n  }\n  addAccount() {\n    const wallet = Wallet.generate();\n    this.#privateKeys.push(wallet.privateKey);\n    return this.getPublicAccount(wallet.privateKey);\n  }\n  exportAccount(address) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    const privateKey = this.#privateKeys.find(\n      (pk) => Wallet.fromPrivateKey(pk).address.equals(ownerAddress)\n    );\n    if (!privateKey) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.WALLET_MANAGER_ERROR,\n        `No private key found for address '${address}'.`\n      );\n    }\n    return privateKey;\n  }\n  getWallet(address) {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n};\n\n// src/wallet-manager/wallet-manager.ts\nvar ERROR_MESSAGES = {\n  invalid_vault_type: \"The provided Vault type is invalid.\",\n  address_not_found: \"No private key found for address the specified wallet address.\",\n  vault_not_found: \"The specified vault was not found.\",\n  wallet_not_unlocked: \"The wallet is currently locked.\",\n  passphrase_not_match: \"The provided passphrase did not match the expected value.\"\n};\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.WALLET_MANAGER_ERROR, message);\n  }\n}\n__name(assert, \"assert\");\nvar WalletManager = class _WalletManager extends events__WEBPACK_IMPORTED_MODULE_17__.EventEmitter {\n  static {\n    __name(this, \"WalletManager\");\n  }\n  /**\n   * Vaults\n   *\n   * Vaults are responsible to store secret keys and return an `Wallet` instance,\n   * to interact with the network.\n   *\n   * Each vault has access to its own state\n   *\n   */\n  static Vaults = [MnemonicVault, PrivateKeyVault];\n  /**\n   * Storage\n   *\n   * Persistent encrypted data. `The default storage works only on memory`.\n   */\n  storage = new MemoryStorage();\n  /* Key name passed to the storage */\n  STORAGE_KEY = \"WalletManager\";\n  // `This variables are only accessible from inside the class`\n  #vaults = [];\n  #passphrase = \"\";\n  #isLocked = true;\n  constructor(options) {\n    super();\n    this.storage = options?.storage || this.storage;\n  }\n  get isLocked() {\n    return this.#isLocked;\n  }\n  /**\n   * Return the vault serialized object containing all the privateKeys,\n   * the format of the return depends on the Vault type.\n   */\n  exportVault(vaultId) {\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((_, idx) => idx === vaultId);\n    assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    return vaultState.vault.serialize();\n  }\n  /**\n   * List all vaults on the Wallet Manager, this function not return secret's\n   */\n  getVaults() {\n    return this.#vaults.map((v, idx) => ({\n      title: v.title,\n      type: v.type,\n      vaultId: idx\n    }));\n  }\n  /**\n   * List all accounts on the Wallet Manager not vault information is revealed\n   */\n  getAccounts() {\n    return this.#vaults.flatMap(\n      (vaultState, vaultId) => vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))\n    );\n  }\n  /**\n   * Create a Wallet instance for the specific account\n   */\n  getWallet(address) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    const vaultState = this.#vaults.find(\n      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n    return vaultState.vault.getWallet(ownerAddress);\n  }\n  /**\n   * Export specific account privateKey\n   */\n  exportPrivateKey(address) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find(\n      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n    return vaultState.vault.exportAccount(ownerAddress);\n  }\n  /**\n   * Add account to a selected vault or on the first vault as default.\n   * If not vaults are adds it will return error\n   */\n  async addAccount(options) {\n    await this.loadState();\n    const vaultState = this.#vaults[options?.vaultId || 0];\n    await assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    const account = vaultState.vault.addAccount();\n    await this.saveState();\n    return account;\n  }\n  /**\n   * Remove vault by index, by remove the vault you also remove all accounts\n   * created by the vault.\n   */\n  async removeVault(index) {\n    this.#vaults.splice(index, 1);\n    await this.saveState();\n  }\n  /**\n   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if\n   * didn't found it will throw.\n   */\n  async addVault(vaultConfig) {\n    await this.loadState();\n    const Vault2 = this.getVaultClass(vaultConfig.type);\n    const vault = new Vault2(vaultConfig);\n    this.#vaults = this.#vaults.concat({\n      title: vaultConfig.title,\n      type: vaultConfig.type,\n      vault\n    });\n    await this.saveState();\n  }\n  /**\n   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and\n   * secrets.\n   */\n  lock() {\n    this.#isLocked = true;\n    this.#vaults = [];\n    this.#passphrase = \"\";\n    this.emit(\"lock\");\n  }\n  /**\n   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.\n   * Vaults with secrets are not unlocked or instantiated on this moment.\n   */\n  async unlock(passphrase) {\n    this.#passphrase = passphrase;\n    this.#isLocked = false;\n    try {\n      await this.loadState();\n      this.emit(\"unlock\");\n    } catch (err) {\n      await this.lock();\n      throw err;\n    }\n  }\n  /**\n   * Update WalletManager encryption passphrase\n   */\n  async updatePassphrase(oldpass, newpass) {\n    const isLocked = this.#isLocked;\n    await this.unlock(oldpass);\n    this.#passphrase = newpass;\n    await this.saveState();\n    await this.loadState();\n    if (isLocked) {\n      await this.lock();\n    }\n  }\n  /**\n   * Retrieve and decrypt WalletManager state from storage\n   */\n  async loadState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const data = await this.storage.getItem(this.STORAGE_KEY);\n    if (data) {\n      const state = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.decrypt)(this.#passphrase, JSON.parse(data));\n      this.#vaults = this.#deserializeVaults(state.vaults);\n    }\n  }\n  /**\n   * Store encrypted WalletManager state on storage\n   */\n  async saveState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const encryptedData = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.encrypt)(this.#passphrase, {\n      vaults: this.#serializeVaults(this.#vaults)\n    });\n    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));\n    this.emit(\"update\");\n  }\n  /**\n   * Serialize all vaults to store\n   *\n   * `This is only accessible from inside the class`\n   */\n  #serializeVaults(vaults) {\n    return vaults.map(({ title, type, vault }) => ({\n      title,\n      type,\n      data: vault.serialize()\n    }));\n  }\n  /**\n   * Deserialize all vaults to state\n   *\n   * `This is only accessible from inside the class`\n   */\n  #deserializeVaults(vaults) {\n    return vaults.map(({ title, type, data: vaultConfig }) => {\n      const VaultClass = this.getVaultClass(type);\n      return {\n        title,\n        type,\n        vault: new VaultClass(vaultConfig)\n      };\n    });\n  }\n  /**\n   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.\n   */\n  getVaultClass(type) {\n    const VaultClass = _WalletManager.Vaults.find((v) => v.type === type);\n    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);\n    return VaultClass;\n  }\n};\n\n// src/wallet-manager/types.ts\n\nvar Vault = class {\n  static {\n    __name(this, \"Vault\");\n  }\n  static type;\n  constructor(_options) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  serialize() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  getAccounts() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  addAccount() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  exportAccount(_address) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  getWallet(_address) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n};\nvar StorageAbstract = class {\n  static {\n    __name(this, \"StorageAbstract\");\n  }\n};\n\n// src/predicate/predicate.ts\n\n\n\n\n\n// src/utils/deployScriptOrPredicate.ts\n\n\n\n// src/utils/predicate-script-loader-instructions.ts\n\n\n\n\nvar BLOB_ID_SIZE = 32;\nvar REG_ADDRESS_OF_DATA_AFTER_CODE = 16;\nvar REG_START_OF_LOADED_CODE = 17;\nvar REG_GENERAL_USE = 18;\nvar WORD_SIZE2 = 8;\nvar DATA_OFFSET_INDEX = 8;\nvar CONFIGURABLE_OFFSET_INDEX = 16;\nfunction getBytecodeDataOffset(bytecode) {\n  const [offset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(bytecode, DATA_OFFSET_INDEX);\n  return offset.toNumber();\n}\n__name(getBytecodeDataOffset, \"getBytecodeDataOffset\");\nfunction getBytecodeConfigurableOffset(bytecode) {\n  const [offset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(bytecode, CONFIGURABLE_OFFSET_INDEX);\n  return offset.toNumber();\n}\n__name(getBytecodeConfigurableOffset, \"getBytecodeConfigurableOffset\");\nfunction getBytecodeId(bytecode) {\n  const configurableOffset = getBytecodeConfigurableOffset(bytecode);\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(byteCodeWithoutConfigurableSection);\n}\n__name(getBytecodeId, \"getBytecodeId\");\nfunction getLegacyBlobId(bytecode) {\n  const dataOffset = getBytecodeDataOffset(bytecode);\n  const byteCodeWithoutDataSection = bytecode.slice(0, dataOffset);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(byteCodeWithoutDataSection);\n}\n__name(getLegacyBlobId, \"getLegacyBlobId\");\nfunction getPredicateScriptLoaderInstructions(originalBinary, blobId) {\n  const { RegId, Instruction } = /*#__PURE__*/ (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15___namespace_cache || (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15___namespace_cache = __webpack_require__.t(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__, 2)));\n  const REG_PC = RegId.pc().to_u8();\n  const REG_SP = RegId.sp().to_u8();\n  const REG_IS = RegId.is().to_u8();\n  const getInstructions = /* @__PURE__ */ __name((numOfInstructions2) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions2 * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Move on to the data section length\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),\n    // load the size of the data section into REG_GENERAL_USE\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),\n    // after we have read the length of the data section, we move the pointer to the actual\n    // data by skipping WORD_SIZE bytes.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE2),\n    // load the data section of the executable\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.jmp(REG_START_OF_LOADED_CODE)\n  ], \"getInstructions\");\n  const getInstructionsNoDataSection = /* @__PURE__ */ __name((numOfInstructions2) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions2 * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_15__.jmp(REG_START_OF_LOADED_CODE)\n  ], \"getInstructionsNoDataSection\");\n  const offset = getBytecodeConfigurableOffset(originalBinary);\n  if (originalBinary.length < offset) {\n    throw new Error(\n      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`\n    );\n  }\n  const configurableSection = originalBinary.slice(offset);\n  if (configurableSection.length > 0) {\n    const numOfInstructions2 = getInstructions(0).length;\n    if (numOfInstructions2 > 65535) {\n      throw new Error(\"Too many instructions, exceeding u16::MAX.\");\n    }\n    const instructionBytes2 = new Uint8Array(\n      getInstructions(numOfInstructions2).flatMap(\n        (instruction) => Array.from(instruction.to_bytes())\n      )\n    );\n    const blobBytes2 = new Uint8Array(blobId);\n    const dataSectionLenBytes = new Uint8Array(8);\n    const dataView = new DataView(dataSectionLenBytes.buffer);\n    dataView.setBigUint64(0, BigInt(configurableSection.length), false);\n    const loaderBytecode2 = new Uint8Array([\n      ...instructionBytes2,\n      ...blobBytes2,\n      ...dataSectionLenBytes\n    ]);\n    return {\n      loaderBytecode: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([loaderBytecode2, configurableSection]),\n      blobOffset: loaderBytecode2.length\n    };\n  }\n  const numOfInstructions = getInstructionsNoDataSection(0).length;\n  if (numOfInstructions > 65535) {\n    throw new Error(\"Too many instructions, exceeding u16::MAX.\");\n  }\n  const instructionBytes = new Uint8Array(\n    getInstructionsNoDataSection(numOfInstructions).flatMap(\n      (instruction) => Array.from(instruction.to_bytes())\n    )\n  );\n  const blobBytes = new Uint8Array(blobId);\n  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);\n  return { loaderBytecode };\n}\n__name(getPredicateScriptLoaderInstructions, \"getPredicateScriptLoaderInstructions\");\n\n// src/utils/deployScriptOrPredicate.ts\nasync function fundBlobTx(deployer, blobTxRequest) {\n  const { assembledRequest } = await deployer.provider.assembleTx({\n    request: blobTxRequest,\n    feePayerAccount: deployer,\n    accountCoinQuantities: []\n  });\n  return assembledRequest;\n}\n__name(fundBlobTx, \"fundBlobTx\");\nfunction adjustConfigurableOffsets(jsonAbi, configurableOffsetDiff) {\n  const { configurables: readOnlyConfigurables } = jsonAbi;\n  const configurables = [];\n  readOnlyConfigurables.forEach((config) => {\n    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });\n  });\n  return { ...jsonAbi, configurables };\n}\n__name(adjustConfigurableOffsets, \"adjustConfigurableOffsets\");\nasync function deployScriptOrPredicate({\n  deployer,\n  bytecode,\n  abi,\n  loaderInstanceCallback\n}) {\n  const blobId = getBytecodeId((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode));\n  const configurableOffset = getBytecodeConfigurableOffset((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode));\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n  const blobTxRequest = new BlobTransactionRequest({\n    blobId,\n    witnessIndex: 0,\n    witnesses: [byteCodeWithoutConfigurableSection]\n  });\n  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode),\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(blobId)\n  );\n  const newConfigurableOffsetDiff = byteCodeWithoutConfigurableSection.length - (blobOffset || 0);\n  const newAbi = adjustConfigurableOffsets(abi, newConfigurableOffsetDiff);\n  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;\n  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);\n  if (blobExists) {\n    return {\n      waitForResult: /* @__PURE__ */ __name(() => Promise.resolve(loaderInstance), \"waitForResult\"),\n      blobId\n    };\n  }\n  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);\n  const waitForResult = /* @__PURE__ */ __name(async () => {\n    try {\n      const blobTx = await deployer.sendTransaction(fundedBlobRequest);\n      const result = await blobTx.waitForResult();\n      if (result.status !== \"success\" /* success */) {\n        throw new Error();\n      }\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_FAILED, \"Failed to deploy predicate chunk\");\n    }\n    return loaderInstance;\n  }, \"waitForResult\");\n  return {\n    waitForResult,\n    blobId\n  };\n}\n__name(deployScriptOrPredicate, \"deployScriptOrPredicate\");\n\n// src/predicate/utils/getPredicateRoot.ts\n\n\n\nvar getPredicateRoot = /* @__PURE__ */ __name((bytecode) => {\n  const chunkSize = 16 * 1024;\n  const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode);\n  const chunks = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.chunkAndPadBytes)(bytes, chunkSize);\n  const codeRoot = (0,_fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_18__.calcRoot)(chunks.map((c) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(c)));\n  const predicateRoot = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hash)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\"0x4655454C\", codeRoot]));\n  return predicateRoot;\n}, \"getPredicateRoot\");\n\n// src/predicate/predicate.ts\nvar Predicate = class _Predicate extends Account {\n  static {\n    __name(this, \"Predicate\");\n  }\n  bytes;\n  predicateData = [];\n  interface;\n  initialBytecode;\n  configurableConstants;\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytecode - The bytecode of the predicate.\n   * @param abi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param data - The predicate input data (optional).\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor({\n    bytecode,\n    abi,\n    provider,\n    data,\n    configurableConstants\n  }) {\n    const { predicateBytes, predicateInterface } = _Predicate.processPredicateData(\n      bytecode,\n      abi,\n      configurableConstants\n    );\n    const address = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(getPredicateRoot(predicateBytes));\n    super(address, provider);\n    this.initialBytecode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode);\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n    this.configurableConstants = configurableConstants;\n    if (data !== void 0 && data.length > 0) {\n      this.predicateData = data;\n    }\n  }\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData(transactionRequestLike) {\n    const request2 = transactionRequestify(transactionRequestLike);\n    const placeholderIndex = this.getIndexFromPlaceholderWitness(request2);\n    if (placeholderIndex !== -1) {\n      request2.removeWitness(placeholderIndex);\n    }\n    request2.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      if (isRequestInputResourceFromOwner(input, this.address)) {\n        input.predicate = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.bytes);\n        input.predicateData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.getPredicateData());\n        input.witnessIndex = 0;\n      }\n    });\n    return request2;\n  }\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  sendTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  simulateTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Retrieves the properly encoded predicate data.\n   *\n   * @returns A Uint8Array containing the encoded predicate data. If no predicate data is available, returns an empty Uint8Array.\n   */\n  getPredicateData() {\n    if (!this.predicateData.length) {\n      return new Uint8Array();\n    }\n    const mainFn = this.interface?.functions.main;\n    return mainFn?.encodeArguments(this.predicateData) || new Uint8Array();\n  }\n  /**\n   * Creates a new Predicate instance from an existing Predicate instance.\n   * @param overrides - The data and configurable constants to override.\n   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.\n   */\n  toNewInstance(overrides = {}) {\n    return new _Predicate({\n      bytecode: this.initialBytecode,\n      abi: this.interface.jsonAbi,\n      provider: this.provider,\n      data: overrides.data ?? this.predicateData,\n      configurableConstants: overrides.configurableConstants ?? this.configurableConstants\n    });\n  }\n  /**\n   * Sets the predicate data.\n   *\n   * @param data - The data to be set for the predicate.\n   */\n  setData(data) {\n    this.predicateData = data;\n  }\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  static processPredicateData(bytes, jsonAbi, configurableConstants) {\n    let predicateBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytes);\n    const abiInterface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(jsonAbi);\n    if (abiInterface.functions.main === void 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ABI_MAIN_METHOD_MISSING,\n        'Cannot use ABI without \"main\" function.'\n      );\n    }\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = _Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface\n    };\n  }\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param resourcesIdsToIgnore - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(quantities, resourcesIdsToIgnore) {\n    const resources = await this.provider.getResourcesToSpend(\n      this.address,\n      quantities,\n      resourcesIdsToIgnore\n    );\n    return resources.map((resource) => ({\n      ...resource,\n      predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.bytes),\n      predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.getPredicateData())\n    }));\n  }\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins) {\n    return super.generateFakeResources(coins).map((coin) => ({\n      ...coin,\n      predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.bytes),\n      predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.getPredicateData())\n    }));\n  }\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  static setConfigurableConstants(bytes, configurableConstants, abiInterface) {\n    const mutatedBytes = bytes;\n    try {\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n          \"Predicate has no configurable constants to be set\"\n        );\n      }\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `No configurable constant named '${key}' found in the Predicate`\n          );\n        }\n        const { offset } = abiInterface.configurables[key];\n        const encoded = abiInterface.encodeConfigurable(key, value);\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${err.message}.`\n      );\n    }\n    return mutatedBytes;\n  }\n  /**\n   * Returns the index of the witness placeholder that was added to this predicate.\n   * If no witness placeholder was added, it returns -1.\n   * @param request - The transaction request.\n   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.\n   */\n  getIndexFromPlaceholderWitness(request2) {\n    const predicateInputs = request2.inputs.filter(isRequestInputResource).filter((input) => isRequestInputResourceFromOwner(input, this.address));\n    let index = -1;\n    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);\n    if (hasEmptyPredicateInputs) {\n      index = hasEmptyPredicateInputs.witnessIndex;\n      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);\n      if (!allInputsAreEmpty) {\n        const wasFilledInputAddedFirst = !!predicateInputs[0]?.predicate;\n        if (wasFilledInputAddedFirst) {\n          index = -1;\n        }\n      }\n    }\n    return index;\n  }\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader predicate will have the same configurable constants\n   * as the original predicate which was used to generate the loader predicate.\n   */\n  async deploy(account) {\n    return deployScriptOrPredicate({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: /* @__PURE__ */ __name((loaderBytecode, newAbi) => new _Predicate({\n        bytecode: loaderBytecode,\n        abi: newAbi,\n        provider: this.provider,\n        data: this.predicateData\n      }), \"loaderInstanceCallback\")\n    });\n  }\n};\n\n// src/connectors/fuel.ts\n\n\n// src/connectors/fuel-connector.ts\n\n\n\n// src/connectors/types/connector-types.ts\nvar FuelConnectorMethods = /* @__PURE__ */ ((FuelConnectorMethods2) => {\n  FuelConnectorMethods2[\"ping\"] = \"ping\";\n  FuelConnectorMethods2[\"version\"] = \"version\";\n  FuelConnectorMethods2[\"connect\"] = \"connect\";\n  FuelConnectorMethods2[\"disconnect\"] = \"disconnect\";\n  FuelConnectorMethods2[\"isConnected\"] = \"isConnected\";\n  FuelConnectorMethods2[\"accounts\"] = \"accounts\";\n  FuelConnectorMethods2[\"currentAccount\"] = \"currentAccount\";\n  FuelConnectorMethods2[\"signTransaction\"] = \"signTransaction\";\n  FuelConnectorMethods2[\"signMessage\"] = \"signMessage\";\n  FuelConnectorMethods2[\"sendTransaction\"] = \"sendTransaction\";\n  FuelConnectorMethods2[\"assets\"] = \"assets\";\n  FuelConnectorMethods2[\"addAsset\"] = \"addAsset\";\n  FuelConnectorMethods2[\"addAssets\"] = \"addAssets\";\n  FuelConnectorMethods2[\"networks\"] = \"networks\";\n  FuelConnectorMethods2[\"currentNetwork\"] = \"currentNetwork\";\n  FuelConnectorMethods2[\"addNetwork\"] = \"addNetwork\";\n  FuelConnectorMethods2[\"selectNetwork\"] = \"selectNetwork\";\n  FuelConnectorMethods2[\"addABI\"] = \"addABI\";\n  FuelConnectorMethods2[\"getABI\"] = \"getABI\";\n  FuelConnectorMethods2[\"hasABI\"] = \"hasABI\";\n  return FuelConnectorMethods2;\n})(FuelConnectorMethods || {});\nvar FuelConnectorEventTypes = /* @__PURE__ */ ((FuelConnectorEventTypes2) => {\n  FuelConnectorEventTypes2[\"connectors\"] = \"connectors\";\n  FuelConnectorEventTypes2[\"currentConnector\"] = \"currentConnector\";\n  FuelConnectorEventTypes2[\"connection\"] = \"connection\";\n  FuelConnectorEventTypes2[\"accounts\"] = \"accounts\";\n  FuelConnectorEventTypes2[\"currentAccount\"] = \"currentAccount\";\n  FuelConnectorEventTypes2[\"networks\"] = \"networks\";\n  FuelConnectorEventTypes2[\"currentNetwork\"] = \"currentNetwork\";\n  FuelConnectorEventTypes2[\"assets\"] = \"assets\";\n  FuelConnectorEventTypes2[\"abis\"] = \"abis\";\n  return FuelConnectorEventTypes2;\n})(FuelConnectorEventTypes || {});\nvar FuelConnectorEventType = \"FuelConnector\";\n\n// src/connectors/types/local-storage.ts\nvar LocalStorage = class {\n  static {\n    __name(this, \"LocalStorage\");\n  }\n  storage;\n  constructor(localStorage) {\n    this.storage = localStorage;\n  }\n  async setItem(key, value) {\n    this.storage.setItem(key, value);\n  }\n  async getItem(key) {\n    return this.storage.getItem(key);\n  }\n  async removeItem(key) {\n    this.storage.removeItem(key);\n  }\n  async clear() {\n    this.storage.clear();\n  }\n};\n\n// src/connectors/fuel-connector.ts\nvar FuelConnector = class extends events__WEBPACK_IMPORTED_MODULE_17__.EventEmitter {\n  static {\n    __name(this, \"FuelConnector\");\n  }\n  name = \"\";\n  metadata = {};\n  connected = false;\n  installed = false;\n  external = true;\n  events = FuelConnectorEventTypes;\n  /**\n   * Should return true if the connector is loaded\n   * in less then one second.\n   *\n   * @returns Always true.\n   */\n  async ping() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current version of the connector\n   * and the network version that is compatible.\n   *\n   * @returns boolean - connection status.\n   */\n  async version() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return true if the connector is connected\n   * to any of the accounts available.\n   *\n   * @returns The connection status.\n   */\n  async isConnected() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the accounts authorized for the\n   * current connection.\n   *\n   * @returns The accounts addresses strings\n   */\n  async accounts() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the connection process and return\n   * true if the account authorize the connection.\n   *\n   * and return false if the user reject the connection.\n   *\n   * @emits accounts\n   * @returns boolean - connection status.\n   */\n  async connect() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should disconnect the current connection and\n   * return false if the disconnection was successful.\n   *\n   * @emits assets connection\n   * @returns The connection status.\n   */\n  async disconnect() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the sign message process and return\n   * the signed message.\n   *\n   * @param address - The address to sign the message\n   * @param message - The message to sign all text will be treated as text utf-8\n   *\n   * @returns Message signature\n   */\n  async signMessage(_address, _message) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the sign transaction process and return\n   * the signed transaction.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to sign\n   *\n   * @returns Transaction signature\n   */\n  async signTransaction(_address, _transaction, _params) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the send transaction process and return\n   * the transaction id submitted to the network.\n   *\n   * If the network is not available for the connection\n   * it should throw an error to avoid the transaction\n   * to be sent to the wrong network and lost.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to send\n   * @param params - Optional parameters to send the transaction\n   * @returns The transaction id or transaction response\n   */\n  async sendTransaction(_address, _transaction, _params) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current account selected inside the connector, if the account\n   * is authorized for the connection.\n   *\n   * If the account is not authorized it should return null.\n   *\n   * @returns The current account selected otherwise null.\n   */\n  async currentAccount() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the assets metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param assets - The assets to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAssets(_assets) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the asset metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param asset - The asset to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAsset(_asset) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the assets added to the connector. If a connection is already established.\n   *\n   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.\n   */\n  async assets() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the add network process and return true if the network was added successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param networkUrl - The URL of the network to be added.\n   * @returns Return true if the network was added successfully\n   */\n  async addNetwork(_networkUrl) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the select network process and return true if the network has change successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param network - The network to be selected.\n   * @returns Return true if the network was added successfully\n   */\n  async selectNetwork(_network) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the networks available from the connector. If the connection is already established.\n   *\n   * @returns Return all the networks added to the connector.\n   */\n  async networks() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current network selected inside the connector. Even if the connection is not established.\n   *\n   * @returns Return the current network selected inside the connector.\n   */\n  async currentNetwork() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the ABI to the connector and return true if the ABI was added successfully.\n   *\n   * @param contractId - The contract id to add the ABI.\n   * @param abi - The JSON ABI that represents a contract.\n   * @returns Return true if the ABI was added successfully.\n   */\n  async addABI(_contractId, _abi) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the ABI.\n   * @returns The ABI if it exists, otherwise return null.\n   */\n  async getABI(_id) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the abi\n   * @returns Returns true if the abi exists or false if not.\n   */\n  async hasABI(_id) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Event listener for the connector.\n   *\n   * @param eventName - The event name to listen\n   * @param listener - The listener function\n   */\n  on(eventName, listener) {\n    super.on(eventName, listener);\n    return this;\n  }\n};\n\n// src/connectors/utils/cache.ts\nfunction cacheFor(fn, { cache: cache2, cacheTime, key }) {\n  return async (...args) => {\n    if (cache2[key] && cache2[key]?.value) {\n      return cache2[key]?.value;\n    }\n    clearTimeout(cache2[key]?.timeout);\n    const result = await fn(...args);\n    cache2[key] = {\n      timeout: Number(\n        setTimeout(() => {\n          cache2[key] = null;\n        }, cacheTime)\n      ),\n      value: result\n    };\n    return result;\n  };\n}\n__name(cacheFor, \"cacheFor\");\n\n// src/connectors/utils/dispatch-fuel-connector-event.ts\nfunction dispatchFuelConnectorEvent(connector) {\n  window.dispatchEvent(\n    new CustomEvent(FuelConnectorEventType, {\n      detail: connector\n    })\n  );\n}\n__name(dispatchFuelConnectorEvent, \"dispatchFuelConnectorEvent\");\n\n// src/connectors/utils/promises.ts\n\nfunction deferPromise() {\n  const defer = {};\n  defer.promise = new Promise((resolve, reject) => {\n    defer.reject = reject;\n    defer.resolve = resolve;\n  });\n  return defer;\n}\n__name(deferPromise, \"deferPromise\");\nasync function withTimeout(promise, timeout = 1050) {\n  const timeoutPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.TIMEOUT_EXCEEDED, \"Promise timed out\"));\n    }, timeout);\n  });\n  return Promise.race([timeoutPromise, promise]);\n}\n__name(withTimeout, \"withTimeout\");\n\n// src/connectors/fuel.ts\nvar HAS_CONNECTOR_TIMEOUT = 2e3;\nvar PING_CACHE_TIME = 5e3;\nvar { warn } = console;\nvar Fuel = class _Fuel extends FuelConnector {\n  static {\n    __name(this, \"Fuel\");\n  }\n  static STORAGE_KEY = \"fuel-current-connector\";\n  static defaultConfig = {};\n  _storage = null;\n  _connectors = [];\n  _targetObject = null;\n  _unsubscribes = [];\n  _targetUnsubscribe = /* @__PURE__ */ __name(() => {\n  }, \"_targetUnsubscribe\");\n  _pingCache = {};\n  _currentConnector;\n  _initializationPromise = null;\n  constructor(config = _Fuel.defaultConfig) {\n    super();\n    this.setMaxListeners(1e3);\n    this._connectors = config.connectors ?? [];\n    this._targetObject = this.getTargetObject(config.targetObject);\n    this._storage = config.storage === void 0 ? this.getStorage() : config.storage;\n    this.setupMethods();\n    this._initializationPromise = this.initialize();\n  }\n  async initialize() {\n    try {\n      const connectResponse = this.setDefaultConnector();\n      this._targetUnsubscribe = this.setupConnectorListener();\n      await connectResponse;\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PROVIDER, \"Error initializing Fuel Connector\");\n    }\n  }\n  async init() {\n    await this._initializationPromise;\n    return this;\n  }\n  /**\n   * Return the target object to listen for global events.\n   */\n  getTargetObject(targetObject) {\n    if (targetObject) {\n      return targetObject;\n    }\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n    if (typeof document !== \"undefined\") {\n      return document;\n    }\n    return null;\n  }\n  /**\n   * Return the storage used.\n   */\n  getStorage() {\n    if (typeof window !== \"undefined\") {\n      return new LocalStorage(window.localStorage);\n    }\n    return void 0;\n  }\n  /**\n   * Setup the default connector from the storage.\n   */\n  async setDefaultConnector() {\n    const connectorName = await this._storage?.getItem(_Fuel.STORAGE_KEY) || this._connectors[0]?.name;\n    if (connectorName) {\n      return this.selectConnector(connectorName, {\n        emitEvents: false\n      });\n    }\n    return void 0;\n  }\n  /**\n   * Start listener for all the events of the current\n   * connector and emit them to the Fuel instance\n   */\n  setupConnectorEvents(events) {\n    if (!this._currentConnector) {\n      return;\n    }\n    const currentConnector = this._currentConnector;\n    this._unsubscribes.map((unSub) => unSub());\n    this._unsubscribes = events.map((event) => {\n      const handler = /* @__PURE__ */ __name((...args) => this.emit(event, ...args), \"handler\");\n      currentConnector.on(event, handler);\n      return () => currentConnector.off(event, handler);\n    });\n  }\n  /**\n   * Call method from the current connector.\n   */\n  async callMethod(method, ...args) {\n    const hasConnector = await this.hasConnector();\n    await this.pingConnector();\n    if (!this._currentConnector || !hasConnector) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_CONNECTOR,\n        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`\n      );\n    }\n    if (typeof this._currentConnector[method] === \"function\") {\n      return this._currentConnector[method](...args);\n    }\n    return void 0;\n  }\n  /**\n   * Create a method for each method proxy that is available on the Common interface\n   * and call the method from the current connector.\n   */\n  setupMethods() {\n    Object.values(FuelConnectorMethods).forEach((method) => {\n      this[method] = async (...args) => this.callMethod(method, ...args);\n    });\n  }\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status.\n   */\n  async fetchConnectorStatus(connector) {\n    const requestTimestamp = Date.now();\n    const [isConnected, ping] = await Promise.allSettled([\n      withTimeout(connector.isConnected()),\n      withTimeout(this.pingConnector(connector))\n    ]);\n    const isStale = requestTimestamp < (connector._latestUpdate || 0);\n    if (!isStale) {\n      connector._latestUpdate = Date.now();\n      connector.installed = ping.status === \"fulfilled\" && ping.value;\n      connector.connected = isConnected.status === \"fulfilled\" && isConnected.value;\n    }\n    return {\n      installed: connector.installed,\n      connected: connector.connected\n    };\n  }\n  /**\n   * Fetch the status of all connectors and set the installed and connected\n   * status.\n   */\n  async fetchConnectorsStatus() {\n    return Promise.all(\n      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))\n    );\n  }\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status. If no connector is provided it will ping the current connector.\n   */\n  async pingConnector(connector) {\n    const curConnector = connector || this._currentConnector;\n    if (!curConnector) {\n      return false;\n    }\n    try {\n      return await cacheFor(async () => withTimeout(curConnector.ping()), {\n        key: curConnector.name,\n        cache: this._pingCache,\n        cacheTime: PING_CACHE_TIME\n      })();\n    } catch {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PROVIDER, \"Current connector is not available.\");\n    }\n  }\n  /**\n   * Setup a listener for the FuelConnector event and add the connector\n   * to the list of new connectors.\n   */\n  setupConnectorListener = /* @__PURE__ */ __name(() => {\n    const { _targetObject: targetObject } = this;\n    const eventName = FuelConnectorEventType;\n    if (targetObject?.on) {\n      targetObject.on(eventName, this.addConnector);\n      return () => {\n        targetObject.off?.(eventName, this.addConnector);\n      };\n    }\n    if (targetObject?.addEventListener) {\n      const handler = /* @__PURE__ */ __name((e) => {\n        this.addConnector(e.detail);\n      }, \"handler\");\n      targetObject.addEventListener(eventName, handler);\n      return () => {\n        targetObject.removeEventListener?.(eventName, handler);\n      };\n    }\n    return () => {\n    };\n  }, \"setupConnectorListener\");\n  /**\n   * Add a new connector to the list of connectors.\n   */\n  addConnector = /* @__PURE__ */ __name(async (connector) => {\n    if (!this.getConnector(connector)) {\n      this._connectors.push(connector);\n    }\n    await this.fetchConnectorStatus(connector);\n    this.emit(this.events.connectors, this._connectors);\n    if (!this._currentConnector) {\n      await this.selectConnector(connector.name, {\n        emitEvents: false\n      });\n    }\n  }, \"addConnector\");\n  triggerConnectorEvents = /* @__PURE__ */ __name(async () => {\n    const [isConnected, networks2, currentNetwork] = await Promise.all([\n      this.isConnected(),\n      this.networks(),\n      this.currentNetwork()\n    ]);\n    this.emit(this.events.connection, isConnected);\n    this.emit(this.events.networks, networks2);\n    this.emit(this.events.currentNetwork, currentNetwork);\n    if (isConnected) {\n      const [accounts, currentAccount] = await Promise.all([\n        this.accounts(),\n        this.currentAccount()\n      ]);\n      this.emit(this.events.accounts, accounts);\n      this.emit(this.events.currentAccount, currentAccount);\n    }\n  }, \"triggerConnectorEvents\");\n  /**\n   * Get a connector from the list of connectors.\n   */\n  getConnector = /* @__PURE__ */ __name((connector) => this._connectors.find((c) => {\n    const connectorName = typeof connector === \"string\" ? connector : connector.name;\n    return c.name === connectorName || c === connector;\n  }) || null, \"getConnector\");\n  /**\n   * Return the list of connectors with the status of installed and connected.\n   */\n  async connectors() {\n    await this.fetchConnectorsStatus();\n    return this._connectors;\n  }\n  /**\n   * Set the current connector to be used.\n   */\n  async selectConnector(connectorName, options = {\n    emitEvents: true\n  }) {\n    const connector = this.getConnector(connectorName);\n    if (!connector) {\n      return false;\n    }\n    if (this._currentConnector?.name === connectorName) {\n      return true;\n    }\n    const { installed } = await this.fetchConnectorStatus(connector);\n    if (installed) {\n      this._currentConnector = connector;\n      this.emit(this.events.currentConnector, connector);\n      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));\n      await this._storage?.setItem(_Fuel.STORAGE_KEY, connector.name);\n      if (options.emitEvents) {\n        this.triggerConnectorEvents();\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Return the current selected connector.\n   */\n  currentConnector() {\n    return this._currentConnector;\n  }\n  /**\n   * Return true if any connector is available.\n   */\n  async hasConnector() {\n    if (this._currentConnector) {\n      return true;\n    }\n    const defer = deferPromise();\n    this.once(this.events.currentConnector, () => {\n      defer.resolve(true);\n    });\n    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT).then(() => true).catch(() => false);\n  }\n  async hasWallet() {\n    return this.hasConnector();\n  }\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   *\n   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.\n   */\n  async getProvider(providerOrNetwork) {\n    warn(\n      \"getProvider is deprecated and is going to be removed in the future, use getWallet instead.\"\n    );\n    return this._getProvider(providerOrNetwork);\n  }\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   */\n  async _getProvider(providerOrNetwork) {\n    let provider;\n    if (providerOrNetwork && \"getTransactionResponse\" in providerOrNetwork) {\n      provider = providerOrNetwork;\n    } else if (providerOrNetwork && \"chainId\" in providerOrNetwork && \"url\" in providerOrNetwork) {\n      provider = new Provider(providerOrNetwork.url);\n    } else if (!providerOrNetwork) {\n      const currentNetwork = await this.currentNetwork();\n      provider = new Provider(currentNetwork.url);\n    } else {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PROVIDER, \"Provider is not valid.\");\n    }\n    return provider;\n  }\n  /**\n   * Return a Fuel Wallet Locked instance with extends features to work with\n   * connectors.\n   */\n  async getWallet(address, providerOrNetwork) {\n    const provider = await this._getProvider(providerOrNetwork);\n    return new Account(address, provider, this);\n  }\n  /**\n   * Remove all open listeners this is useful when you want to\n   * remove the Fuel instance and avoid memory leaks.\n   */\n  unsubscribe() {\n    this._unsubscribes.map((unSub) => unSub());\n    this._targetUnsubscribe();\n    this.removeAllListeners();\n  }\n  /**\n   * Clean all the data from the storage.\n   */\n  async clean() {\n    await this._storage?.removeItem(_Fuel.STORAGE_KEY);\n  }\n  /**\n   * Removes all listeners and cleans the storage.\n   */\n  async destroy() {\n    this.unsubscribe();\n    await this.clean();\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/index.mjs\n");

/***/ })

};
;