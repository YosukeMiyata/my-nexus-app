"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41";
exports.ids = ["vendor-chunks/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs":
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs ***!
  \************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateTime: () => (/* binding */ DateTime),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   assertUnreachable: () => (/* binding */ assertUnreachable),\n/* harmony export */   capitalizeString: () => (/* binding */ capitalizeString),\n/* harmony export */   chunkAndPadBytes: () => (/* binding */ chunkAndPadBytes),\n/* harmony export */   compressBytecode: () => (/* binding */ compressBytecode),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   dataSlice: () => (/* binding */ dataSlice),\n/* harmony export */   decodeBase58: () => (/* binding */ decodeBase58),\n/* harmony export */   decompressBytecode: () => (/* binding */ decompressBytecode),\n/* harmony export */   defaultConsensusKey: () => (/* binding */ defaultConsensusKey),\n/* harmony export */   defaultSnapshotConfigs: () => (/* binding */ defaultSnapshotConfigs),\n/* harmony export */   encodeBase58: () => (/* binding */ encodeBase58),\n/* harmony export */   hexlify: () => (/* binding */ hexlify),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   normalizeString: () => (/* binding */ normalizeString),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toUtf8Bytes: () => (/* binding */ toUtf8Bytes),\n/* harmony export */   toUtf8String: () => (/* binding */ toUtf8String)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+errors@0.101.1/node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+math@0.101.1/node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fflate */ \"(ssr)/./node_modules/.pnpm/fflate@0.8.2/node_modules/fflate/esm/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/utils/capitalizeString.ts\nvar capitalizeString = /* @__PURE__ */ __name((str) => {\n  if (!str.length) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n}, \"capitalizeString\");\n\n// src/utils/chunkAndPadBytes.ts\nvar chunkAndPadBytes = /* @__PURE__ */ __name((bytes, chunkSize) => {\n  const chunks = [];\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + (8 - remainingBytes % 8) % 8;\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n  return chunks;\n}, \"chunkAndPadBytes\");\n\n// src/utils/arrayify.ts\n\nvar arrayify = /* @__PURE__ */ __name((value, name, copy = true) => {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n  if (typeof value === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n  const nameMessage = name ? ` ${name} -` : \"\";\n  const message = `invalid data:${nameMessage} ${value}\nIf you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DATA, message);\n}, \"arrayify\");\n\n// src/utils/concat.ts\nvar concatBytes = /* @__PURE__ */ __name((arrays) => {\n  const byteArrays = arrays.map((array) => {\n    if (array instanceof Uint8Array) {\n      return array;\n    }\n    return Uint8Array.from(array);\n  });\n  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);\n  const concatenated = new Uint8Array(totalSize);\n  byteArrays.reduce((offset, object) => {\n    concatenated.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return concatenated;\n}, \"concatBytes\");\nvar concat = /* @__PURE__ */ __name((arrays) => {\n  const bytes = arrays.map((v) => arrayify(v));\n  return concatBytes(bytes);\n}, \"concat\");\n\n// src/utils/hexlify.ts\nvar HexCharacters = \"0123456789abcdef\";\nfunction hexlify(data) {\n  const bytes = arrayify(data);\n  let result = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];\n  }\n  return result;\n}\n__name(hexlify, \"hexlify\");\n\n// src/utils/normalizeString.ts\n\nvar normalizeString = /* @__PURE__ */ __name((str) => {\n  const transformations = [\n    (s) => s.replace(/\\s+/g, \"-\"),\n    // spaces to -\n    (s) => s.replace(/\\./g, \"-\"),\n    // dots to -\n    (s) => s.replace(/_/g, \"-\"),\n    // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()),\n    // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, \"\"),\n    // delete any '-' left\n    (s) => s.replace(/^\\d+/, \"\"),\n    // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1)\n    // capitalize first letter\n  ];\n  const output = transformations.reduce((s, t) => t(s), str);\n  if (output === \"\") {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.PARSE_FAILED, errMsg);\n  }\n  return output;\n}, \"normalizeString\");\n\n// src/utils/date-time.ts\nvar TAI64_LEAP_SECONDS = 37;\nvar TAI64_UNIX_OFFSET = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);\nvar msToSeconds = /* @__PURE__ */ __name((ms) => Math.floor(ms / 1e3), \"msToSeconds\");\nvar secondsToMs = /* @__PURE__ */ __name((seconds) => seconds * 1e3, \"secondsToMs\");\nvar tai64ToUnixSeconds = /* @__PURE__ */ __name((tai64) => Number(BigInt(tai64) - TAI64_UNIX_OFFSET), \"tai64ToUnixSeconds\");\nvar unixSecondsToTai64 = /* @__PURE__ */ __name((unixSeconds) => String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET), \"unixSecondsToTai64\");\nvar tai64ToUnixMilliseconds = /* @__PURE__ */ __name((tai64) => secondsToMs(tai64ToUnixSeconds(tai64)), \"tai64ToUnixMilliseconds\");\nvar DateTime = class _DateTime extends Date {\n  static {\n    __name(this, \"DateTime\");\n  }\n  static TAI64_NULL = \"\";\n  /**\n   * Generates a new DateTime instance from a Tai64 timestamp.\n   *\n   * @param tai64 - Tai64 timestamp\n   * @returns a new DateTime instance\n   */\n  static fromTai64(tai64) {\n    return new _DateTime(tai64ToUnixMilliseconds(tai64));\n  }\n  /**\n   * @param unixMilliseconds - unix milliseconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixMilliseconds(unixMilliseconds) {\n    return new _DateTime(unixMilliseconds);\n  }\n  /**\n   * @param unixSeconds - unix seconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixSeconds(unixSeconds) {\n    return new _DateTime(secondsToMs(unixSeconds));\n  }\n  /**\n   * Hide the constructor to prevent direct instantiation.\n   */\n  constructor(date) {\n    super(date);\n  }\n  /**\n   * Returns the Tai64 timestamp.\n   *\n   * @returns the Tai64 timestamp\n   */\n  toTai64() {\n    return unixSecondsToTai64(this.toUnixSeconds());\n  }\n  /**\n   * @returns the unix milliseconds timestamp\n   */\n  toUnixMilliseconds() {\n    return this.getTime();\n  }\n  /**\n   * @returns the unix seconds timestamp\n   */\n  toUnixSeconds() {\n    return msToSeconds(this.getTime());\n  }\n};\n\n// src/utils/sleep.ts\nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n__name(sleep, \"sleep\");\n\n// src/utils/defaultSnapshots/chainConfig.json\nvar chainConfig_default = {\n  chain_name: \"local_testnet\",\n  consensus_parameters: {\n    V2: {\n      tx_params: {\n        V1: {\n          max_inputs: 255,\n          max_outputs: 255,\n          max_witnesses: 255,\n          max_gas_per_tx: 3e7,\n          max_size: 112640,\n          max_bytecode_subsections: 256\n        }\n      },\n      predicate_params: {\n        V1: {\n          max_predicate_length: 24576,\n          max_predicate_data_length: 24576,\n          max_message_data_length: 102400,\n          max_gas_per_predicate: 1e6\n        }\n      },\n      script_params: {\n        V1: {\n          max_script_length: 102400,\n          max_script_data_length: 102400\n        }\n      },\n      contract_params: {\n        V1: {\n          contract_max_size: 112640,\n          max_storage_slots: 1760\n        }\n      },\n      fee_params: {\n        V1: {\n          gas_price_factor: 115e4,\n          gas_per_byte: 63\n        }\n      },\n      chain_id: 0,\n      gas_costs: {\n        V4: {\n          add: 2,\n          addi: 2,\n          and: 2,\n          andi: 2,\n          bal: 274,\n          bhei: 2,\n          bhsh: 2,\n          burn: 7566,\n          cb: 2,\n          cfsi: 2,\n          div: 2,\n          divi: 2,\n          eck1: 1489,\n          ecr1: 20513,\n          eq: 2,\n          exp: 2,\n          expi: 2,\n          flag: 2,\n          gm: 2,\n          gt: 2,\n          gtf: 3,\n          ji: 2,\n          jmp: 2,\n          jne: 2,\n          jnei: 2,\n          jnzi: 2,\n          jmpf: 2,\n          jmpb: 2,\n          jnzf: 2,\n          jnzb: 2,\n          jnef: 2,\n          jneb: 2,\n          lb: 2,\n          log: 80,\n          lt: 2,\n          lw: 2,\n          mint: 6566,\n          mlog: 2,\n          mod: 2,\n          modi: 2,\n          move: 2,\n          movi: 1,\n          mroo: 3,\n          mul: 2,\n          muli: 2,\n          mldv: 3,\n          noop: 1,\n          not: 2,\n          or: 1,\n          ori: 2,\n          poph: 2,\n          popl: 2,\n          pshh: 5,\n          pshl: 5,\n          ret_contract: 43,\n          rvrt_contract: 39,\n          sb: 2,\n          sll: 2,\n          slli: 2,\n          srl: 2,\n          srli: 2,\n          srw: 237,\n          sub: 2,\n          subi: 2,\n          sw: 2,\n          sww: 5708,\n          time: 106,\n          tr: 9253,\n          tro: 7199,\n          wdcm: 2,\n          wqcm: 2,\n          wdop: 2,\n          wqop: 3,\n          wdml: 3,\n          wqml: 3,\n          wddv: 3,\n          wqdv: 4,\n          wdmd: 6,\n          wqmd: 9,\n          wdam: 6,\n          wqam: 6,\n          wdmm: 6,\n          wqmm: 6,\n          xor: 2,\n          xori: 2,\n          ecop: 2,\n          aloc: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 35\n            }\n          },\n          bsiz: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 564\n            }\n          },\n          bldd: {\n            LightOperation: {\n              base: 33,\n              units_per_gas: 130\n            }\n          },\n          cfe: {\n            LightOperation: {\n              base: 10,\n              units_per_gas: 62\n            }\n          },\n          cfei: {\n            LightOperation: {\n              base: 10,\n              units_per_gas: 66\n            }\n          },\n          call: {\n            LightOperation: {\n              base: 6934,\n              units_per_gas: 14\n            }\n          },\n          ccp: {\n            LightOperation: {\n              base: 21,\n              units_per_gas: 155\n            }\n          },\n          croo: {\n            LightOperation: {\n              base: 69,\n              units_per_gas: 4\n            }\n          },\n          csiz: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 580\n            }\n          },\n          ed19: {\n            LightOperation: {\n              base: 3232,\n              units_per_gas: 7\n            }\n          },\n          k256: {\n            LightOperation: {\n              base: 21,\n              units_per_gas: 6\n            }\n          },\n          ldc: {\n            LightOperation: {\n              base: 84,\n              units_per_gas: 113\n            }\n          },\n          logd: {\n            LightOperation: {\n              base: 278,\n              units_per_gas: 5\n            }\n          },\n          mcl: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1282\n            }\n          },\n          mcli: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1250\n            }\n          },\n          mcp: {\n            LightOperation: {\n              base: 3,\n              units_per_gas: 385\n            }\n          },\n          mcpi: {\n            LightOperation: {\n              base: 7,\n              units_per_gas: 585\n            }\n          },\n          meq: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1234\n            }\n          },\n          retd_contract: {\n            LightOperation: {\n              base: 227,\n              units_per_gas: 5\n            }\n          },\n          s256: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 5\n            }\n          },\n          scwq: {\n            HeavyOperation: {\n              base: 5666,\n              gas_per_unit: 6628\n            }\n          },\n          smo: {\n            LightOperation: {\n              base: 14635,\n              units_per_gas: 3\n            }\n          },\n          srwq: {\n            HeavyOperation: {\n              base: 245,\n              gas_per_unit: 243\n            }\n          },\n          swwq: {\n            HeavyOperation: {\n              base: 5661,\n              gas_per_unit: 5776\n            }\n          },\n          epar: {\n            HeavyOperation: {\n              base: 5661,\n              gas_per_unit: 5776\n            }\n          },\n          contract_root: {\n            LightOperation: {\n              base: 24,\n              units_per_gas: 3\n            }\n          },\n          state_root: {\n            HeavyOperation: {\n              base: 189,\n              gas_per_unit: 96\n            }\n          },\n          new_storage_per_byte: 63,\n          vm_initialization: {\n            LightOperation: {\n              base: 3127,\n              units_per_gas: 61\n            }\n          }\n        }\n      },\n      base_asset_id: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\",\n      block_gas_limit: 3e7,\n      block_transaction_size_limit: 260096,\n      privileged_address: \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  consensus: {\n    PoA: {\n      signing_key: \"0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d\"\n    }\n  }\n};\n\n// src/utils/defaultSnapshots/metadata.json\nvar metadata_default = {\n  chain_config: \"chainConfig.json\",\n  table_encoding: {\n    Json: {\n      filepath: \"stateConfig.json\"\n    }\n  }\n};\n\n// src/utils/defaultSnapshots/stateConfig.json\nvar stateConfig_default = {\n  coins: [],\n  messages: [],\n  contracts: [],\n  blobs: [],\n  block_height: 0,\n  da_block_height: 0\n};\n\n// src/utils/defaultSnapshotConfigs.ts\nvar defaultSnapshotConfigs = {\n  chainConfig: chainConfig_default,\n  metadata: metadata_default,\n  stateConfig: stateConfig_default\n};\nvar defaultConsensusKey = \"0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298\";\n\n// src/utils/isDefined.ts\nfunction isDefined(value) {\n  return value !== void 0;\n}\n__name(isDefined, \"isDefined\");\n\n// src/utils/base58.ts\n\n\nvar BN_0 = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(0);\nvar BN_58 = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(58);\nvar Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar Lookup = null;\nfunction getAlpha(letter) {\n  if (Lookup == null) {\n    Lookup = {};\n    for (let i = 0; i < Alphabet.length; i++) {\n      Lookup[Alphabet[i]] = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(i);\n    }\n  }\n  const result = Lookup[letter];\n  if (result == null) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);\n  }\n  return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(result);\n}\n__name(getAlpha, \"getAlpha\");\nfunction encodeBase58(_value) {\n  const bytes = arrayify(_value);\n  let value = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(bytes);\n  let result = \"\";\n  while (value.gt(BN_0)) {\n    result = Alphabet[Number(value.mod(BN_58))] + result;\n    value = value.div(BN_58);\n  }\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i]) {\n      break;\n    }\n    result = Alphabet[0] + result;\n  }\n  return result;\n}\n__name(encodeBase58, \"encodeBase58\");\nfunction decodeBase58(value) {\n  let result = BN_0;\n  for (let i = 0; i < value.length; i++) {\n    result = result.mul(BN_58);\n    result = result.add(getAlpha(value[i].toString()));\n  }\n  return result;\n}\n__name(decodeBase58, \"decodeBase58\");\n\n// src/utils/dataSlice.ts\n\nfunction dataSlice(data, start, end) {\n  const bytes = arrayify(data);\n  if (end != null && end > bytes.length) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DATA, \"cannot slice beyond data bounds\");\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n__name(dataSlice, \"dataSlice\");\n\n// src/utils/toUtf8Bytes.ts\n\nfunction toUtf8Bytes(stri, form = true) {\n  let str = stri;\n  if (form) {\n    str = stri.normalize(\"NFC\");\n  }\n  const result = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      result.push(c);\n    } else if (c < 2048) {\n      result.push(c >> 6 | 192);\n      result.push(c & 63 | 128);\n    } else if ((c & 64512) === 55296) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n      if (i >= str.length || (c2 & 64512) !== 56320) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_INPUT_PARAMETERS,\n          \"Invalid UTF-8 in the input string.\"\n        );\n      }\n      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);\n      result.push(pair >> 18 | 240);\n      result.push(pair >> 12 & 63 | 128);\n      result.push(pair >> 6 & 63 | 128);\n      result.push(pair & 63 | 128);\n    } else {\n      result.push(c >> 12 | 224);\n      result.push(c >> 6 & 63 | 128);\n      result.push(c & 63 | 128);\n    }\n  }\n  return new Uint8Array(result);\n}\n__name(toUtf8Bytes, \"toUtf8Bytes\");\n\n// src/utils/toUtf8String.ts\nfunction onError(reason, offset, bytes, output, badCodepoint) {\n  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);\n  return offset;\n}\n__name(onError, \"onError\");\nfunction helper(codePoints) {\n  return codePoints.map((codePoint) => {\n    if (codePoint <= 65535) {\n      return String.fromCharCode(codePoint);\n    }\n    codePoint -= 65536;\n    return String.fromCharCode(\n      (codePoint >> 10 & 1023) + 55296,\n      (codePoint & 1023) + 56320\n    );\n  }).join(\"\");\n}\n__name(helper, \"helper\");\nfunction getUtf8CodePoints(_bytes) {\n  const bytes = arrayify(_bytes, \"bytes\");\n  const result = [];\n  let i = 0;\n  while (i < bytes.length) {\n    const c = bytes[i++];\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n    let extraLength = null;\n    let overlongMask = null;\n    if ((c & 224) === 192) {\n      extraLength = 1;\n      overlongMask = 127;\n    } else if ((c & 240) === 224) {\n      extraLength = 2;\n      overlongMask = 2047;\n    } else if ((c & 248) === 240) {\n      extraLength = 3;\n      overlongMask = 65535;\n    } else {\n      if ((c & 192) === 128) {\n        i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n      } else {\n        i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n      }\n      continue;\n    }\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(\"OVERRUN\", i - 1, bytes, result);\n      continue;\n    }\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n    for (let j = 0; j < extraLength; j++) {\n      const nextChar = bytes[i];\n      if ((nextChar & 192) !== 128) {\n        i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n        res = null;\n        break;\n      }\n      res = res << 6 | nextChar & 63;\n      i++;\n    }\n    if (res === null) {\n      continue;\n    }\n    if (res > 1114111) {\n      i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    if (res >= 55296 && res <= 57343) {\n      i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    if (res <= overlongMask) {\n      i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    result.push(res);\n  }\n  return result;\n}\n__name(getUtf8CodePoints, \"getUtf8CodePoints\");\nfunction toUtf8String(bytes) {\n  return helper(getUtf8CodePoints(bytes));\n}\n__name(toUtf8String, \"toUtf8String\");\n\n// src/utils/bytecode.ts\n\nvar compressBytecode = /* @__PURE__ */ __name((bytecodeAsBinary) => {\n  if (!bytecodeAsBinary) {\n    return \"\";\n  }\n  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);\n  const bytecodeCompressGzipped = (0,fflate__WEBPACK_IMPORTED_MODULE_2__.gzipSync)(bytecodeCompressBytes, { mtime: 0 });\n  const bytecodeCompressBinary = String.fromCharCode.apply(\n    null,\n    new Uint8Array(bytecodeCompressGzipped)\n  );\n  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);\n  return bytecodeCompressEncoded;\n}, \"compressBytecode\");\nvar decompressBytecode = /* @__PURE__ */ __name((bytecodeAsBase64) => {\n  const bytecodeDecompressBinary = atob(bytecodeAsBase64);\n  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map(\n    (_, i) => bytecodeDecompressBinary.charCodeAt(i)\n  );\n  const bytecodeDecompressBytes = (0,fflate__WEBPACK_IMPORTED_MODULE_2__.gunzipSync)(bytecodeDecompressDecoded);\n  return bytecodeDecompressBytes;\n}, \"decompressBytecode\");\n\n// src/index.ts\nfunction assertUnreachable(_x) {\n  throw new Error(\"Didn't expect to get here\");\n}\n__name(assertUnreachable, \"assertUnreachable\");\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs\n");

/***/ })

};
;