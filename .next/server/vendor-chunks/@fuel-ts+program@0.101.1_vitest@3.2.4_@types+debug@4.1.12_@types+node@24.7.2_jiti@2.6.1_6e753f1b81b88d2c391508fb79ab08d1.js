"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuel-ts+program@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_6e753f1b81b88d2c391508fb79ab08d1";
exports.ids = ["vendor-chunks/@fuel-ts+program@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_6e753f1b81b88d2c391508fb79ab08d1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@fuel-ts+program@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_6e753f1b81b88d2c391508fb79ab08d1/node_modules/@fuel-ts/program/dist/index.mjs":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuel-ts+program@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_6e753f1b81b88d2c391508fb79ab08d1/node_modules/@fuel-ts/program/dist/index.mjs ***!
  \**************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractContract: () => (/* binding */ AbstractContract),\n/* harmony export */   AbstractProgram: () => (/* binding */ AbstractProgram),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   FunctionInvocationScope: () => (/* binding */ FunctionInvocationScope),\n/* harmony export */   InstructionSet: () => (/* binding */ InstructionSet),\n/* harmony export */   MultiCallInvocationScope: () => (/* binding */ MultiCallInvocationScope),\n/* harmony export */   ScriptRequest: () => (/* binding */ ScriptRequest),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   buildDryRunResult: () => (/* binding */ buildDryRunResult),\n/* harmony export */   buildFunctionResult: () => (/* binding */ buildFunctionResult),\n/* harmony export */   buildPreConfirmationFunctionResult: () => (/* binding */ buildPreConfirmationFunctionResult),\n/* harmony export */   extractInvocationResult: () => (/* binding */ extractInvocationResult),\n/* harmony export */   getAbisFromAllCalls: () => (/* binding */ getAbisFromAllCalls),\n/* harmony export */   getAllResultLogs: () => (/* binding */ getAllResultLogs),\n/* harmony export */   getResultLogs: () => (/* binding */ getResultLogs)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/account */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+account@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_f204daa1b5bd0d8f80ab398db79a8f51/node_modules/@fuel-ts/account/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+errors@0.101.1/node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/address */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+address@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_12808c1e18925070bf8378bf9ead890c/node_modules/@fuel-ts/address/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+math@0.101.1/node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/transactions */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+transactions@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@_dc6813ea14c53ffd87ce32c7cc62a339/node_modules/@fuel-ts/transactions/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fuels/vm-asm */ \"(ssr)/./node_modules/.pnpm/@fuels+vm-asm@0.60.2/node_modules/@fuels/vm-asm/dist/node/index.cjs\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/clone.js\");\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d/node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fuel-ts/address/configs */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+address@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_12808c1e18925070bf8378bf9ead890c/node_modules/@fuel-ts/address/dist/configs.mjs\");\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/types.ts\nvar AbstractProgram = class {\n  static {\n    __name(this, \"AbstractProgram\");\n  }\n};\nvar AbstractContract = class extends AbstractProgram {\n  static {\n    __name(this, \"AbstractContract\");\n  }\n};\n\n// src/utils.ts\n\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_ERROR, message);\n  }\n}\n__name(assert, \"assert\");\nfunction getAbisFromAllCalls(functionScopes) {\n  return functionScopes.reduce((acc, funcScope, i) => {\n    const { program, externalAbis } = funcScope.getCallConfig();\n    if (i === 0) {\n      acc.main = program.interface.jsonAbi;\n      acc.otherContractsAbis = {};\n    } else {\n      acc.otherContractsAbis[program.id.toB256()] = program.interface.jsonAbi;\n    }\n    acc.otherContractsAbis = { ...acc.otherContractsAbis, ...externalAbis };\n    return acc;\n  }, {});\n}\n__name(getAbisFromAllCalls, \"getAbisFromAllCalls\");\nvar getResultLogs = /* @__PURE__ */ __name((receipts, mainCallConfig, functionScopes) => {\n  if (!mainCallConfig) {\n    return [];\n  }\n  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);\n  return (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getDecodedLogs)(receipts, main, otherContractsAbis);\n}, \"getResultLogs\");\nvar getAllResultLogs = /* @__PURE__ */ __name((opts) => {\n  const { receipts, mainCallConfig, functionScopes } = opts;\n  if (!mainCallConfig) {\n    return { logs: [], groupedLogs: {} };\n  }\n  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);\n  return (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getAllDecodedLogs)({ receipts, mainAbi: main, externalAbis: otherContractsAbis });\n}, \"getAllResultLogs\");\n\n// src/functions/invocation-scope.ts\n\n\n\n// src/functions/base-invocation-scope.ts\n\n\n\n\n\n\n\n\n\n// src/contract-call-script.ts\n\n\n\n\n\n\n\n\n// src/instruction-set.ts\n\nvar InstructionSet = class {\n  static {\n    __name(this, \"InstructionSet\");\n  }\n  #operations;\n  constructor(...args) {\n    this.#operations = args || [];\n  }\n  entries() {\n    return this.#operations;\n  }\n  push(...args) {\n    this.#operations.push(...args);\n  }\n  concat(ops) {\n    return this.#operations.concat(ops);\n  }\n  extend(ops) {\n    this.#operations.push(...ops);\n  }\n  toBytes() {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.concat)(\n      this.#operations.reduce((instructions, line) => {\n        instructions.push(line.to_bytes());\n        return instructions;\n      }, [])\n    );\n  }\n  toHex() {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.hexlify)(this.toBytes());\n  }\n  toString() {\n    return `Program:\n${JSON.stringify(this.#operations, null, 2)}`;\n  }\n  byteLength() {\n    return this.toBytes().byteLength;\n  }\n};\n\n// src/script-request.ts\n\n\n\n\n\nvar calculateScriptDataBaseOffset = /* @__PURE__ */ __name((maxInputs) => _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.SCRIPT_FIXED_SIZE + (0,_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.calculateVmTxMemory)({ maxInputs }), \"calculateScriptDataBaseOffset\");\nvar POINTER_DATA_OFFSET = _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.ASSET_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.CONTRACT_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE;\nfunction callResultToScriptResult(callResult) {\n  const receipts = [...callResult.receipts];\n  let scriptResultReceipt;\n  let returnReceipt;\n  receipts.forEach((receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ScriptResult) {\n      scriptResultReceipt = receipt;\n    } else if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Revert) {\n      returnReceipt = receipt;\n    }\n  });\n  if (!scriptResultReceipt || !returnReceipt) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n  const scriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult\n  };\n  return scriptResult;\n}\n__name(callResultToScriptResult, \"callResultToScriptResult\");\nfunction decodeCallResult(callResult, decoder, logs = [], groupedLogs = {}) {\n  try {\n    const scriptResult = callResultToScriptResult(callResult);\n    return decoder(scriptResult);\n  } catch (error) {\n    if (error.code === _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED) {\n      const statusReason = callResult?.dryRunStatus?.reason;\n      throw (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.extractTxError)({\n        logs,\n        groupedLogs,\n        receipts: callResult.receipts,\n        statusReason\n      });\n    }\n    throw error;\n  }\n}\n__name(decodeCallResult, \"decodeCallResult\");\nfunction callResultToInvocationResult(callResult, call2, logs, groupedLogs) {\n  return decodeCallResult(\n    callResult,\n    (scriptResult) => {\n      if (scriptResult.returnReceipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Revert) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED,\n          `Script Reverted. Logs: ${JSON.stringify(logs)}`\n        );\n      }\n      if (scriptResult.returnReceipt.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return && scriptResult.returnReceipt.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData) {\n        const { type } = scriptResult.returnReceipt;\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED,\n          `Script Return Type [${type}] Invalid. Logs: ${JSON.stringify({\n            logs,\n            groupedLogs,\n            receipt: scriptResult.returnReceipt\n          })}`\n        );\n      }\n      let value;\n      if (scriptResult.returnReceipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return) {\n        value = scriptResult.returnReceipt.val;\n      }\n      if (scriptResult.returnReceipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData) {\n        const decoded = call2.func.decodeOutput(scriptResult.returnReceipt.data);\n        value = decoded[0];\n      }\n      return value;\n    },\n    logs\n  );\n}\n__name(callResultToInvocationResult, \"callResultToInvocationResult\");\nvar ScriptRequest = class _ScriptRequest {\n  static {\n    __name(this, \"ScriptRequest\");\n  }\n  /**\n   * The bytes of the script.\n   */\n  bytes;\n  /**\n   * A function to encode the script data.\n   */\n  scriptDataEncoder;\n  /**\n   * A function to decode the script result.\n   */\n  scriptResultDecoder;\n  /**\n   * Creates an instance of the ScriptRequest class.\n   *\n   * @param bytes - The bytes of the script.\n   * @param scriptDataEncoder - The script data encoder function.\n   * @param scriptResultDecoder - The script result decoder function.\n   */\n  constructor(bytes, scriptDataEncoder, scriptResultDecoder2) {\n    this.bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder2;\n  }\n  /**\n   * Gets the script data offset for the given bytes.\n   *\n   * @param byteLength - The byte length of the script.\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  static getScriptDataOffsetWithScriptBytes(byteLength, maxInputs) {\n    const scriptDataBaseOffset = (0,_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.calculateVmTxMemory)({ maxInputs }) + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.SCRIPT_FIXED_SIZE;\n    return scriptDataBaseOffset + byteLength;\n  }\n  /**\n   * Gets the script data offset.\n   *\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  getScriptDataOffset(maxInputs) {\n    return _ScriptRequest.getScriptDataOffsetWithScriptBytes(this.bytes.length, maxInputs);\n  }\n  /**\n   * Encodes the data for a script call.\n   *\n   * @param data - The script data.\n   * @returns The encoded data.\n   */\n  encodeScriptData(data) {\n    const callScript = this.scriptDataEncoder(data);\n    if (ArrayBuffer.isView(callScript)) {\n      return callScript;\n    }\n    this.bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(callScript.script);\n    return callScript.data;\n  }\n  /**\n   * Decodes the result of a script call.\n   *\n   * @param callResult - The CallResult from the script call.\n   * @param logs - Optional logs associated with the decoding.\n   * @returns The decoded result.\n   */\n  decodeCallResult(callResult, logs = []) {\n    return decodeCallResult(callResult, this.scriptResultDecoder, logs);\n  }\n};\n\n// src/contract-call-script.ts\nvar DEFAULT_OPCODE_PARAMS = {\n  assetIdOffset: 0,\n  amountOffset: 0,\n  gasForwardedOffset: 0,\n  callDataOffset: 0\n};\nvar SCRIPT_WRAPPER_CONTRACT_ID = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_8__.ZeroBytes32;\nvar getSingleCallInstructions = /* @__PURE__ */ __name(({\n  callDataOffset,\n  gasForwardedOffset,\n  amountOffset,\n  assetIdOffset\n}) => {\n  const inst = new InstructionSet(\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(16, callDataOffset),\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(17, amountOffset),\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.lw(17, 17, 0),\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(18, assetIdOffset)\n  );\n  if (gasForwardedOffset) {\n    inst.push(\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(19, gasForwardedOffset),\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.lw(19, 19, 0),\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.call(16, 17, 18, 19)\n    );\n  } else {\n    inst.push(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.call(16, 17, 18, _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.RegId.cgas().to_u8()));\n  }\n  return inst;\n}, \"getSingleCallInstructions\");\nfunction getInstructions(offsets) {\n  if (!offsets.length) {\n    return new Uint8Array();\n  }\n  const multiCallInstructions = new InstructionSet();\n  for (let i = 0; i < offsets.length; i += 1) {\n    multiCallInstructions.extend(getSingleCallInstructions(offsets[i]).entries());\n  }\n  multiCallInstructions.push(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.ret(1));\n  return multiCallInstructions.toBytes();\n}\n__name(getInstructions, \"getInstructions\");\nvar isReturnType = /* @__PURE__ */ __name((type) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return || type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData, \"isReturnType\");\nvar getMainCallReceipt = /* @__PURE__ */ __name((receipts, contractId) => receipts.find(\n  ({ type, id, to }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Call && id === SCRIPT_WRAPPER_CONTRACT_ID && to === contractId\n), \"getMainCallReceipt\");\nvar scriptResultDecoder = /* @__PURE__ */ __name((contractId) => (result) => {\n  if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.toNumber)(result.code) !== 0) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n  const mainCallResult = getMainCallReceipt(\n    result.receipts,\n    contractId.toB256()\n  );\n  const mainCallInstructionStart = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(mainCallResult?.is);\n  const receipts = result.receipts;\n  return receipts.filter(({ type }) => isReturnType(type)).flatMap((receipt) => {\n    if (!mainCallInstructionStart.eq((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(receipt.is))) {\n      return [];\n    }\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return) {\n      return [new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(receipt.val)];\n    }\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData) {\n      const encodedScriptReturn = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(receipt.data);\n      return [encodedScriptReturn];\n    }\n    return [new Uint8Array()];\n  });\n}, \"scriptResultDecoder\");\nvar decodeContractCallScriptResult = /* @__PURE__ */ __name((callResult, contractId, logs = [], groupedLogs = {}) => decodeCallResult(callResult, scriptResultDecoder(contractId), logs, groupedLogs), \"decodeContractCallScriptResult\");\nvar getCallInstructionsLength = /* @__PURE__ */ __name((contractCalls) => contractCalls.reduce(\n  (sum, call2) => {\n    const offset = { ...DEFAULT_OPCODE_PARAMS };\n    if (call2.gas) {\n      offset.gasForwardedOffset = 1;\n    }\n    return sum + getSingleCallInstructions(offset).byteLength();\n  },\n  _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.Instruction.size()\n  // placeholder for single RET instruction which is added later\n), \"getCallInstructionsLength\");\nvar getContractCallScript = /* @__PURE__ */ __name((functionScopes, maxInputs) => new ScriptRequest(\n  // Script to call the contract, start with stub size matching length of calls\n  getInstructions(new Array(functionScopes.length).fill(DEFAULT_OPCODE_PARAMS)),\n  (contractCalls) => {\n    const TOTAL_CALLS = contractCalls.length;\n    if (TOTAL_CALLS === 0) {\n      return { data: new Uint8Array(), script: new Uint8Array() };\n    }\n    const callInstructionsLength = getCallInstructionsLength(contractCalls);\n    const paddingLength = (8 - callInstructionsLength % 8) % 8;\n    const paddedInstructionsLength = callInstructionsLength + paddingLength;\n    const dataOffset = calculateScriptDataBaseOffset(maxInputs.toNumber()) + paddedInstructionsLength;\n    const paramOffsets = [];\n    let segmentOffset = dataOffset;\n    const scriptData = [];\n    for (let i = 0; i < TOTAL_CALLS; i += 1) {\n      const call2 = contractCalls[i];\n      const amountOffset = segmentOffset;\n      const assetIdOffset = amountOffset + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE;\n      const callDataOffset = assetIdOffset + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.ASSET_ID_LEN;\n      const encodedSelectorOffset = callDataOffset + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.CONTRACT_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE;\n      const encodedArgsOffset = encodedSelectorOffset + call2.fnSelectorBytes.byteLength;\n      const encodedArgs = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(call2.data);\n      let gasForwardedOffset = 0;\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(call2.amount || 0));\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.B256Coder().encode(call2.assetId?.toString() || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_8__.ZeroBytes32));\n      scriptData.push(call2.contractId.toBytes());\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(encodedSelectorOffset));\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(encodedArgsOffset));\n      scriptData.push(call2.fnSelectorBytes);\n      scriptData.push(encodedArgs);\n      if (call2.gas) {\n        scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(call2.gas));\n        gasForwardedOffset = encodedArgsOffset + encodedArgs.byteLength;\n      }\n      const callParamOffsets = {\n        amountOffset,\n        assetIdOffset,\n        gasForwardedOffset,\n        callDataOffset\n      };\n      paramOffsets.push(callParamOffsets);\n      segmentOffset = dataOffset + (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.concat)(scriptData).byteLength;\n    }\n    const script = getInstructions(paramOffsets);\n    const finalScriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.concat)(scriptData);\n    return { data: finalScriptData, script };\n  },\n  () => [new Uint8Array()]\n), \"getContractCallScript\");\n\n// src/response.ts\n\nvar extractInvocationResult = /* @__PURE__ */ __name((functionScopes, receipts, isMultiCall, logs, groupedLogs = {}) => {\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  if (functionScopes.length === 1 && mainCallConfig && \"bytes\" in mainCallConfig.program) {\n    return callResultToInvocationResult({ receipts }, mainCallConfig, logs, groupedLogs);\n  }\n  const encodedResults = decodeContractCallScriptResult(\n    { receipts },\n    (mainCallConfig?.program).id,\n    logs,\n    groupedLogs\n  );\n  const decodedResults = encodedResults.map((encodedResult, i) => {\n    const { func } = functionScopes[i].getCallConfig();\n    return func.decodeOutput(encodedResult)?.[0];\n  });\n  return isMultiCall ? decodedResults : decodedResults?.[0];\n}, \"extractInvocationResult\");\nvar buildFunctionResult = /* @__PURE__ */ __name(async (params) => {\n  const { funcScope, isMultiCall, program, transactionResponse } = params;\n  const txResult = await transactionResponse.waitForResult();\n  const { receipts } = txResult;\n  const functionScopes = Array.isArray(funcScope) ? funcScope : [funcScope];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  const { logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes });\n  const value = extractInvocationResult(\n    functionScopes,\n    receipts,\n    isMultiCall,\n    logs,\n    groupedLogs\n  );\n  const gasUsed = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getGasUsedFromReceipts)(receipts);\n  const submitResult = {\n    isMultiCall,\n    functionScopes,\n    value,\n    program,\n    transactionResult: txResult,\n    transactionResponse,\n    transactionId: transactionResponse.id,\n    logs,\n    groupedLogs,\n    gasUsed\n  };\n  return submitResult;\n}, \"buildFunctionResult\");\nvar buildPreConfirmationFunctionResult = /* @__PURE__ */ __name(async (params) => {\n  const { funcScope, isMultiCall, program, transactionResponse } = params;\n  const transactionResult = await transactionResponse.waitForPreConfirmation();\n  const { receipts } = transactionResult;\n  const functionScopes = Array.isArray(funcScope) ? funcScope : [funcScope];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  let logs;\n  let groupedLogs;\n  let gasUsed;\n  let value;\n  if (receipts) {\n    ({ logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes }));\n    value = extractInvocationResult(functionScopes, receipts, isMultiCall, logs, groupedLogs);\n    gasUsed = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getGasUsedFromReceipts)(receipts);\n  }\n  const submitResult = {\n    isMultiCall,\n    functionScopes,\n    program,\n    transactionResult,\n    transactionResponse,\n    transactionId: transactionResponse.id,\n    logs,\n    groupedLogs,\n    gasUsed,\n    value\n  };\n  return submitResult;\n}, \"buildPreConfirmationFunctionResult\");\nvar buildDryRunResult = /* @__PURE__ */ __name((params) => {\n  const { funcScopes, callResult, isMultiCall } = params;\n  const { receipts } = callResult;\n  const functionScopes = Array.isArray(funcScopes) ? funcScopes : [funcScopes];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  const { logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes });\n  const value = extractInvocationResult(\n    functionScopes,\n    receipts,\n    isMultiCall,\n    logs,\n    groupedLogs\n  );\n  const gasUsed = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getGasUsedFromReceipts)(receipts);\n  const submitResult = {\n    functionScopes,\n    callResult,\n    isMultiCall,\n    gasUsed,\n    value\n  };\n  return submitResult;\n}, \"buildDryRunResult\");\n\n// src/functions/base-invocation-scope.ts\nfunction createContractCall(funcScope) {\n  const { program, args, forward, func, callParameters, externalAbis } = funcScope.getCallConfig();\n  const data = func.encodeArguments(args);\n  return {\n    contractId: program.id,\n    fnSelectorBytes: func.selectorBytes,\n    data,\n    assetId: forward?.assetId,\n    amount: forward?.amount,\n    gas: callParameters?.gasLimit,\n    externalContractsAbis: externalAbis\n  };\n}\n__name(createContractCall, \"createContractCall\");\nvar BaseInvocationScope = class {\n  static {\n    __name(this, \"BaseInvocationScope\");\n  }\n  transactionRequest;\n  program;\n  functionInvocationScopes = [];\n  txParameters;\n  assembleTxParameters;\n  requiredCoins = [];\n  isMultiCall = false;\n  hasCallParamsGasLimit = false;\n  // flag to check if any of the callParams has gasLimit set\n  externalAbis = {};\n  /**\n   * @deprecated - Should be removed with `addSigners`\n   */\n  addSignersCallback;\n  /**\n   * Constructs an instance of BaseInvocationScope.\n   *\n   * @param program - The abstract program to be invoked.\n   * @param isMultiCall - A flag indicating whether the invocation is a multi-call.\n   */\n  constructor(program, isMultiCall) {\n    this.program = program;\n    this.isMultiCall = isMultiCall;\n    this.transactionRequest = new _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.ScriptTransactionRequest();\n  }\n  /**\n   * Getter for the contract calls.\n   *\n   * @returns An array of contract calls.\n   */\n  get calls() {\n    return this.functionInvocationScopes.map((funcScope) => createContractCall(funcScope));\n  }\n  /**\n   * Updates the script request with the current contract calls.\n   */\n  async updateScriptRequest() {\n    const provider = this.getProvider();\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs }\n      }\n    } = await provider.getChain();\n    const contractCallScript = getContractCallScript(this.functionInvocationScopes, maxInputs);\n    this.transactionRequest.setScript(contractCallScript, this.calls);\n  }\n  /**\n   * Updates the transaction request with the current input/output.\n   */\n  updateContractInputAndOutput() {\n    const calls = this.calls;\n    calls.forEach((c) => {\n      if (c.contractId) {\n        this.transactionRequest.addContractInputAndOutput(c.contractId);\n      }\n      if (c.externalContractsAbis) {\n        Object.keys(c.externalContractsAbis).forEach(\n          (contractId) => this.transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(contractId))\n        );\n      }\n    });\n  }\n  /**\n   * Gets the required coins for the transaction.\n   *\n   * @returns An array of required coin quantities.\n   */\n  getRequiredCoins() {\n    const forwardingAssets = this.calls.map((call2) => ({\n      assetId: String(call2.assetId),\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(call2.amount || 0)\n    })).filter(({ assetId, amount }) => assetId && !(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(amount).isZero());\n    return forwardingAssets;\n  }\n  /**\n   * Updates the required coins for the transaction.\n   */\n  updateRequiredCoins() {\n    const assets = this.getRequiredCoins();\n    const reduceForwardCoins = /* @__PURE__ */ __name((requiredCoins, { assetId, amount }) => {\n      const currentAmount = requiredCoins.get(assetId)?.amount || (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0);\n      return requiredCoins.set(assetId, {\n        assetId: String(assetId),\n        amount: currentAmount.add(amount)\n      });\n    }, \"reduceForwardCoins\");\n    this.requiredCoins = Array.from(\n      assets.reduce(reduceForwardCoins, /* @__PURE__ */ new Map()).values()\n    );\n  }\n  /**\n   * Adds a single call to the invocation scope.\n   *\n   * @param funcScope - The function scope to add.\n   * @returns The current instance of the class.\n   */\n  addCall(funcScope) {\n    this.addCalls([funcScope]);\n    return this;\n  }\n  /**\n   * Adds multiple calls to the invocation scope.\n   *\n   * @param funcScopes - An array of function scopes to add.\n   * @returns The current instance of the class.\n   */\n  addCalls(funcScopes) {\n    this.functionInvocationScopes.push(...funcScopes);\n    this.updateContractInputAndOutput();\n    this.updateRequiredCoins();\n    return this;\n  }\n  /**\n   * Prepares the transaction by updating the script request, required coins, and checking the gas limit.\n   */\n  async prepareTransaction() {\n    await _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.initWasm();\n    await this.updateScriptRequest();\n    this.updateRequiredCoins();\n    this.checkGasLimitTotal();\n    if (this.transactionRequest.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.TransactionType.Script) {\n      this.transactionRequest.abis = getAbisFromAllCalls(this.functionInvocationScopes);\n    }\n  }\n  /**\n   * Checks if the total gas limit is within the acceptable range.\n   */\n  checkGasLimitTotal() {\n    const gasLimitOnCalls = this.calls.reduce((total, call2) => total.add(call2.gas || 0), (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0));\n    if (this.transactionRequest.gasLimit.eq(0)) {\n      this.transactionRequest.gasLimit = gasLimitOnCalls;\n    } else if (gasLimitOnCalls.gt(this.transactionRequest.gasLimit)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_ERROR,\n        \"Transaction's gasLimit must be equal to or greater than the combined forwarded gas of all calls.\"\n      );\n    }\n  }\n  /**\n   * Gets the transaction cost for dry running the transaction.\n   *\n   * @returns The transaction cost details.\n   *\n   * @deprecated Use contract.fundWithRequiredCoins instead\n   * Check the migration guide https://docs.fuel.network/docs/fuels-ts/transactions/assemble-tx-migration-guide/ for more information.\n   */\n  async getTransactionCost() {\n    const request = (0,ramda__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(await this.getTransactionRequest());\n    const account = this.program.account ?? _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.Wallet.generate({ provider: this.getProvider() });\n    return account.getTransactionCost(request, {\n      quantities: this.getRequiredCoins(),\n      signatureCallback: this.addSignersCallback\n    });\n  }\n  /**\n   * Funds the transaction request with the required coins and returns it.\n   *\n   * @returns The transaction request.\n   */\n  async fundWithRequiredCoins() {\n    let request = await this.getTransactionRequest();\n    request = (0,ramda__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(request);\n    let { feePayerAccount, accountCoinQuantities, ...restAssembleTxParams } = this.assembleTxParameters ?? {};\n    request.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0);\n    request.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0);\n    const provider = this.getProvider();\n    const account = this.program.account ?? _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.Wallet.generate({ provider });\n    const baseAssetId = await provider.getBaseAssetId();\n    if (!feePayerAccount) {\n      feePayerAccount = account;\n    }\n    if (!accountCoinQuantities) {\n      const outputQuantities = request.outputs.filter((o) => o.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.OutputType.Coin).map(({ amount, assetId }) => ({ assetId: String(assetId), amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(amount) }));\n      accountCoinQuantities = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.mergeQuantities)(outputQuantities, this.requiredCoins);\n      if (!accountCoinQuantities.length) {\n        accountCoinQuantities.push({ assetId: baseAssetId, amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0) });\n      }\n    }\n    let { assembledRequest, gasPrice } = await provider.assembleTx({\n      request,\n      feePayerAccount,\n      accountCoinQuantities,\n      ...restAssembleTxParams\n    });\n    assembledRequest = assembledRequest;\n    await (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.setAndValidateGasAndFeeForAssembledTx)({\n      gasPrice,\n      provider,\n      transactionRequest: assembledRequest,\n      setGasLimit: this.txParameters?.gasLimit,\n      setMaxFee: this.txParameters?.maxFee\n    });\n    return assembledRequest;\n  }\n  /**\n   * @deprecated - Should be removed with `addSigners`\n   */\n  async legacyFundWithRequiredCoins() {\n    let transactionRequest = await this.getTransactionRequest();\n    transactionRequest = (0,ramda__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(transactionRequest);\n    const txCost = await this.getTransactionCost();\n    const { gasUsed, missingContractIds, outputVariables, maxFee } = txCost;\n    this.setDefaultTxParams(transactionRequest, gasUsed, maxFee);\n    missingContractIds.forEach((contractId) => {\n      transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(contractId));\n    });\n    transactionRequest.addVariableOutputs(outputVariables);\n    await this.program.account?.fund(transactionRequest, txCost);\n    if (this.addSignersCallback) {\n      await this.addSignersCallback(transactionRequest);\n    }\n    return transactionRequest;\n  }\n  /**\n   * Sets the transaction parameters.\n   *\n   * @param txParams - The transaction parameters to set.\n   * @returns The current instance of the class.\n   */\n  txParams(txParams) {\n    this.txParameters = txParams;\n    const request = this.transactionRequest;\n    request.tip = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.tip || request.tip);\n    request.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.gasLimit || request.gasLimit);\n    request.maxFee = txParams.maxFee ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.maxFee) : request.maxFee;\n    request.witnessLimit = txParams.witnessLimit ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.witnessLimit) : request.witnessLimit;\n    request.maturity = txParams.maturity || request.maturity;\n    request.expiration = txParams.expiration || request.expiration;\n    request.addVariableOutputs(this.txParameters?.variableOutputs || 0);\n    return this;\n  }\n  /**\n   * Sets the transaction parameters.\n   *\n   * @param assembleTxParams - The assembleTx parameters to set when invoking the `provider.assembleTx` method.\n   * @returns The current instance of the class.\n   */\n  assembleTxParams(txParams) {\n    this.assembleTxParameters = txParams;\n    return this;\n  }\n  /**\n   * Adds contracts to the invocation scope.\n   *\n   * @param contracts - An array of contracts to add.\n   * @returns The current instance of the class.\n   */\n  addContracts(contracts) {\n    contracts.forEach((contract) => {\n      if (typeof contract === \"string\") {\n        this.transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(contract));\n      } else {\n        this.transactionRequest.addContractInputAndOutput(contract.id);\n        this.externalAbis[contract.id.toB256()] = contract.interface.jsonAbi;\n      }\n    });\n    return this;\n  }\n  /**\n   * Adds an asset transfer to an Account on the contract call transaction request.\n   *\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The current instance of the class.\n   */\n  addTransfer(transferParams) {\n    const { amount, destination, assetId } = transferParams;\n    this.transactionRequest = this.transactionRequest.addCoinOutput(\n      new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(destination),\n      amount,\n      assetId\n    );\n    return this;\n  }\n  /**\n   * Adds multiple transfers to the contract call transaction request.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The current instance of the class.\n   */\n  addBatchTransfer(transferParams) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.transactionRequest = this.transactionRequest.addCoinOutput(\n        new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(destination),\n        amount,\n        assetId\n      );\n    });\n    return this;\n  }\n  /**\n   * Adds signers to the transaction request.\n   *\n   * @param signers - The signers to add.\n   * @returns The current instance of the class.\n   *\n   * @deprecated This method is deprecated and will be removed in a future versions.\n   * All signatures should be manually added to the transaction request witnesses. If your\n   * Sway program relies on in-code signature validation, visit this guide:\n   * https://docs.fuel.network/docs/fuels-ts/cookbook/sway-script-with-signature-validation/\n   */\n  addSigners(signers) {\n    this.addSignersCallback = (transactionRequest) => transactionRequest.addAccountWitnesses(signers);\n    return this;\n  }\n  /**\n   * Prepares and returns the transaction request object.\n   *\n   * @returns The prepared transaction request.\n   */\n  async getTransactionRequest() {\n    await this.prepareTransaction();\n    return this.transactionRequest;\n  }\n  /**\n   * Sets the transaction request. Useful when you have used `getTransactionRequest` or\n   * `fundWithRequiredCoins` from the scope to apply customizations to the transaction request.\n   *\n   * @param request - The transaction request to set.\n   * @returns The current instance of the class.\n   */\n  fromRequest(request) {\n    this.transactionRequest = request;\n    return this;\n  }\n  /**\n   * Submits the contract call transaction and returns a promise that resolves to an object\n   * containing the transaction ID and a function to wait for the result. The promise will resolve\n   * as soon as the transaction is submitted to the node.\n   *\n   * @param params - Optional parameters for the call.\n   * - `skipAssembleTx`: A boolean indicating whether to skip assembling the transaction. This is useful\n   *   when customizations were made to the transaction request using the `assembleTx` method.\n   *\n   * @returns A promise that resolves to an object containing:\n   * - `transactionId`: The ID of the submitted transaction.\n   * - `waitForResult`: A function that waits for the transaction result.\n   * - `waitForPreConfirmation`: A function that waits for the transaction pre-confirmation.\n   * @template T - The type of the return value.\n   */\n  async call(params) {\n    assert(this.program.account, \"Wallet is required!\");\n    let transactionRequest = await this.getTransactionRequest();\n    const skipAssembleTx = params?.skipAssembleTx;\n    if (!skipAssembleTx) {\n      if (this.addSignersCallback) {\n        transactionRequest = await this.legacyFundWithRequiredCoins();\n      } else {\n        transactionRequest = await this.fundWithRequiredCoins();\n      }\n    }\n    const response = await this.program.account.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n    const transactionId = response.id;\n    return {\n      transactionId,\n      waitForResult: /* @__PURE__ */ __name(async () => buildFunctionResult({\n        funcScope: this.functionInvocationScopes,\n        isMultiCall: this.isMultiCall,\n        program: this.program,\n        transactionResponse: response\n      }), \"waitForResult\"),\n      waitForPreConfirmation: /* @__PURE__ */ __name(async () => buildPreConfirmationFunctionResult({\n        funcScope: this.functionInvocationScopes,\n        isMultiCall: this.isMultiCall,\n        program: this.program,\n        transactionResponse: response\n      }), \"waitForPreConfirmation\")\n    };\n  }\n  /**\n   * Simulates a transaction.\n   *\n   * @returns The result of the invocation call.\n   */\n  async simulate() {\n    assert(this.program.account, \"Wallet is required!\");\n    if (!(\"populateTransactionWitnessesSignature\" in this.program.account)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.ABI_MAIN_METHOD_MISSING,\n        \"An unlocked wallet is required to simulate a contract call.\"\n      );\n    }\n    const transactionRequest = await this.fundWithRequiredCoins();\n    const callResult = await this.program.account.simulateTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  /**\n   * Executes a transaction in dry run mode.\n   *\n   * @returns The result of the invocation call.\n   *\n   * @deprecated Use .get instead\n   */\n  async dryRun() {\n    const { receipts } = await this.getTransactionCost();\n    const callResult = {\n      receipts\n    };\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  async get() {\n    let request = await this.getTransactionRequest();\n    request = (0,ramda__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(request);\n    request.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0);\n    request.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0);\n    request.inputs = request.inputs.filter((i) => i.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.InputType.Coin);\n    const provider = this.getProvider();\n    const account = this.program.account ?? _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.Wallet.generate({ provider });\n    const baseAssetId = await provider.getBaseAssetId();\n    const allQuantities = request.outputs.filter((o) => o.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.OutputType.Coin).map(({ amount, assetId }) => ({ assetId: String(assetId), amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(amount) })).concat(this.requiredCoins);\n    const resources = account.generateFakeResources(allQuantities);\n    const utxoForBaseAssetId = resources.find((utxo) => utxo.assetId === baseAssetId);\n    const amountForFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(\"1000000000000000\");\n    if (!utxoForBaseAssetId) {\n      const [baseAssetResource] = account.generateFakeResources([\n        { assetId: baseAssetId, amount: amountForFee }\n      ]);\n      resources.push(baseAssetResource);\n    } else {\n      utxoForBaseAssetId.amount = utxoForBaseAssetId.amount.add(amountForFee);\n    }\n    request.addResources(resources);\n    const { receipts } = await provider.assembleTx({\n      request,\n      feePayerAccount: account\n    });\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult: { receipts },\n      isMultiCall: this.isMultiCall\n    });\n  }\n  getProvider() {\n    const provider = this.program.provider;\n    return provider;\n  }\n  /**\n   * In case the gasLimit is *not* set by the user, this method sets a default value.\n   */\n  setDefaultTxParams(transactionRequest, gasUsed, maxFee) {\n    const gasLimitSpecified = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.txParameters?.gasLimit) || this.hasCallParamsGasLimit;\n    const maxFeeSpecified = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.txParameters?.maxFee);\n    const { gasLimit: setGasLimit, maxFee: setMaxFee } = transactionRequest;\n    if (!gasLimitSpecified) {\n      transactionRequest.gasLimit = gasUsed;\n    } else if (setGasLimit.lt(gasUsed)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n    if (!maxFeeSpecified) {\n      transactionRequest.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n  }\n};\n\n// src/functions/invocation-scope.ts\nvar FunctionInvocationScope = class extends BaseInvocationScope {\n  static {\n    __name(this, \"FunctionInvocationScope\");\n  }\n  func;\n  callParameters;\n  forward;\n  args;\n  /**\n   * Constructs an instance of FunctionInvocationScope.\n   *\n   * @param program - The program.\n   * @param func - The function fragment.\n   * @param args - The arguments.\n   */\n  constructor(program, func, args) {\n    super(program, false);\n    this.func = func;\n    this.args = args || [];\n    this.setArguments(...args);\n    super.addCall(this);\n  }\n  /**\n   * Gets the call configuration.\n   *\n   * @returns The call configuration.\n   */\n  getCallConfig() {\n    return {\n      func: this.func,\n      program: this.program,\n      callParameters: this.callParameters,\n      txParameters: this.txParameters,\n      forward: this.forward,\n      args: this.args,\n      externalAbis: this.externalAbis\n    };\n  }\n  /**\n   * Sets the arguments for the function invocation.\n   *\n   * @param args - The arguments.\n   * @returns The instance of FunctionInvocationScope.\n   */\n  setArguments(...args) {\n    this.args = args || [];\n    return this;\n  }\n  /**\n   * Sets the call parameters for the function invocation.\n   *\n   * @param callParams - The call parameters.\n   * @returns The instance of FunctionInvocationScope.\n   * @throws If the function is not payable and forward is set.\n   */\n  callParams(callParams) {\n    if (!this.hasCallParamsGasLimit && callParams?.gasLimit !== void 0) {\n      this.hasCallParamsGasLimit = true;\n    }\n    this.callParameters = callParams;\n    if (callParams?.forward) {\n      if (!this.func.attributes.find((attr) => attr.name === \"payable\")) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_ERROR,\n          `The target function ${this.func.name} cannot accept forwarded funds as it's not marked as 'payable'.`\n        );\n      }\n      this.forward = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.coinQuantityfy)(callParams.forward);\n    }\n    this.setArguments(...this.args);\n    this.updateRequiredCoins();\n    return this;\n  }\n};\n\n// src/functions/multicall-scope.ts\nvar MultiCallInvocationScope = class extends BaseInvocationScope {\n  static {\n    __name(this, \"MultiCallInvocationScope\");\n  }\n  /**\n   * Constructs an instance of MultiCallInvocationScope.\n   *\n   * @param contract - The contract.\n   * @param funcScopes - An array of function invocation scopes.\n   */\n  constructor(contract, funcScopes) {\n    super(contract, true);\n    this.addCalls(funcScopes);\n  }\n  /**\n   * Adds a single function invocation scope to the multi-call invocation scope.\n   *\n   * @param funcScope - The function invocation scope.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  addCall(funcScope) {\n    return super.addCalls([funcScope]);\n  }\n  /**\n   * Adds multiple function invocation scopes to the multi-call invocation scope.\n   *\n   * @param funcScopes - An array of function invocation scopes.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  addCalls(funcScopes) {\n    return super.addCalls(funcScopes);\n  }\n};\n\n// src/contract.ts\n\n\nvar Contract = class {\n  static {\n    __name(this, \"Contract\");\n  }\n  /**\n   * The unique contract identifier.\n   */\n  id;\n  /**\n   * The provider for interacting with the contract.\n   */\n  provider;\n  /**\n   * The contract's ABI interface.\n   */\n  interface;\n  /**\n   * The account associated with the contract, if available.\n   */\n  account;\n  /**\n   * A collection of functions available on the contract.\n   */\n  functions = {};\n  /**\n   * Creates an instance of the Contract class.\n   *\n   * @param id - The contract's address.\n   * @param abi - The contract's ABI (JSON ABI or Interface instance).\n   * @param accountOrProvider - The account or provider for interaction.\n   */\n  constructor(id, abi, accountOrProvider) {\n    this.interface = abi instanceof _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.Interface ? abi : new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.Interface(abi);\n    this.id = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(id);\n    if (accountOrProvider && \"provider\" in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n    Object.keys(this.interface.functions).forEach((name) => {\n      const fragment = this.interface.getFunction(name);\n      Object.defineProperty(this.functions, fragment.name, {\n        value: this.buildFunction(fragment),\n        writable: false\n      });\n    });\n  }\n  /**\n   * Build a function invocation scope for the provided function fragment.\n   *\n   * @param func - The function fragment to build a scope for.\n   * @returns A function that creates a FunctionInvocationScope.\n   */\n  buildFunction(func) {\n    return (() => {\n      const funcInvocationScopeCreator = /* @__PURE__ */ __name((...args) => new FunctionInvocationScope(this, func, args), \"funcInvocationScopeCreator\");\n      Object.defineProperty(funcInvocationScopeCreator, \"isReadOnly\", {\n        value: /* @__PURE__ */ __name(() => func.isReadOnly(), \"value\"),\n        writable: false\n      });\n      return funcInvocationScopeCreator;\n    })();\n  }\n  /**\n   * Create a multi-call invocation scope for the provided function invocation scopes.\n   *\n   * @param calls - An array of FunctionInvocationScopes to execute in a batch.\n   * @returns A MultiCallInvocationScope instance.\n   */\n  multiCall(calls) {\n    return new MultiCallInvocationScope(this, calls);\n  }\n  /**\n   * Get the balance for a given asset ID for this contract.\n   *\n   * @param assetId - The specified asset ID.\n   * @returns The balance of the contract for the specified asset.\n   */\n  getBalance(assetId) {\n    return this.provider.getContractBalance(this.id, assetId);\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuel-ts+program@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_6e753f1b81b88d2c391508fb79ab08d1/node_modules/@fuel-ts/program/dist/index.mjs\n");

/***/ })

};
;