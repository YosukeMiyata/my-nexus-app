"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cosmjs+proto-signing@0.34.0";
exports.ids = ["vendor-chunks/@cosmjs+proto-signing@0.34.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/decode.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/decode.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeTxRaw = decodeTxRaw;\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\n/**\n * Takes a serialized TxRaw (the bytes stored in Tendermint) and decodes it into something usable.\n */\nfunction decodeTxRaw(tx) {\n    const txRaw = tx_1.TxRaw.decode(tx);\n    return {\n        authInfo: tx_1.AuthInfo.decode(txRaw.authInfoBytes),\n        body: tx_1.TxBody.decode(txRaw.bodyBytes),\n        signatures: txRaw.signatures,\n    };\n}\n//# sourceMappingURL=decode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2RlY29kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsYUFBYSxtQkFBTyxDQUFDLDBJQUFtQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9kZWNvZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZVR4UmF3ID0gZGVjb2RlVHhSYXc7XG5jb25zdCB0eF8xID0gcmVxdWlyZShcImNvc21qcy10eXBlcy9jb3Ntb3MvdHgvdjFiZXRhMS90eFwiKTtcbi8qKlxuICogVGFrZXMgYSBzZXJpYWxpemVkIFR4UmF3ICh0aGUgYnl0ZXMgc3RvcmVkIGluIFRlbmRlcm1pbnQpIGFuZCBkZWNvZGVzIGl0IGludG8gc29tZXRoaW5nIHVzYWJsZS5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlVHhSYXcodHgpIHtcbiAgICBjb25zdCB0eFJhdyA9IHR4XzEuVHhSYXcuZGVjb2RlKHR4KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhdXRoSW5mbzogdHhfMS5BdXRoSW5mby5kZWNvZGUodHhSYXcuYXV0aEluZm9CeXRlcyksXG4gICAgICAgIGJvZHk6IHR4XzEuVHhCb2R5LmRlY29kZSh0eFJhdy5ib2R5Qnl0ZXMpLFxuICAgICAgICBzaWduYXR1cmVzOiB0eFJhdy5zaWduYXR1cmVzLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/decode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DirectSecp256k1HdWallet = void 0;\nexports.extractKdfConfiguration = extractKdfConfiguration;\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js\");\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"(ssr)/./node_modules/.pnpm/@cosmjs+utils@0.34.0/node_modules/@cosmjs/utils/build/index.js\");\nconst signing_1 = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signing.js\");\nconst wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/wallet.js\");\nconst serializationTypeV1 = \"directsecp256k1hdwallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n    algorithm: \"argon2id\",\n    params: {\n        outputLength: 32,\n        opsLimit: 24,\n        memLimitKib: 12 * 1024,\n    },\n};\nfunction isDerivationJson(thing) {\n    if (!(0, utils_1.isNonNullObject)(thing))\n        return false;\n    if (typeof thing.hdPath !== \"string\")\n        return false;\n    if (typeof thing.prefix !== \"string\")\n        return false;\n    return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n    return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root))\n        throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n        case serializationTypeV1:\n            return extractKdfConfigurationV1(root);\n        default:\n            throw new Error(\"Unsupported serialization type\");\n    }\n}\nconst defaultOptions = {\n    bip39Password: \"\",\n    hdPaths: [(0, amino_1.makeCosmoshubPath)(0)],\n    prefix: \"cosmos\",\n};\n/** A wallet for protobuf based signing using SIGN_MODE_DIRECT */\nclass DirectSecp256k1HdWallet {\n    /**\n     * Restores a wallet from the given BIP39 mnemonic.\n     *\n     * @param mnemonic Any valid English mnemonic.\n     * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async fromMnemonic(mnemonic, options = {}) {\n        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n        return new DirectSecp256k1HdWallet(mnemonicChecked, {\n            ...options,\n            seed: seed,\n        });\n    }\n    /**\n     * Generates a new wallet with a BIP39 mnemonic of the given length.\n     *\n     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n     * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async generate(length = 12, options = {}) {\n        const entropyLength = 4 * Math.floor((11 * length) / 33);\n        const entropy = crypto_1.Random.getBytes(entropyLength);\n        const mnemonic = crypto_1.Bip39.encode(entropy);\n        return DirectSecp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    static async deserialize(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        switch (root.type) {\n            case serializationTypeV1:\n                return DirectSecp256k1HdWallet.deserializeTypeV1(serialization, password);\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n     */\n    static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const untypedRoot = root;\n        switch (untypedRoot.type) {\n            case serializationTypeV1: {\n                const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n                const decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n                const { mnemonic, accounts } = decryptedDocument;\n                (0, utils_1.assert)(typeof mnemonic === \"string\");\n                if (!Array.isArray(accounts))\n                    throw new Error(\"Property 'accounts' is not an array\");\n                if (!accounts.every((account) => isDerivationJson(account))) {\n                    throw new Error(\"Account is not in the correct format.\");\n                }\n                const firstPrefix = accounts[0].prefix;\n                if (!accounts.every(({ prefix }) => prefix === firstPrefix)) {\n                    throw new Error(\"Accounts do not all have the same prefix\");\n                }\n                const hdPaths = accounts.map(({ hdPath }) => (0, crypto_1.stringToPath)(hdPath));\n                return DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n                    hdPaths: hdPaths,\n                    prefix: firstPrefix,\n                });\n            }\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    static async deserializeTypeV1(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);\n        return DirectSecp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n    }\n    constructor(mnemonic, options) {\n        const prefix = options.prefix ?? defaultOptions.prefix;\n        const hdPaths = options.hdPaths ?? defaultOptions.hdPaths;\n        this.secret = mnemonic;\n        this.seed = options.seed;\n        this.accounts = hdPaths.map((hdPath) => ({\n            hdPath: hdPath,\n            prefix: prefix,\n        }));\n    }\n    get mnemonic() {\n        return this.secret.toString();\n    }\n    async getAccounts() {\n        const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();\n        return accountsWithPrivkeys.map(({ algo, pubkey, address }) => ({\n            algo: algo,\n            pubkey: pubkey,\n            address: address,\n        }));\n    }\n    async signDirect(signerAddress, signDoc) {\n        const accounts = await this.getAccountsWithPrivkeys();\n        const account = accounts.find(({ address }) => address === signerAddress);\n        if (account === undefined) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const { privkey, pubkey } = account;\n        const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n        const hashedMessage = (0, crypto_1.sha256)(signBytes);\n        const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        const stdSignature = (0, amino_1.encodeSecp256k1Signature)(pubkey, signatureBytes);\n        return {\n            signed: signDoc,\n            signature: stdSignature,\n        };\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    async serialize(password) {\n        const kdfConfiguration = basicPasswordHashingOptions;\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);\n        return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n     * is not the case, the wallet cannot be restored with the original password.\n     */\n    async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n        const dataToEncrypt = {\n            mnemonic: this.mnemonic,\n            accounts: this.accounts.map(({ hdPath, prefix }) => ({\n                hdPath: (0, crypto_1.pathToString)(hdPath),\n                prefix: prefix,\n            })),\n        };\n        const dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n        const encryptionConfiguration = {\n            algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf,\n        };\n        const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n        const out = {\n            type: serializationTypeV1,\n            kdf: kdfConfiguration,\n            encryption: encryptionConfiguration,\n            data: (0, encoding_1.toBase64)(encryptedData),\n        };\n        return JSON.stringify(out);\n    }\n    async getKeyPair(hdPath) {\n        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath);\n        const { pubkey } = await crypto_1.Secp256k1.makeKeypair(privkey);\n        return {\n            privkey: privkey,\n            pubkey: crypto_1.Secp256k1.compressPubkey(pubkey),\n        };\n    }\n    async getAccountsWithPrivkeys() {\n        return Promise.all(this.accounts.map(async ({ hdPath, prefix }) => {\n            const { privkey, pubkey } = await this.getKeyPair(hdPath);\n            const address = (0, encoding_1.toBech32)(prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n            return {\n                algo: \"secp256k1\",\n                privkey: privkey,\n                pubkey: pubkey,\n                address: address,\n            };\n        }));\n    }\n}\nexports.DirectSecp256k1HdWallet = DirectSecp256k1HdWallet;\n//# sourceMappingURL=directsecp256k1hdwallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js\");\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst signing_1 = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signing.js\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n    /**\n     * Creates a DirectSecp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signDirect(address, signDoc) {\n        const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n        if (address !== this.address) {\n            throw new Error(`Address ${address} not found in wallet`);\n        }\n        const hashedMessage = (0, crypto_1.sha256)(signBytes);\n        const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n        return {\n            signed: signDoc,\n            signature: stdSignature,\n        };\n    }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;\n//# sourceMappingURL=directsecp256k1wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2RpcmVjdHNlY3AyNTZrMXdhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsZ0hBQWU7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsbUhBQWdCO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLHlIQUFrQjtBQUM3QyxrQkFBa0IsbUJBQU8sQ0FBQyw4SEFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9kaXJlY3RzZWNwMjU2azF3YWxsZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpcmVjdFNlY3AyNTZrMVdhbGxldCA9IHZvaWQgMDtcbmNvbnN0IGFtaW5vXzEgPSByZXF1aXJlKFwiQGNvc21qcy9hbWlub1wiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBjb3NtanMvY3J5cHRvXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuY29uc3Qgc2lnbmluZ18xID0gcmVxdWlyZShcIi4vc2lnbmluZ1wiKTtcbi8qKlxuICogQSB3YWxsZXQgdGhhdCBob2xkcyBhIHNpbmdsZSBzZWNwMjU2azEga2V5cGFpci5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byB3b3JrIHdpdGggQklQMzkgbW5lbW9uaWNzIGFuZCBtdWx0aXBsZSBhY2NvdW50cywgdXNlIERpcmVjdFNlY3AyNTZrMUhkV2FsbGV0LlxuICovXG5jbGFzcyBEaXJlY3RTZWNwMjU2azFXYWxsZXQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBEaXJlY3RTZWNwMjU2azFXYWxsZXQgZnJvbSB0aGUgZ2l2ZW4gcHJpdmF0ZSBrZXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcml2a2V5IFRoZSBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0gcHJlZml4IFRoZSBiZWNoMzIgYWRkcmVzcyBwcmVmaXggKGh1bWFuIHJlYWRhYmxlIHBhcnQpLiBEZWZhdWx0cyB0byBcImNvc21vc1wiLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tS2V5KHByaXZrZXksIHByZWZpeCA9IFwiY29zbW9zXCIpIHtcbiAgICAgICAgY29uc3QgdW5jb21wcmVzc2VkID0gKGF3YWl0IGNyeXB0b18xLlNlY3AyNTZrMS5tYWtlS2V5cGFpcihwcml2a2V5KSkucHVia2V5O1xuICAgICAgICByZXR1cm4gbmV3IERpcmVjdFNlY3AyNTZrMVdhbGxldChwcml2a2V5LCBjcnlwdG9fMS5TZWNwMjU2azEuY29tcHJlc3NQdWJrZXkodW5jb21wcmVzc2VkKSwgcHJlZml4KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocHJpdmtleSwgcHVia2V5LCBwcmVmaXgpIHtcbiAgICAgICAgdGhpcy5wcml2a2V5ID0gcHJpdmtleTtcbiAgICAgICAgdGhpcy5wdWJrZXkgPSBwdWJrZXk7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIH1cbiAgICBnZXQgYWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuICgwLCBlbmNvZGluZ18xLnRvQmVjaDMyKSh0aGlzLnByZWZpeCwgKDAsIGFtaW5vXzEucmF3U2VjcDI1NmsxUHVia2V5VG9SYXdBZGRyZXNzKSh0aGlzLnB1YmtleSkpO1xuICAgIH1cbiAgICBhc3luYyBnZXRBY2NvdW50cygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhbGdvOiBcInNlY3AyNTZrMVwiLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBwdWJrZXk6IHRoaXMucHVia2V5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgYXN5bmMgc2lnbkRpcmVjdChhZGRyZXNzLCBzaWduRG9jKSB7XG4gICAgICAgIGNvbnN0IHNpZ25CeXRlcyA9ICgwLCBzaWduaW5nXzEubWFrZVNpZ25CeXRlcykoc2lnbkRvYyk7XG4gICAgICAgIGlmIChhZGRyZXNzICE9PSB0aGlzLmFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQWRkcmVzcyAke2FkZHJlc3N9IG5vdCBmb3VuZCBpbiB3YWxsZXRgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNoZWRNZXNzYWdlID0gKDAsIGNyeXB0b18xLnNoYTI1Nikoc2lnbkJ5dGVzKTtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgY3J5cHRvXzEuU2VjcDI1NmsxLmNyZWF0ZVNpZ25hdHVyZShoYXNoZWRNZXNzYWdlLCB0aGlzLnByaXZrZXkpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmVCeXRlcyA9IG5ldyBVaW50OEFycmF5KFsuLi5zaWduYXR1cmUucigzMiksIC4uLnNpZ25hdHVyZS5zKDMyKV0pO1xuICAgICAgICBjb25zdCBzdGRTaWduYXR1cmUgPSAoMCwgYW1pbm9fMS5lbmNvZGVTZWNwMjU2azFTaWduYXR1cmUpKHRoaXMucHVia2V5LCBzaWduYXR1cmVCeXRlcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaWduZWQ6IHNpZ25Eb2MsXG4gICAgICAgICAgICBzaWduYXR1cmU6IHN0ZFNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkRpcmVjdFNlY3AyNTZrMVdhbGxldCA9IERpcmVjdFNlY3AyNTZrMVdhbGxldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdHNlY3AyNTZrMXdhbGxldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/index.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/index.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseCoins = exports.coins = exports.coin = exports.executeKdf = exports.makeSignDoc = exports.makeSignBytes = exports.makeAuthInfoBytes = exports.isOfflineDirectSigner = exports.Registry = exports.isTxBodyEncodeObject = exports.isTsProtoGeneratedType = exports.isPbjsGeneratedType = exports.encodePubkey = exports.decodePubkey = exports.decodeOptionalPubkey = exports.anyToSinglePubkey = exports.makeCosmoshubPath = exports.DirectSecp256k1Wallet = exports.extractKdfConfiguration = exports.DirectSecp256k1HdWallet = exports.decodeTxRaw = void 0;\n// This type happens to be shared between Amino and Direct sign modes\nvar decode_1 = __webpack_require__(/*! ./decode */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/decode.js\");\nObject.defineProperty(exports, \"decodeTxRaw\", ({ enumerable: true, get: function () { return decode_1.decodeTxRaw; } }));\nvar directsecp256k1hdwallet_1 = __webpack_require__(/*! ./directsecp256k1hdwallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js\");\nObject.defineProperty(exports, \"DirectSecp256k1HdWallet\", ({ enumerable: true, get: function () { return directsecp256k1hdwallet_1.DirectSecp256k1HdWallet; } }));\nObject.defineProperty(exports, \"extractKdfConfiguration\", ({ enumerable: true, get: function () { return directsecp256k1hdwallet_1.extractKdfConfiguration; } }));\nvar directsecp256k1wallet_1 = __webpack_require__(/*! ./directsecp256k1wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js\");\nObject.defineProperty(exports, \"DirectSecp256k1Wallet\", ({ enumerable: true, get: function () { return directsecp256k1wallet_1.DirectSecp256k1Wallet; } }));\nvar paths_1 = __webpack_require__(/*! ./paths */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/paths.js\");\nObject.defineProperty(exports, \"makeCosmoshubPath\", ({ enumerable: true, get: function () { return paths_1.makeCosmoshubPath; } }));\nvar pubkey_1 = __webpack_require__(/*! ./pubkey */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/pubkey.js\");\nObject.defineProperty(exports, \"anyToSinglePubkey\", ({ enumerable: true, get: function () { return pubkey_1.anyToSinglePubkey; } }));\nObject.defineProperty(exports, \"decodeOptionalPubkey\", ({ enumerable: true, get: function () { return pubkey_1.decodeOptionalPubkey; } }));\nObject.defineProperty(exports, \"decodePubkey\", ({ enumerable: true, get: function () { return pubkey_1.decodePubkey; } }));\nObject.defineProperty(exports, \"encodePubkey\", ({ enumerable: true, get: function () { return pubkey_1.encodePubkey; } }));\nvar registry_1 = __webpack_require__(/*! ./registry */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/registry.js\");\nObject.defineProperty(exports, \"isPbjsGeneratedType\", ({ enumerable: true, get: function () { return registry_1.isPbjsGeneratedType; } }));\nObject.defineProperty(exports, \"isTsProtoGeneratedType\", ({ enumerable: true, get: function () { return registry_1.isTsProtoGeneratedType; } }));\nObject.defineProperty(exports, \"isTxBodyEncodeObject\", ({ enumerable: true, get: function () { return registry_1.isTxBodyEncodeObject; } }));\nObject.defineProperty(exports, \"Registry\", ({ enumerable: true, get: function () { return registry_1.Registry; } }));\nvar signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signer.js\");\nObject.defineProperty(exports, \"isOfflineDirectSigner\", ({ enumerable: true, get: function () { return signer_1.isOfflineDirectSigner; } }));\nvar signing_1 = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signing.js\");\nObject.defineProperty(exports, \"makeAuthInfoBytes\", ({ enumerable: true, get: function () { return signing_1.makeAuthInfoBytes; } }));\nObject.defineProperty(exports, \"makeSignBytes\", ({ enumerable: true, get: function () { return signing_1.makeSignBytes; } }));\nObject.defineProperty(exports, \"makeSignDoc\", ({ enumerable: true, get: function () { return signing_1.makeSignDoc; } }));\nvar wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/wallet.js\");\nObject.defineProperty(exports, \"executeKdf\", ({ enumerable: true, get: function () { return wallet_1.executeKdf; } }));\nvar amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js\");\nObject.defineProperty(exports, \"coin\", ({ enumerable: true, get: function () { return amino_1.coin; } }));\nObject.defineProperty(exports, \"coins\", ({ enumerable: true, get: function () { return amino_1.coins; } }));\nObject.defineProperty(exports, \"parseCoins\", ({ enumerable: true, get: function () { return amino_1.parseCoins; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLGFBQWEsR0FBRyxZQUFZLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcseUJBQXlCLEdBQUcsNkJBQTZCLEdBQUcsZ0JBQWdCLEdBQUcsNEJBQTRCLEdBQUcsOEJBQThCLEdBQUcsMkJBQTJCLEdBQUcsb0JBQW9CLEdBQUcsb0JBQW9CLEdBQUcsNEJBQTRCLEdBQUcseUJBQXlCLEdBQUcseUJBQXlCLEdBQUcsNkJBQTZCLEdBQUcsK0JBQStCLEdBQUcsK0JBQStCLEdBQUcsbUJBQW1CO0FBQ2hpQjtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw0SEFBVTtBQUNqQywrQ0FBOEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdEgsZ0NBQWdDLG1CQUFPLENBQUMsOEpBQTJCO0FBQ25FLDJEQUEwRCxFQUFFLHFDQUFxQyw2REFBNkQsRUFBQztBQUMvSiwyREFBMEQsRUFBRSxxQ0FBcUMsNkRBQTZELEVBQUM7QUFDL0osOEJBQThCLG1CQUFPLENBQUMsMEpBQXlCO0FBQy9ELHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6SixjQUFjLG1CQUFPLENBQUMsMEhBQVM7QUFDL0IscURBQW9ELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQ2pJLGVBQWUsbUJBQU8sQ0FBQyw0SEFBVTtBQUNqQyxxREFBb0QsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDbEksd0RBQXVELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3hJLGdEQUErQyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUN4SCxnREFBK0MsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDeEgsaUJBQWlCLG1CQUFPLENBQUMsZ0lBQVk7QUFDckMsdURBQXNELEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQ3hJLDBEQUF5RCxFQUFFLHFDQUFxQyw2Q0FBNkMsRUFBQztBQUM5SSx3REFBdUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDMUksNENBQTJDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2xILGVBQWUsbUJBQU8sQ0FBQyw0SEFBVTtBQUNqQyx5REFBd0QsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDMUksZ0JBQWdCLG1CQUFPLENBQUMsOEhBQVc7QUFDbkMscURBQW9ELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ25JLGlEQUFnRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUMzSCwrQ0FBOEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDdkgsZUFBZSxtQkFBTyxDQUFDLDRIQUFVO0FBQ2pDLDhDQUE2QyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNwSCxjQUFjLG1CQUFPLENBQUMsZ0hBQWU7QUFDckMsd0NBQXVDLEVBQUUscUNBQXFDLHdCQUF3QixFQUFDO0FBQ3ZHLHlDQUF3QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUN6Ryw4Q0FBNkMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDbkgiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VDb2lucyA9IGV4cG9ydHMuY29pbnMgPSBleHBvcnRzLmNvaW4gPSBleHBvcnRzLmV4ZWN1dGVLZGYgPSBleHBvcnRzLm1ha2VTaWduRG9jID0gZXhwb3J0cy5tYWtlU2lnbkJ5dGVzID0gZXhwb3J0cy5tYWtlQXV0aEluZm9CeXRlcyA9IGV4cG9ydHMuaXNPZmZsaW5lRGlyZWN0U2lnbmVyID0gZXhwb3J0cy5SZWdpc3RyeSA9IGV4cG9ydHMuaXNUeEJvZHlFbmNvZGVPYmplY3QgPSBleHBvcnRzLmlzVHNQcm90b0dlbmVyYXRlZFR5cGUgPSBleHBvcnRzLmlzUGJqc0dlbmVyYXRlZFR5cGUgPSBleHBvcnRzLmVuY29kZVB1YmtleSA9IGV4cG9ydHMuZGVjb2RlUHVia2V5ID0gZXhwb3J0cy5kZWNvZGVPcHRpb25hbFB1YmtleSA9IGV4cG9ydHMuYW55VG9TaW5nbGVQdWJrZXkgPSBleHBvcnRzLm1ha2VDb3Ntb3NodWJQYXRoID0gZXhwb3J0cy5EaXJlY3RTZWNwMjU2azFXYWxsZXQgPSBleHBvcnRzLmV4dHJhY3RLZGZDb25maWd1cmF0aW9uID0gZXhwb3J0cy5EaXJlY3RTZWNwMjU2azFIZFdhbGxldCA9IGV4cG9ydHMuZGVjb2RlVHhSYXcgPSB2b2lkIDA7XG4vLyBUaGlzIHR5cGUgaGFwcGVucyB0byBiZSBzaGFyZWQgYmV0d2VlbiBBbWlubyBhbmQgRGlyZWN0IHNpZ24gbW9kZXNcbnZhciBkZWNvZGVfMSA9IHJlcXVpcmUoXCIuL2RlY29kZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZVR4UmF3XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMS5kZWNvZGVUeFJhdzsgfSB9KTtcbnZhciBkaXJlY3RzZWNwMjU2azFoZHdhbGxldF8xID0gcmVxdWlyZShcIi4vZGlyZWN0c2VjcDI1NmsxaGR3YWxsZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXJlY3RTZWNwMjU2azFIZFdhbGxldFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlyZWN0c2VjcDI1NmsxaGR3YWxsZXRfMS5EaXJlY3RTZWNwMjU2azFIZFdhbGxldDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4dHJhY3RLZGZDb25maWd1cmF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXJlY3RzZWNwMjU2azFoZHdhbGxldF8xLmV4dHJhY3RLZGZDb25maWd1cmF0aW9uOyB9IH0pO1xudmFyIGRpcmVjdHNlY3AyNTZrMXdhbGxldF8xID0gcmVxdWlyZShcIi4vZGlyZWN0c2VjcDI1Nmsxd2FsbGV0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlyZWN0U2VjcDI1NmsxV2FsbGV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXJlY3RzZWNwMjU2azF3YWxsZXRfMS5EaXJlY3RTZWNwMjU2azFXYWxsZXQ7IH0gfSk7XG52YXIgcGF0aHNfMSA9IHJlcXVpcmUoXCIuL3BhdGhzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFrZUNvc21vc2h1YlBhdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhdGhzXzEubWFrZUNvc21vc2h1YlBhdGg7IH0gfSk7XG52YXIgcHVia2V5XzEgPSByZXF1aXJlKFwiLi9wdWJrZXlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhbnlUb1NpbmdsZVB1YmtleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVia2V5XzEuYW55VG9TaW5nbGVQdWJrZXk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVPcHRpb25hbFB1YmtleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVia2V5XzEuZGVjb2RlT3B0aW9uYWxQdWJrZXk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVQdWJrZXlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHB1YmtleV8xLmRlY29kZVB1YmtleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZVB1YmtleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVia2V5XzEuZW5jb2RlUHVia2V5OyB9IH0pO1xudmFyIHJlZ2lzdHJ5XzEgPSByZXF1aXJlKFwiLi9yZWdpc3RyeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzUGJqc0dlbmVyYXRlZFR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ2lzdHJ5XzEuaXNQYmpzR2VuZXJhdGVkVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVHNQcm90b0dlbmVyYXRlZFR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ2lzdHJ5XzEuaXNUc1Byb3RvR2VuZXJhdGVkVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVHhCb2R5RW5jb2RlT2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZWdpc3RyeV8xLmlzVHhCb2R5RW5jb2RlT2JqZWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVnaXN0cnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ2lzdHJ5XzEuUmVnaXN0cnk7IH0gfSk7XG52YXIgc2lnbmVyXzEgPSByZXF1aXJlKFwiLi9zaWduZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc09mZmxpbmVEaXJlY3RTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNpZ25lcl8xLmlzT2ZmbGluZURpcmVjdFNpZ25lcjsgfSB9KTtcbnZhciBzaWduaW5nXzEgPSByZXF1aXJlKFwiLi9zaWduaW5nXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFrZUF1dGhJbmZvQnl0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNpZ25pbmdfMS5tYWtlQXV0aEluZm9CeXRlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1ha2VTaWduQnl0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNpZ25pbmdfMS5tYWtlU2lnbkJ5dGVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFrZVNpZ25Eb2NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNpZ25pbmdfMS5tYWtlU2lnbkRvYzsgfSB9KTtcbnZhciB3YWxsZXRfMSA9IHJlcXVpcmUoXCIuL3dhbGxldFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4ZWN1dGVLZGZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdhbGxldF8xLmV4ZWN1dGVLZGY7IH0gfSk7XG52YXIgYW1pbm9fMSA9IHJlcXVpcmUoXCJAY29zbWpzL2FtaW5vXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29pblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYW1pbm9fMS5jb2luOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29pbnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFtaW5vXzEuY29pbnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZUNvaW5zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhbWlub18xLnBhcnNlQ29pbnM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/paths.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/paths.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeCosmoshubPath = makeCosmoshubPath;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\n/**\n * The Cosmos Hub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeCosmoshubPath(a) {\n    return [\n        crypto_1.Slip10RawIndex.hardened(44),\n        crypto_1.Slip10RawIndex.hardened(118),\n        crypto_1.Slip10RawIndex.hardened(0),\n        crypto_1.Slip10RawIndex.normal(0),\n        crypto_1.Slip10RawIndex.normal(a),\n    ];\n}\n//# sourceMappingURL=paths.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3BhdGhzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixpQkFBaUIsbUJBQU8sQ0FBQyxtSEFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3BhdGhzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYWtlQ29zbW9zaHViUGF0aCA9IG1ha2VDb3Ntb3NodWJQYXRoO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiQGNvc21qcy9jcnlwdG9cIik7XG4vKipcbiAqIFRoZSBDb3Ntb3MgSHViIGRlcml2YXRpb24gcGF0aCBpbiB0aGUgZm9ybSBgbS80NCcvMTE4Jy8wJy8wL2FgXG4gKiB3aXRoIDAtYmFzZWQgYWNjb3VudCBpbmRleCBgYWAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VDb3Ntb3NodWJQYXRoKGEpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBjcnlwdG9fMS5TbGlwMTBSYXdJbmRleC5oYXJkZW5lZCg0NCksXG4gICAgICAgIGNyeXB0b18xLlNsaXAxMFJhd0luZGV4LmhhcmRlbmVkKDExOCksXG4gICAgICAgIGNyeXB0b18xLlNsaXAxMFJhd0luZGV4LmhhcmRlbmVkKDApLFxuICAgICAgICBjcnlwdG9fMS5TbGlwMTBSYXdJbmRleC5ub3JtYWwoMCksXG4gICAgICAgIGNyeXB0b18xLlNsaXAxMFJhd0luZGV4Lm5vcm1hbChhKSxcbiAgICBdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/paths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/pubkey.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/pubkey.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodePubkey = encodePubkey;\nexports.anyToSinglePubkey = anyToSinglePubkey;\nexports.decodePubkey = decodePubkey;\nexports.decodeOptionalPubkey = decodeOptionalPubkey;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.34.0/node_modules/@cosmjs/amino/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"(ssr)/./node_modules/.pnpm/@cosmjs+math@0.34.0/node_modules/@cosmjs/math/build/index.js\");\nconst keys_1 = __webpack_require__(/*! cosmjs-types/cosmos/crypto/ed25519/keys */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/ed25519/keys.js\");\nconst keys_2 = __webpack_require__(/*! cosmjs-types/cosmos/crypto/multisig/keys */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/multisig/keys.js\");\nconst keys_3 = __webpack_require__(/*! cosmjs-types/cosmos/crypto/secp256k1/keys */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/secp256k1/keys.js\");\nconst any_1 = __webpack_require__(/*! cosmjs-types/google/protobuf/any */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/any.js\");\n/**\n * Takes a pubkey in the Amino JSON object style (type/value wrapper)\n * and convertes it into a protobuf `Any`.\n *\n * This is the reverse operation to `decodePubkey`.\n */\nfunction encodePubkey(pubkey) {\n    if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n        const pubkeyProto = keys_3.PubKey.fromPartial({\n            key: (0, encoding_1.fromBase64)(pubkey.value),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n            value: Uint8Array.from(keys_3.PubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else if ((0, amino_1.isEd25519Pubkey)(pubkey)) {\n        const pubkeyProto = keys_1.PubKey.fromPartial({\n            key: (0, encoding_1.fromBase64)(pubkey.value),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.ed25519.PubKey\",\n            value: Uint8Array.from(keys_1.PubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n        const pubkeyProto = keys_2.LegacyAminoPubKey.fromPartial({\n            threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n            publicKeys: pubkey.value.pubkeys.map(encodePubkey),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n            value: Uint8Array.from(keys_2.LegacyAminoPubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else {\n        throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n    }\n}\n/**\n * Decodes a single pubkey (i.e. not a multisig pubkey) from `Any` into\n * `SinglePubkey`.\n *\n * In most cases you probably want to use `decodePubkey`.\n */\nfunction anyToSinglePubkey(pubkey) {\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\": {\n            const { key } = keys_3.PubKey.decode(pubkey.value);\n            return (0, amino_1.encodeSecp256k1Pubkey)(key);\n        }\n        case \"/cosmos.crypto.ed25519.PubKey\": {\n            const { key } = keys_1.PubKey.decode(pubkey.value);\n            return (0, amino_1.encodeEd25519Pubkey)(key);\n        }\n        default:\n            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n    }\n}\n/**\n * Decodes a pubkey from a protobuf `Any` into `Pubkey`.\n * This supports single pubkeys such as Cosmos ed25519 and secp256k1 keys\n * as well as multisig threshold pubkeys.\n */\nfunction decodePubkey(pubkey) {\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\":\n        case \"/cosmos.crypto.ed25519.PubKey\": {\n            return anyToSinglePubkey(pubkey);\n        }\n        case \"/cosmos.crypto.multisig.LegacyAminoPubKey\": {\n            const { threshold, publicKeys } = keys_2.LegacyAminoPubKey.decode(pubkey.value);\n            const out = {\n                type: \"tendermint/PubKeyMultisigThreshold\",\n                value: {\n                    threshold: threshold.toString(),\n                    pubkeys: publicKeys.map(anyToSinglePubkey),\n                },\n            };\n            return out;\n        }\n        default:\n            throw new Error(`Pubkey type URL '${pubkey.typeUrl}' not recognized`);\n    }\n}\n/**\n * Decodes an optional pubkey from a protobuf `Any` into `Pubkey | null`.\n * This supports single pubkeys such as Cosmos ed25519 and secp256k1 keys\n * as well as multisig threshold pubkeys.\n */\nfunction decodeOptionalPubkey(pubkey) {\n    if (!pubkey)\n        return null;\n    if (pubkey.typeUrl) {\n        if (pubkey.value.length) {\n            // both set\n            return decodePubkey(pubkey);\n        }\n        else {\n            throw new Error(`Pubkey is an Any with type URL '${pubkey.typeUrl}' but an empty value`);\n        }\n    }\n    else {\n        if (pubkey.value.length) {\n            throw new Error(`Pubkey is an Any with an empty type URL but a value set`);\n        }\n        else {\n            // both unset, assuming this empty instance means null\n            return null;\n        }\n    }\n}\n//# sourceMappingURL=pubkey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/pubkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/registry.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/registry.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Registry = void 0;\nexports.isTelescopeGeneratedType = isTelescopeGeneratedType;\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/bank/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/bank/v1beta1/tx.js\");\nconst coin_1 = __webpack_require__(/*! cosmjs-types/cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/base/v1beta1/coin.js\");\nconst tx_2 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\nconst any_1 = __webpack_require__(/*! cosmjs-types/google/protobuf/any */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/any.js\");\nfunction isTelescopeGeneratedType(type) {\n    const casted = type;\n    return typeof casted.fromPartial === \"function\" && typeof casted.typeUrl == \"string\";\n}\nfunction isTsProtoGeneratedType(type) {\n    return typeof type.fromPartial === \"function\";\n}\nfunction isPbjsGeneratedType(type) {\n    return !isTsProtoGeneratedType(type);\n}\nconst defaultTypeUrls = {\n    cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n    cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n    cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n    googleAny: \"/google.protobuf.Any\",\n};\nfunction isTxBodyEncodeObject(encodeObject) {\n    return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\nclass Registry {\n    /**\n     * Creates a new Registry for mapping protobuf type identifiers/type URLs to\n     * actual implementations. Those implementations are typically generated with ts-proto\n     * but we also support protobuf.js as a type generator.\n     *\n     * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`\n     * for historic reasons. Those can be overriden by customTypes.\n     *\n     * There are currently two methods for adding new types:\n     * 1. Passing types to the constructor.\n     * 2. Using the `register()` method\n     */\n    constructor(customTypes) {\n        const { cosmosCoin, cosmosMsgSend } = defaultTypeUrls;\n        this.types = customTypes\n            ? new Map([...customTypes])\n            : new Map([\n                [cosmosCoin, coin_1.Coin],\n                [cosmosMsgSend, tx_1.MsgSend],\n            ]);\n    }\n    register(typeUrl, type) {\n        this.types.set(typeUrl, type);\n    }\n    /**\n     * Looks up a type that was previously added to the registry.\n     *\n     * The generator information (ts-proto or pbjs) gets lost along the way.\n     * If you need to work with the result type in TypeScript, you can use:\n     *\n     * ```\n     * import { assert } from \"@cosmjs/utils\";\n     *\n     * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n     * assert(Coin); // Ensures not unset\n     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n     *\n     * // Coin is typed TsProtoGeneratedType now.\n     * ```\n     */\n    lookupType(typeUrl) {\n        return this.types.get(typeUrl);\n    }\n    lookupTypeWithError(typeUrl) {\n        const type = this.lookupType(typeUrl);\n        if (!type) {\n            throw new Error(`Unregistered type url: ${typeUrl}`);\n        }\n        return type;\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to protobuf if\n     * the given type was previously registered.\n     *\n     * If the value has to be wrapped in an Any, this needs to be done\n     * manually after this call. Or use `encodeAsAny` instead.\n     */\n    encode(encodeObject) {\n        const { value, typeUrl } = encodeObject;\n        if (isTxBodyEncodeObject(encodeObject)) {\n            return this.encodeTxBody(value);\n        }\n        const type = this.lookupTypeWithError(typeUrl);\n        const instance = isTelescopeGeneratedType(type) || isTsProtoGeneratedType(type)\n            ? type.fromPartial(value)\n            : type.create(value);\n        return type.encode(instance).finish();\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to an Any if\n     * the given type was previously registered.\n     */\n    encodeAsAny(encodeObject) {\n        const binaryValue = this.encode(encodeObject);\n        return any_1.Any.fromPartial({\n            typeUrl: encodeObject.typeUrl,\n            value: binaryValue,\n        });\n    }\n    encodeTxBody(txBodyFields) {\n        const wrappedMessages = txBodyFields.messages.map((message) => this.encodeAsAny(message));\n        const txBody = tx_2.TxBody.fromPartial({\n            ...txBodyFields,\n            timeoutHeight: BigInt(txBodyFields.timeoutHeight?.toString() ?? \"0\"),\n            messages: wrappedMessages,\n        });\n        return tx_2.TxBody.encode(txBody).finish();\n    }\n    decode({ typeUrl, value }) {\n        if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n            return this.decodeTxBody(value);\n        }\n        const type = this.lookupTypeWithError(typeUrl);\n        const decoded = type.decode(value);\n        Object.entries(decoded).forEach(([key, val]) => {\n            if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n                decoded[key] = Uint8Array.from(val);\n            }\n        });\n        return decoded;\n    }\n    decodeTxBody(txBody) {\n        const decodedTxBody = tx_2.TxBody.decode(txBody);\n        return {\n            ...decodedTxBody,\n            messages: decodedTxBody.messages.map(({ typeUrl: typeUrl, value }) => {\n                if (!typeUrl) {\n                    throw new Error(\"Missing type_url in Any\");\n                }\n                if (!value) {\n                    throw new Error(\"Missing value in Any\");\n                }\n                return this.decode({ typeUrl, value });\n            }),\n        };\n    }\n}\nexports.Registry = Registry;\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signer.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signer.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isOfflineDirectSigner = isOfflineDirectSigner;\nfunction isOfflineDirectSigner(signer) {\n    return signer.signDirect !== undefined;\n}\n//# sourceMappingURL=signer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3NpZ25lci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9zaWduZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzT2ZmbGluZURpcmVjdFNpZ25lciA9IGlzT2ZmbGluZURpcmVjdFNpZ25lcjtcbmZ1bmN0aW9uIGlzT2ZmbGluZURpcmVjdFNpZ25lcihzaWduZXIpIHtcbiAgICByZXR1cm4gc2lnbmVyLnNpZ25EaXJlY3QgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25lci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signing.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signing.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nexports.makeSignDoc = makeSignDoc;\nexports.makeSignBytes = makeSignBytes;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"(ssr)/./node_modules/.pnpm/@cosmjs+utils@0.34.0/node_modules/@cosmjs/utils/build/index.js\");\nconst signing_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/signing/v1beta1/signing */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/signing/v1beta1/signing.js\");\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n    return signers.map(({ pubkey, sequence }) => ({\n        publicKey: pubkey,\n        modeInfo: {\n            single: { mode: signMode },\n        },\n        sequence: BigInt(sequence),\n    }));\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, feeGranter, feePayer, signMode = signing_1.SignMode.SIGN_MODE_DIRECT) {\n    // Required arguments 4 and 5 were added in CosmJS 0.29. Use runtime checks to help our non-TS users.\n    (0, utils_1.assert)(feeGranter === undefined || typeof feeGranter === \"string\", \"feeGranter must be undefined or string\");\n    (0, utils_1.assert)(feePayer === undefined || typeof feePayer === \"string\", \"feePayer must be undefined or string\");\n    const authInfo = tx_1.AuthInfo.fromPartial({\n        signerInfos: makeSignerInfos(signers, signMode),\n        fee: {\n            amount: [...feeAmount],\n            gasLimit: BigInt(gasLimit),\n            granter: feeGranter,\n            payer: feePayer,\n        },\n    });\n    return tx_1.AuthInfo.encode(authInfo).finish();\n}\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n    return {\n        bodyBytes: bodyBytes,\n        authInfoBytes: authInfoBytes,\n        chainId: chainId,\n        accountNumber: BigInt(accountNumber),\n    };\n}\nfunction makeSignBytes({ accountNumber, authInfoBytes, bodyBytes, chainId }) {\n    const signDoc = tx_1.SignDoc.fromPartial({\n        accountNumber: accountNumber,\n        authInfoBytes: authInfoBytes,\n        bodyBytes: bodyBytes,\n        chainId: chainId,\n    });\n    return tx_1.SignDoc.encode(signDoc).finish();\n}\n//# sourceMappingURL=signing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3NpZ25pbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLG1CQUFtQjtBQUNuQixxQkFBcUI7QUFDckI7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxnSEFBZTtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyxvS0FBZ0Q7QUFDMUUsYUFBYSxtQkFBTyxDQUFDLDBJQUFtQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsa0JBQWtCO0FBQzVDO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrREFBa0Q7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9zaWduaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYWtlQXV0aEluZm9CeXRlcyA9IG1ha2VBdXRoSW5mb0J5dGVzO1xuZXhwb3J0cy5tYWtlU2lnbkRvYyA9IG1ha2VTaWduRG9jO1xuZXhwb3J0cy5tYWtlU2lnbkJ5dGVzID0gbWFrZVNpZ25CeXRlcztcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAY29zbWpzL3V0aWxzXCIpO1xuY29uc3Qgc2lnbmluZ18xID0gcmVxdWlyZShcImNvc21qcy10eXBlcy9jb3Ntb3MvdHgvc2lnbmluZy92MWJldGExL3NpZ25pbmdcIik7XG5jb25zdCB0eF8xID0gcmVxdWlyZShcImNvc21qcy10eXBlcy9jb3Ntb3MvdHgvdjFiZXRhMS90eFwiKTtcbi8qKlxuICogQ3JlYXRlIHNpZ25lciBpbmZvcyBmcm9tIHRoZSBwcm92aWRlZCBzaWduZXJzLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gZG9lcyBub3Qgc3VwcG9ydCBkaWZmZXJlbnQgc2lnbmluZyBtb2RlcyBmb3IgdGhlIGRpZmZlcmVudCBzaWduZXJzLlxuICovXG5mdW5jdGlvbiBtYWtlU2lnbmVySW5mb3Moc2lnbmVycywgc2lnbk1vZGUpIHtcbiAgICByZXR1cm4gc2lnbmVycy5tYXAoKHsgcHVia2V5LCBzZXF1ZW5jZSB9KSA9PiAoe1xuICAgICAgICBwdWJsaWNLZXk6IHB1YmtleSxcbiAgICAgICAgbW9kZUluZm86IHtcbiAgICAgICAgICAgIHNpbmdsZTogeyBtb2RlOiBzaWduTW9kZSB9LFxuICAgICAgICB9LFxuICAgICAgICBzZXF1ZW5jZTogQmlnSW50KHNlcXVlbmNlKSxcbiAgICB9KSk7XG59XG4vKipcbiAqIENyZWF0ZXMgYW5kIHNlcmlhbGl6ZXMgYW4gQXV0aEluZm8gZG9jdW1lbnQuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGRpZmZlcmVudCBzaWduaW5nIG1vZGVzIGZvciB0aGUgZGlmZmVyZW50IHNpZ25lcnMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VBdXRoSW5mb0J5dGVzKHNpZ25lcnMsIGZlZUFtb3VudCwgZ2FzTGltaXQsIGZlZUdyYW50ZXIsIGZlZVBheWVyLCBzaWduTW9kZSA9IHNpZ25pbmdfMS5TaWduTW9kZS5TSUdOX01PREVfRElSRUNUKSB7XG4gICAgLy8gUmVxdWlyZWQgYXJndW1lbnRzIDQgYW5kIDUgd2VyZSBhZGRlZCBpbiBDb3NtSlMgMC4yOS4gVXNlIHJ1bnRpbWUgY2hlY2tzIHRvIGhlbHAgb3VyIG5vbi1UUyB1c2Vycy5cbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZlZUdyYW50ZXIgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgZmVlR3JhbnRlciA9PT0gXCJzdHJpbmdcIiwgXCJmZWVHcmFudGVyIG11c3QgYmUgdW5kZWZpbmVkIG9yIHN0cmluZ1wiKTtcbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZlZVBheWVyID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGZlZVBheWVyID09PSBcInN0cmluZ1wiLCBcImZlZVBheWVyIG11c3QgYmUgdW5kZWZpbmVkIG9yIHN0cmluZ1wiKTtcbiAgICBjb25zdCBhdXRoSW5mbyA9IHR4XzEuQXV0aEluZm8uZnJvbVBhcnRpYWwoe1xuICAgICAgICBzaWduZXJJbmZvczogbWFrZVNpZ25lckluZm9zKHNpZ25lcnMsIHNpZ25Nb2RlKSxcbiAgICAgICAgZmVlOiB7XG4gICAgICAgICAgICBhbW91bnQ6IFsuLi5mZWVBbW91bnRdLFxuICAgICAgICAgICAgZ2FzTGltaXQ6IEJpZ0ludChnYXNMaW1pdCksXG4gICAgICAgICAgICBncmFudGVyOiBmZWVHcmFudGVyLFxuICAgICAgICAgICAgcGF5ZXI6IGZlZVBheWVyLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0eF8xLkF1dGhJbmZvLmVuY29kZShhdXRoSW5mbykuZmluaXNoKCk7XG59XG5mdW5jdGlvbiBtYWtlU2lnbkRvYyhib2R5Qnl0ZXMsIGF1dGhJbmZvQnl0ZXMsIGNoYWluSWQsIGFjY291bnROdW1iZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBib2R5Qnl0ZXM6IGJvZHlCeXRlcyxcbiAgICAgICAgYXV0aEluZm9CeXRlczogYXV0aEluZm9CeXRlcyxcbiAgICAgICAgY2hhaW5JZDogY2hhaW5JZCxcbiAgICAgICAgYWNjb3VudE51bWJlcjogQmlnSW50KGFjY291bnROdW1iZXIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBtYWtlU2lnbkJ5dGVzKHsgYWNjb3VudE51bWJlciwgYXV0aEluZm9CeXRlcywgYm9keUJ5dGVzLCBjaGFpbklkIH0pIHtcbiAgICBjb25zdCBzaWduRG9jID0gdHhfMS5TaWduRG9jLmZyb21QYXJ0aWFsKHtcbiAgICAgICAgYWNjb3VudE51bWJlcjogYWNjb3VudE51bWJlcixcbiAgICAgICAgYXV0aEluZm9CeXRlczogYXV0aEluZm9CeXRlcyxcbiAgICAgICAgYm9keUJ5dGVzOiBib2R5Qnl0ZXMsXG4gICAgICAgIGNoYWluSWQ6IGNoYWluSWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIHR4XzEuU2lnbkRvYy5lbmNvZGUoc2lnbkRvYykuZmluaXNoKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/signing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/wallet.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/wallet.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.supportedAlgorithms = exports.cosmjsSalt = void 0;\nexports.executeKdf = executeKdf;\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.34.0/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.34.0/node_modules/@cosmjs/encoding/build/index.js\");\n/**\n * A fixed salt is chosen to archive a deterministic password to key derivation.\n * This reduces the scope of a potential rainbow attack to all CosmJS users.\n * Must be 16 bytes due to implementation limitations.\n */\nexports.cosmjsSalt = (0, encoding_1.toAscii)(\"The CosmJS salt.\");\nasync function executeKdf(password, configuration) {\n    switch (configuration.algorithm) {\n        case \"argon2id\": {\n            const options = configuration.params;\n            if (!(0, crypto_1.isArgon2idOptions)(options))\n                throw new Error(\"Invalid format of argon2id params\");\n            return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);\n        }\n        default:\n            throw new Error(\"Unsupported KDF algorithm\");\n    }\n}\nexports.supportedAlgorithms = {\n    xchacha20poly1305Ietf: \"xchacha20poly1305-ietf\",\n};\nasync function encrypt(plaintext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);\n            // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api\n            return new Uint8Array([\n                ...nonce,\n                ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce)),\n            ]);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\nasync function decrypt(ciphertext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);\n            return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\n//# sourceMappingURL=wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzQuMC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3dhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyxrQkFBa0I7QUFDaEQsa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZixlQUFlO0FBQ2YsaUJBQWlCLG1CQUFPLENBQUMsbUhBQWdCO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLHlIQUFrQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxpQkFBaUI7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGlCQUFpQjtBQUNuRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b3VzdWtlL015UHJvamVjdC9teS1uZXh1cy1hcHAvbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjM0LjAvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC93YWxsZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN1cHBvcnRlZEFsZ29yaXRobXMgPSBleHBvcnRzLmNvc21qc1NhbHQgPSB2b2lkIDA7XG5leHBvcnRzLmV4ZWN1dGVLZGYgPSBleGVjdXRlS2RmO1xuZXhwb3J0cy5lbmNyeXB0ID0gZW5jcnlwdDtcbmV4cG9ydHMuZGVjcnlwdCA9IGRlY3J5cHQ7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJAY29zbWpzL2NyeXB0b1wiKTtcbmNvbnN0IGVuY29kaW5nXzEgPSByZXF1aXJlKFwiQGNvc21qcy9lbmNvZGluZ1wiKTtcbi8qKlxuICogQSBmaXhlZCBzYWx0IGlzIGNob3NlbiB0byBhcmNoaXZlIGEgZGV0ZXJtaW5pc3RpYyBwYXNzd29yZCB0byBrZXkgZGVyaXZhdGlvbi5cbiAqIFRoaXMgcmVkdWNlcyB0aGUgc2NvcGUgb2YgYSBwb3RlbnRpYWwgcmFpbmJvdyBhdHRhY2sgdG8gYWxsIENvc21KUyB1c2Vycy5cbiAqIE11c3QgYmUgMTYgYnl0ZXMgZHVlIHRvIGltcGxlbWVudGF0aW9uIGxpbWl0YXRpb25zLlxuICovXG5leHBvcnRzLmNvc21qc1NhbHQgPSAoMCwgZW5jb2RpbmdfMS50b0FzY2lpKShcIlRoZSBDb3NtSlMgc2FsdC5cIik7XG5hc3luYyBmdW5jdGlvbiBleGVjdXRlS2RmKHBhc3N3b3JkLCBjb25maWd1cmF0aW9uKSB7XG4gICAgc3dpdGNoIChjb25maWd1cmF0aW9uLmFsZ29yaXRobSkge1xuICAgICAgICBjYXNlIFwiYXJnb24yaWRcIjoge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24ucGFyYW1zO1xuICAgICAgICAgICAgaWYgKCEoMCwgY3J5cHRvXzEuaXNBcmdvbjJpZE9wdGlvbnMpKG9wdGlvbnMpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0IG9mIGFyZ29uMmlkIHBhcmFtc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9fMS5BcmdvbjJpZC5leGVjdXRlKHBhc3N3b3JkLCBleHBvcnRzLmNvc21qc1NhbHQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBLREYgYWxnb3JpdGhtXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMuc3VwcG9ydGVkQWxnb3JpdGhtcyA9IHtcbiAgICB4Y2hhY2hhMjBwb2x5MTMwNUlldGY6IFwieGNoYWNoYTIwcG9seTEzMDUtaWV0ZlwiLFxufTtcbmFzeW5jIGZ1bmN0aW9uIGVuY3J5cHQocGxhaW50ZXh0LCBlbmNyeXB0aW9uS2V5LCBjb25maWcpIHtcbiAgICBzd2l0Y2ggKGNvbmZpZy5hbGdvcml0aG0pIHtcbiAgICAgICAgY2FzZSBleHBvcnRzLnN1cHBvcnRlZEFsZ29yaXRobXMueGNoYWNoYTIwcG9seTEzMDVJZXRmOiB7XG4gICAgICAgICAgICBjb25zdCBub25jZSA9IGNyeXB0b18xLlJhbmRvbS5nZXRCeXRlcyhjcnlwdG9fMS54Y2hhY2hhMjBOb25jZUxlbmd0aCk7XG4gICAgICAgICAgICAvLyBQcmVwZW5kIGZpeGVkLWxlbmd0aCBub25jZSB0byBjaXBoZXJ0ZXh0IGFzIHN1Z2dlc3RlZCBpbiB0aGUgZXhhbXBsZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qZWRpc2N0MS9saWJzb2RpdW0uanMjYXBpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAgICAgICAgIC4uLm5vbmNlLFxuICAgICAgICAgICAgICAgIC4uLihhd2FpdCBjcnlwdG9fMS5YY2hhY2hhMjBwb2x5MTMwNUlldGYuZW5jcnlwdChwbGFpbnRleHQsIGVuY3J5cHRpb25LZXksIG5vbmNlKSksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNyeXB0aW9uIGFsZ29yaXRobTogJyR7Y29uZmlnLmFsZ29yaXRobX0nYCk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZGVjcnlwdChjaXBoZXJ0ZXh0LCBlbmNyeXB0aW9uS2V5LCBjb25maWcpIHtcbiAgICBzd2l0Y2ggKGNvbmZpZy5hbGdvcml0aG0pIHtcbiAgICAgICAgY2FzZSBleHBvcnRzLnN1cHBvcnRlZEFsZ29yaXRobXMueGNoYWNoYTIwcG9seTEzMDVJZXRmOiB7XG4gICAgICAgICAgICBjb25zdCBub25jZSA9IGNpcGhlcnRleHQuc2xpY2UoMCwgY3J5cHRvXzEueGNoYWNoYTIwTm9uY2VMZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGNyeXB0b18xLlhjaGFjaGEyMHBvbHkxMzA1SWV0Zi5kZWNyeXB0KGNpcGhlcnRleHQuc2xpY2UoY3J5cHRvXzEueGNoYWNoYTIwTm9uY2VMZW5ndGgpLCBlbmNyeXB0aW9uS2V5LCBub25jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jcnlwdGlvbiBhbGdvcml0aG06ICcke2NvbmZpZy5hbGdvcml0aG19J2ApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhbGxldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.34.0/node_modules/@cosmjs/proto-signing/build/wallet.js\n");

/***/ })

};
;