"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d";
exports.ids = ["vendor-chunks/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d/node_modules/@fuel-ts/abi-coder/dist/index.mjs":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d/node_modules/@fuel-ts/abi-coder/dist/index.mjs ***!
  \****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASSET_ID_LEN: () => (/* binding */ ASSET_ID_LEN),\n/* harmony export */   ArrayCoder: () => (/* binding */ ArrayCoder),\n/* harmony export */   B256Coder: () => (/* binding */ B256Coder),\n/* harmony export */   B512Coder: () => (/* binding */ B512Coder),\n/* harmony export */   BYTES_32: () => (/* binding */ BYTES_32),\n/* harmony export */   BigNumberCoder: () => (/* binding */ BigNumberCoder),\n/* harmony export */   BooleanCoder: () => (/* binding */ BooleanCoder),\n/* harmony export */   ByteCoder: () => (/* binding */ ByteCoder),\n/* harmony export */   CONTRACT_ID_LEN: () => (/* binding */ CONTRACT_ID_LEN),\n/* harmony export */   Coder: () => (/* binding */ Coder),\n/* harmony export */   ENCODING_V1: () => (/* binding */ ENCODING_V1),\n/* harmony export */   EnumCoder: () => (/* binding */ EnumCoder),\n/* harmony export */   INPUT_COIN_FIXED_SIZE: () => (/* binding */ INPUT_COIN_FIXED_SIZE),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   NumberCoder: () => (/* binding */ NumberCoder),\n/* harmony export */   OptionCoder: () => (/* binding */ OptionCoder),\n/* harmony export */   RawSliceCoder: () => (/* binding */ RawSliceCoder),\n/* harmony export */   SCRIPT_FIXED_SIZE: () => (/* binding */ SCRIPT_FIXED_SIZE),\n/* harmony export */   StdStringCoder: () => (/* binding */ StdStringCoder),\n/* harmony export */   StrSliceCoder: () => (/* binding */ StrSliceCoder),\n/* harmony export */   StringCoder: () => (/* binding */ StringCoder),\n/* harmony export */   StructCoder: () => (/* binding */ StructCoder),\n/* harmony export */   TupleCoder: () => (/* binding */ TupleCoder),\n/* harmony export */   UTXO_ID_LEN: () => (/* binding */ UTXO_ID_LEN),\n/* harmony export */   VecCoder: () => (/* binding */ VecCoder),\n/* harmony export */   WORD_SIZE: () => (/* binding */ WORD_SIZE),\n/* harmony export */   calculateVmTxMemory: () => (/* binding */ calculateVmTxMemory),\n/* harmony export */   decodeScriptData: () => (/* binding */ decodeScriptData)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+errors@0.101.1/node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+utils@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1_j_f5ff000e110be614030afd6e0fd99f41/node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+math@0.101.1/node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+crypto@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__2af6281b4693138068177942c72da7d9/node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/.pnpm/@fuel-ts+hasher@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6.1__3de5373ec566d2f8672f34c376d1b1fa/node_modules/@fuel-ts/hasher/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/encoding/coders/AbstractCoder.ts\nvar Coder = class {\n  static {\n    __name(this, \"Coder\");\n  }\n  name;\n  type;\n  encodedLength;\n  constructor(name, type, encodedLength) {\n    this.name = name;\n    this.type = type;\n    this.encodedLength = encodedLength;\n  }\n};\n\n// src/encoding/coders/ArrayCoder.ts\n\n\n\n// src/utils/constants.ts\nvar U8_CODER_TYPE = \"u8\";\nvar U16_CODER_TYPE = \"u16\";\nvar U32_CODER_TYPE = \"u32\";\nvar U64_CODER_TYPE = \"u64\";\nvar U256_CODER_TYPE = \"u256\";\nvar RAW_PTR_CODER_TYPE = \"raw untyped ptr\";\nvar RAW_SLICE_CODER_TYPE = \"raw untyped slice\";\nvar BOOL_CODER_TYPE = \"bool\";\nvar B256_CODER_TYPE = \"b256\";\nvar B512_CODER_TYPE = \"struct std::b512::B512\";\nvar OPTION_CODER_TYPE = \"enum std::option::Option\";\nvar VEC_CODER_TYPE = \"struct std::vec::Vec\";\nvar BYTES_CODER_TYPE = \"struct std::bytes::Bytes\";\nvar STD_STRING_CODER_TYPE = \"struct std::string::String\";\nvar STR_SLICE_CODER_TYPE = \"str\";\nvar VOID_TYPE = \"()\";\nvar optionRegEx = /^enum (std::option::)?Option$/m;\nvar stringRegEx = /^str\\[(?<length>[0-9]+)\\]/;\nvar arrayRegEx = /^\\[(?<item>[\\w\\s\\\\[\\]]+);\\s*(?<length>[0-9]+)\\]/;\nvar structRegEx = /^struct.+/;\nvar enumRegEx = /^enum.+$/;\nvar tupleRegEx = /^\\((?<items>.*)\\)$/;\nvar genericRegEx = /^generic.+$/;\nvar fullNameRegExMatch = /([^\\s]+)$/m;\nvar ENCODING_V1 = \"1\";\nvar WORD_SIZE = 8;\nvar BYTES_32 = 32;\nvar UTXO_ID_LEN = BYTES_32 + 2;\nvar ASSET_ID_LEN = BYTES_32;\nvar CONTRACT_ID_LEN = BYTES_32;\nvar ADDRESS_LEN = BYTES_32;\nvar NONCE_LEN = BYTES_32;\nvar TX_LEN = WORD_SIZE * 4;\nvar TX_POINTER_LEN = WORD_SIZE * 2;\nvar MAX_BYTES = 2 ** 32 - 1;\nvar calculateVmTxMemory = /* @__PURE__ */ __name(({ maxInputs }) => BYTES_32 + // Tx ID\nASSET_ID_LEN + // Base asset ID\n// Asset ID/Balance coin input pairs\nmaxInputs * (ASSET_ID_LEN + WORD_SIZE) + WORD_SIZE, \"calculateVmTxMemory\");\nvar SCRIPT_FIXED_SIZE = WORD_SIZE + // Identifier\nWORD_SIZE + // Gas limit\nWORD_SIZE + // Script size\nWORD_SIZE + // Script data size\nWORD_SIZE + // Policies\nWORD_SIZE + // Inputs size\nWORD_SIZE + // Outputs size\nWORD_SIZE + // Witnesses size\nBYTES_32;\nvar INPUT_COIN_FIXED_SIZE = WORD_SIZE + // Identifier\nTX_LEN + // Utxo Length\nWORD_SIZE + // Output Index\nADDRESS_LEN + // Owner\nWORD_SIZE + // Amount\nASSET_ID_LEN + // Asset id\nTX_POINTER_LEN + // TxPointer\nWORD_SIZE + // Witnesses index\nWORD_SIZE + // Predicate size\nWORD_SIZE + // Predicate data size\nWORD_SIZE;\nvar INPUT_MESSAGE_FIXED_SIZE = WORD_SIZE + // Identifier\nADDRESS_LEN + // Sender\nADDRESS_LEN + // Recipient\nWORD_SIZE + // Amount\nNONCE_LEN + // Nonce\nWORD_SIZE + // witness_index\nWORD_SIZE + // Data size\nWORD_SIZE + // Predicate size\nWORD_SIZE + // Predicate data size\nWORD_SIZE;\n\n// src/utils/utilities.ts\nvar isUint8Array = /* @__PURE__ */ __name((value) => value instanceof Uint8Array, \"isUint8Array\");\nvar hasNestedOption = /* @__PURE__ */ __name((coders) => {\n  const array = Array.isArray(coders) ? coders : Object.values(coders);\n  for (const node of array) {\n    if (node.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n    if (\"coder\" in node && node.coder.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n    if (\"coders\" in node) {\n      const child = hasNestedOption(node.coders);\n      if (child) {\n        return true;\n      }\n    }\n  }\n  return false;\n}, \"hasNestedOption\");\n\n// src/encoding/coders/ArrayCoder.ts\nvar ArrayCoder = class extends Coder {\n  static {\n    __name(this, \"ArrayCoder\");\n  }\n  coder;\n  length;\n  #hasNestedOption;\n  constructor(coder, length) {\n    super(\"array\", `[${coder.type}; ${length}]`, length * coder.encodedLength);\n    this.coder = coder;\n    this.length = length;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n  encode(value) {\n    if (!Array.isArray(value)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n    if (this.length !== value.length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concat)(Array.from(value).map((v) => this.coder.encode(v)));\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid array data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = Array(this.length).fill(0).map(() => {\n      let decoded;\n      [decoded, newOffset] = this.coder.decode(data, newOffset);\n      return decoded;\n    });\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/B256Coder.ts\n\n\n\nvar B256Coder = class extends Coder {\n  static {\n    __name(this, \"B256Coder\");\n  }\n  constructor() {\n    super(\"b256\", \"b256\", WORD_SIZE * 4);\n  }\n  encode(value) {\n    let encodedValue;\n    try {\n      encodedValue = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(value);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b256 data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    const decoded = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(32);\n    }\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b256 byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toHex)(bytes, 32), offset + 32];\n  }\n};\n\n// src/encoding/coders/B512Coder.ts\n\n\n\nvar B512Coder = class extends Coder {\n  static {\n    __name(this, \"B512Coder\");\n  }\n  constructor() {\n    super(\"b512\", \"struct B512\", WORD_SIZE * 8);\n  }\n  encode(value) {\n    let encodedValue;\n    try {\n      encodedValue = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(value);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b512 data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    const decoded = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(64);\n    }\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b512 byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toHex)(bytes, this.encodedLength), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/BigNumberCoder.ts\n\n\nvar encodedLengths = {\n  u64: WORD_SIZE,\n  u256: WORD_SIZE * 4\n};\nvar BigNumberCoder = class extends Coder {\n  static {\n    __name(this, \"BigNumberCoder\");\n  }\n  constructor(baseType) {\n    super(\"bigNumber\", baseType, encodedLengths[baseType]);\n  }\n  encode(value) {\n    let bytes;\n    if (typeof value === \"number\" && value > Number.MAX_SAFE_INTEGER) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR,\n        `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`\n      );\n    }\n    try {\n      bytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value, this.encodedLength);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return bytes;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid ${this.type} data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    bytes = bytes.slice(0, this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid ${this.type} byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/BooleanCoder.ts\n\n\nvar BooleanCoder = class extends Coder {\n  static {\n    __name(this, \"BooleanCoder\");\n  }\n  options;\n  constructor(options = {\n    padToWordSize: false\n  }) {\n    const encodedLength = options.padToWordSize ? WORD_SIZE : 1;\n    super(\"boolean\", \"boolean\", encodedLength);\n    this.options = options;\n  }\n  encode(value) {\n    const isTrueBool = value === true || value === false;\n    if (!isTrueBool) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid boolean value.`);\n    }\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value ? 1 : 0, this.encodedLength);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid boolean data size.`);\n    }\n    const bytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(data.slice(offset, offset + this.encodedLength));\n    if (bytes.isZero()) {\n      return [false, offset + this.encodedLength];\n    }\n    if (!bytes.eq((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(1))) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid boolean value.`);\n    }\n    return [true, offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/ByteCoder.ts\n\n\nvar ByteCoder = class extends Coder {\n  static {\n    __name(this, \"ByteCoder\");\n  }\n  static memorySize = 1;\n  constructor() {\n    super(\"struct\", \"struct Bytes\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(bytes.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < WORD_SIZE) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid byte data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid bytes byte data size.`);\n    }\n    return [dataBytes, offsetAndLength + length];\n  }\n};\n\n// src/encoding/coders/EnumCoder.ts\n\n\n\nvar EnumCoder = class extends Coder {\n  static {\n    __name(this, \"EnumCoder\");\n  }\n  name;\n  coders;\n  #caseIndexCoder;\n  #encodedValueSize;\n  #shouldValidateLength;\n  constructor(name, coders) {\n    const caseIndexCoder = new BigNumberCoder(\"u64\");\n    const encodedValueSize = Object.values(coders).reduce(\n      (min, coder) => Math.min(min, coder.encodedLength),\n      0\n    );\n    super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);\n    this.name = name;\n    this.coders = coders;\n    this.#caseIndexCoder = caseIndexCoder;\n    this.#encodedValueSize = encodedValueSize;\n    this.#shouldValidateLength = !(optionRegEx.test(this.type) || hasNestedOption(coders));\n  }\n  // Checks that we're handling a native enum that is of type void.\n  #isNativeEnum(coder) {\n    return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;\n  }\n  #encodeNativeEnum(value) {\n    const valueCoder = this.coders[value];\n    const encodedValue = valueCoder.encode([]);\n    const caseIndex = Object.keys(this.coders).indexOf(value);\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concat)([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n  encode(value) {\n    if (typeof value === \"string\" && this.coders[value]) {\n      return this.#encodeNativeEnum(value);\n    }\n    const [caseKey, ...empty] = Object.keys(value);\n    if (!caseKey) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE, \"A field for the case must be provided.\");\n    }\n    if (empty.length !== 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE, \"Only one field must be provided.\");\n    }\n    const valueCoder = this.coders[caseKey];\n    const caseIndex = Object.keys(this.coders).indexOf(caseKey);\n    if (caseIndex === -1) {\n      const validCases = Object.keys(this.coders).map((v) => `'${v}'`).join(\", \");\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid case '${caseKey}'. Valid cases: ${validCases}.`\n      );\n    }\n    const encodedValue = valueCoder.encode(value[caseKey]);\n    return new Uint8Array([...this.#caseIndexCoder.encode(caseIndex), ...encodedValue]);\n  }\n  #decodeNativeEnum(caseKey, newOffset) {\n    return [caseKey, newOffset];\n  }\n  decode(data, offset) {\n    if (this.#shouldValidateLength && data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n    const caseBytes = new BigNumberCoder(\"u64\").decode(data, offset)[0];\n    const caseIndex = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toNumber)(caseBytes);\n    const caseKey = Object.keys(this.coders)[caseIndex];\n    if (!caseKey) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid caseIndex \"${caseIndex}\". Valid cases: ${Object.keys(this.coders)}.`\n      );\n    }\n    const valueCoder = this.coders[caseKey];\n    const offsetAndCase = offset + this.#caseIndexCoder.encodedLength;\n    if (this.#shouldValidateLength && data.length < offsetAndCase + valueCoder.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n    const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);\n    if (this.#isNativeEnum(this.coders[caseKey])) {\n      return this.#decodeNativeEnum(caseKey, newOffset);\n    }\n    return [{ [caseKey]: decoded }, newOffset];\n  }\n};\n\n// src/encoding/coders/NumberCoder.ts\n\n\nvar getLength = /* @__PURE__ */ __name((baseType) => {\n  switch (baseType) {\n    case \"u8\":\n      return 1;\n    case \"u16\":\n      return 2;\n    case \"u32\":\n      return 4;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);\n  }\n}, \"getLength\");\nvar NumberCoder = class extends Coder {\n  static {\n    __name(this, \"NumberCoder\");\n  }\n  baseType;\n  options;\n  constructor(baseType, options = {\n    padToWordSize: false\n  }) {\n    const length = options.padToWordSize ? WORD_SIZE : getLength(baseType);\n    super(\"number\", baseType, length);\n    this.baseType = baseType;\n    this.options = options;\n  }\n  encode(value) {\n    let bytes;\n    try {\n      bytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}.`);\n    }\n    if (bytes.length > this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);\n    }\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(bytes, this.encodedLength);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid number data size.`);\n    }\n    const bytes = data.slice(offset, offset + this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid number byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toNumber)(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/OptionCoder.ts\nvar OptionCoder = class extends EnumCoder {\n  static {\n    __name(this, \"OptionCoder\");\n  }\n  encode(value) {\n    const result = super.encode(this.toSwayOption(value));\n    return result;\n  }\n  toSwayOption(input) {\n    if (input !== void 0) {\n      return { Some: input };\n    }\n    return { None: [] };\n  }\n  decode(data, offset) {\n    const [decoded, newOffset] = super.decode(data, offset);\n    return [this.toOption(decoded), newOffset];\n  }\n  toOption(output) {\n    if (output && \"Some\" in output) {\n      return output.Some;\n    }\n    return void 0;\n  }\n};\n\n// src/encoding/coders/RawSliceCoder.ts\n\n\nvar RawSliceCoder = class extends Coder {\n  static {\n    __name(this, \"RawSliceCoder\");\n  }\n  constructor() {\n    super(\"raw untyped slice\", \"raw untyped slice\", WORD_SIZE);\n  }\n  encode(value) {\n    if (!Array.isArray(value)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n    const internalCoder = new ArrayCoder(new NumberCoder(\"u8\"), value.length);\n    const bytes = internalCoder.encode(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(bytes.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid raw slice data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid raw slice byte data size.`);\n    }\n    const internalCoder = new ArrayCoder(new NumberCoder(\"u8\"), length);\n    const [decodedValue] = internalCoder.decode(dataBytes, 0);\n    return [decodedValue, offsetAndLength + length];\n  }\n};\n\n// src/encoding/coders/StdStringCoder.ts\n\n\n\nvar StdStringCoder = class extends Coder {\n  static {\n    __name(this, \"StdStringCoder\");\n  }\n  static memorySize = 1;\n  constructor() {\n    super(\"struct\", \"struct String\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(value.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid std string data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid std string byte data size.`);\n    }\n    return [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(dataBytes), offsetAndLength + length];\n  }\n};\n\n// src/encoding/coders/StrSliceCoder.ts\n\n\n\nvar StrSliceCoder = class extends Coder {\n  static {\n    __name(this, \"StrSliceCoder\");\n  }\n  static memorySize = 1;\n  constructor() {\n    super(\"strSlice\", \"str\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(value.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string slice data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const bytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (bytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string slice byte data size.`);\n    }\n    return [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(bytes), offsetAndLength + length];\n  }\n};\n\n// src/encoding/coders/StringCoder.ts\n\n\nvar StringCoder = class extends Coder {\n  static {\n    __name(this, \"StringCoder\");\n  }\n  constructor(length) {\n    super(\"string\", `str[${length}]`, length);\n  }\n  encode(value) {\n    if (value.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Value length mismatch during encode.`);\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string data size.`);\n    }\n    const bytes = data.slice(offset, offset + this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string byte data size.`);\n    }\n    return [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/StructCoder.ts\n\n\nvar StructCoder = class extends Coder {\n  static {\n    __name(this, \"StructCoder\");\n  }\n  name;\n  coders;\n  #hasNestedOption;\n  constructor(name, coders) {\n    const encodedLength = Object.values(coders).reduce(\n      (acc, coder) => acc + coder.encodedLength,\n      0\n    );\n    super(\"struct\", `struct ${name}`, encodedLength);\n    this.name = name;\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n  encode(value) {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(\n      Object.keys(this.coders).map((fieldName) => {\n        const fieldCoder = this.coders[fieldName];\n        const fieldValue = value[fieldName];\n        if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR,\n            `Invalid ${this.type}. Field \"${fieldName}\" not present.`\n          );\n        }\n        return fieldCoder.encode(fieldValue);\n      })\n    );\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid struct data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      let decoded;\n      [decoded, newOffset] = fieldCoder.decode(data, newOffset);\n      obj[fieldName] = decoded;\n      return obj;\n    }, {});\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/TupleCoder.ts\n\n\nvar TupleCoder = class extends Coder {\n  static {\n    __name(this, \"TupleCoder\");\n  }\n  coders;\n  #hasNestedOption;\n  constructor(coders) {\n    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);\n    super(\"tuple\", `(${coders.map((coder) => coder.type).join(\", \")})`, encodedLength);\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n  encode(value) {\n    if (this.coders.length !== value.length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(this.coders.map((coder, i) => coder.encode(value[i])));\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid tuple data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = this.coders.map((coder) => {\n      let decoded;\n      [decoded, newOffset] = coder.decode(data, newOffset);\n      return decoded;\n    });\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/VecCoder.ts\n\n\n\nvar VecCoder = class extends Coder {\n  static {\n    __name(this, \"VecCoder\");\n  }\n  coder;\n  #hasNestedOption;\n  constructor(coder) {\n    super(\"struct\", `struct Vec`, WORD_SIZE);\n    this.coder = coder;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n  encode(value) {\n    if (!Array.isArray(value) && !isUint8Array(value)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR,\n        `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`\n      );\n    }\n    const lengthCoder = new BigNumberCoder(\"u64\");\n    if (isUint8Array(value)) {\n      return new Uint8Array([...lengthCoder.encode(value.length), ...value]);\n    }\n    const bytes = value.map((v) => this.coder.encode(v));\n    const lengthBytes = lengthCoder.encode(value.length);\n    return new Uint8Array([...lengthBytes, ...(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(bytes)]);\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid vec data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataLength = length * this.coder.encodedLength;\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);\n    if (!this.#hasNestedOption && dataBytes.length !== dataLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid vec byte data size.`);\n    }\n    let newOffset = offsetAndLength;\n    const chunks = [];\n    for (let i = 0; i < length; i++) {\n      const [decoded, optionOffset] = this.coder.decode(data, newOffset);\n      chunks.push(decoded);\n      newOffset = optionOffset;\n    }\n    return [chunks, newOffset];\n  }\n};\n\n// src/Interface.ts\n\n\n\n// src/ResolvedAbiType.ts\n\n\n// src/utils/json-abi.ts\n\nvar getEncodingVersion = /* @__PURE__ */ __name((encoding) => {\n  switch (encoding) {\n    case void 0:\n    case ENCODING_V1:\n      return ENCODING_V1;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version '${encoding}' is unsupported.`\n      );\n  }\n}, \"getEncodingVersion\");\nvar findTypeById = /* @__PURE__ */ __name((abi, typeId) => {\n  const type = abi.types.find((t) => t.typeId === typeId);\n  if (!type) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.TYPE_NOT_FOUND,\n      `Type with typeId '${typeId}' doesn't exist in the ABI.`\n    );\n  }\n  return type;\n}, \"findTypeById\");\nvar findNonVoidInputs = /* @__PURE__ */ __name((abi, inputs) => inputs.filter((input) => findTypeById(abi, input.type).type !== VOID_TYPE), \"findNonVoidInputs\");\nvar findVectorBufferArgument = /* @__PURE__ */ __name((components) => {\n  const bufferComponent = components.find((c) => c.name === \"buf\");\n  const bufferTypeArgument = bufferComponent?.originalTypeArguments?.[0];\n  if (!bufferComponent || !bufferTypeArgument) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_COMPONENT,\n      `The Vec type provided is missing or has a malformed 'buf' component.`\n    );\n  }\n  return bufferTypeArgument;\n}, \"findVectorBufferArgument\");\n\n// src/ResolvedAbiType.ts\nvar ResolvedAbiType = class _ResolvedAbiType {\n  static {\n    __name(this, \"ResolvedAbiType\");\n  }\n  abi;\n  name;\n  type;\n  originalTypeArguments;\n  components;\n  constructor(abi, argument) {\n    this.abi = abi;\n    this.name = argument.name;\n    const jsonABIType = findTypeById(abi, argument.type);\n    if (jsonABIType.type.length > 256) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_COMPONENT,\n        `The provided ABI type is too long: ${jsonABIType.type}.`\n      );\n    }\n    this.type = jsonABIType.type;\n    this.originalTypeArguments = argument.typeArguments;\n    this.components = _ResolvedAbiType.getResolvedGenericComponents(\n      abi,\n      argument,\n      jsonABIType.components,\n      jsonABIType.typeParameters ?? _ResolvedAbiType.getImplicitGenericTypeParameters(abi, jsonABIType.components)\n    );\n  }\n  static getResolvedGenericComponents(abi, arg, components, typeParameters) {\n    if (components === null) {\n      return null;\n    }\n    if (typeParameters === null || typeParameters.length === 0) {\n      return components.map((c) => new _ResolvedAbiType(abi, c));\n    }\n    const typeParametersAndArgsMap = typeParameters.reduce(\n      (obj, typeParameter, typeParameterIndex) => {\n        const o = { ...obj };\n        o[typeParameter] = structuredClone(\n          arg.typeArguments?.[typeParameterIndex]\n        );\n        return o;\n      },\n      {}\n    );\n    const resolvedComponents = this.resolveGenericArgTypes(\n      abi,\n      components,\n      typeParametersAndArgsMap\n    );\n    return resolvedComponents.map((c) => new _ResolvedAbiType(abi, c));\n  }\n  static resolveGenericArgTypes(abi, args, typeParametersAndArgsMap) {\n    return args.map((arg) => {\n      if (typeParametersAndArgsMap[arg.type] !== void 0) {\n        return {\n          ...typeParametersAndArgsMap[arg.type],\n          name: arg.name\n        };\n      }\n      if (arg.typeArguments) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: this.resolveGenericArgTypes(\n            abi,\n            arg.typeArguments,\n            typeParametersAndArgsMap\n          )\n        };\n      }\n      const argType = findTypeById(abi, arg.type);\n      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);\n      if (implicitTypeParameters && implicitTypeParameters.length > 0) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp])\n        };\n      }\n      return arg;\n    });\n  }\n  static getImplicitGenericTypeParameters(abi, args, implicitGenericParametersParam) {\n    if (!Array.isArray(args)) {\n      return null;\n    }\n    const implicitGenericParameters = implicitGenericParametersParam ?? [];\n    args.forEach((a) => {\n      const argType = findTypeById(abi, a.type);\n      if (genericRegEx.test(argType.type)) {\n        implicitGenericParameters.push(argType.typeId);\n        return;\n      }\n      if (!Array.isArray(a.typeArguments)) {\n        return;\n      }\n      this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);\n    });\n    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;\n  }\n  getSignature() {\n    const prefix = this.getArgSignaturePrefix();\n    const content = this.getArgSignatureContent();\n    return `${prefix}${content}`;\n  }\n  getArgSignaturePrefix() {\n    const structMatch = structRegEx.test(this.type);\n    if (structMatch) {\n      return \"s\";\n    }\n    const arrayMatch = arrayRegEx.test(this.type);\n    if (arrayMatch) {\n      return \"a\";\n    }\n    const enumMatch = enumRegEx.test(this.type);\n    if (enumMatch) {\n      return \"e\";\n    }\n    return \"\";\n  }\n  getArgSignatureContent() {\n    if (this.type === \"raw untyped ptr\") {\n      return \"rawptr\";\n    }\n    if (this.type === \"raw untyped slice\") {\n      return \"rawslice\";\n    }\n    const strMatch = stringRegEx.exec(this.type)?.groups;\n    if (strMatch) {\n      return `str[${strMatch.length}]`;\n    }\n    if (this.components === null) {\n      return this.type;\n    }\n    const arrayMatch = arrayRegEx.exec(this.type)?.groups;\n    if (arrayMatch) {\n      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;\n    }\n    const typeArgumentsSignature = this.originalTypeArguments !== null ? `<${this.originalTypeArguments.map((a) => new _ResolvedAbiType(this.abi, a).getSignature()).join(\",\")}>` : \"\";\n    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(\",\")})`;\n    return `${typeArgumentsSignature}${componentsSignature}`;\n  }\n};\n\n// src/encoding/strategies/getCoderForEncoding.ts\n\n\n// src/encoding/strategies/getCoderV1.ts\n\n\n// src/encoding/coders/VoidCoder.ts\nvar VoidCoder = class extends Coder {\n  static {\n    __name(this, \"VoidCoder\");\n  }\n  constructor() {\n    super(\"void\", VOID_TYPE, 0);\n  }\n  encode(_value) {\n    return new Uint8Array([]);\n  }\n  decode(_data, offset) {\n    return [void 0, offset];\n  }\n};\n\n// src/encoding/strategies/getCoders.ts\nfunction getCoders(components, options) {\n  const { getCoder: getCoder2 } = options;\n  return components.reduce((obj, component) => {\n    const o = obj;\n    o[component.name] = getCoder2(component, options);\n    return o;\n  }, {});\n}\n__name(getCoders, \"getCoders\");\n\n// src/encoding/strategies/getCoderV1.ts\nvar getCoder = /* @__PURE__ */ __name((resolvedAbiType, _options) => {\n  switch (resolvedAbiType.type) {\n    case U8_CODER_TYPE:\n    case U16_CODER_TYPE:\n    case U32_CODER_TYPE:\n      return new NumberCoder(resolvedAbiType.type);\n    case U64_CODER_TYPE:\n    case RAW_PTR_CODER_TYPE:\n      return new BigNumberCoder(\"u64\");\n    case U256_CODER_TYPE:\n      return new BigNumberCoder(\"u256\");\n    case RAW_SLICE_CODER_TYPE:\n      return new RawSliceCoder();\n    case BOOL_CODER_TYPE:\n      return new BooleanCoder();\n    case B256_CODER_TYPE:\n      return new B256Coder();\n    case B512_CODER_TYPE:\n      return new B512Coder();\n    case BYTES_CODER_TYPE:\n      return new ByteCoder();\n    case STD_STRING_CODER_TYPE:\n      return new StdStringCoder();\n    case STR_SLICE_CODER_TYPE:\n      return new StrSliceCoder();\n    case VOID_TYPE:\n      return new VoidCoder();\n    default:\n      break;\n  }\n  const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;\n  if (stringMatch) {\n    const length = parseInt(stringMatch.length, 10);\n    return new StringCoder(length);\n  }\n  const components = resolvedAbiType.components;\n  const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;\n  if (arrayMatch) {\n    const length = parseInt(arrayMatch.length, 10);\n    const arg = components[0];\n    if (!arg) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_COMPONENT,\n        `The provided Array type is missing an item of 'component'.`\n      );\n    }\n    const arrayElementCoder = getCoder(arg);\n    return new ArrayCoder(arrayElementCoder, length);\n  }\n  if (resolvedAbiType.type === VEC_CODER_TYPE) {\n    const arg = findVectorBufferArgument(components);\n    const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);\n    const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });\n    return new VecCoder(itemCoder);\n  }\n  const coderName = resolvedAbiType.type.match(fullNameRegExMatch)?.[0];\n  const structMatch = structRegEx.test(resolvedAbiType.type);\n  if (structMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    return new StructCoder(coderName, coders);\n  }\n  const enumMatch = enumRegEx.test(resolvedAbiType.type);\n  if (enumMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;\n    if (isOptionEnum) {\n      return new OptionCoder(coderName, coders);\n    }\n    return new EnumCoder(coderName, coders);\n  }\n  const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;\n  if (tupleMatch) {\n    const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));\n    return new TupleCoder(coders);\n  }\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n    _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CODER_NOT_FOUND,\n    `Coder not found: ${JSON.stringify(resolvedAbiType)}.`\n  );\n}, \"getCoder\");\n\n// src/encoding/strategies/getCoderForEncoding.ts\nfunction getCoderForEncoding(encoding = ENCODING_V1) {\n  switch (encoding) {\n    case ENCODING_V1:\n      return getCoder;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version ${encoding} is unsupported.`\n      );\n  }\n}\n__name(getCoderForEncoding, \"getCoderForEncoding\");\n\n// src/AbiCoder.ts\nvar AbiCoder = class {\n  static {\n    __name(this, \"AbiCoder\");\n  }\n  static getCoder(abi, argument, options = {\n    padToWordSize: false\n  }) {\n    const resolvedAbiType = new ResolvedAbiType(abi, argument);\n    return getCoderForEncoding(options.encoding)(resolvedAbiType, options);\n  }\n  static encode(abi, argument, value, options) {\n    return this.getCoder(abi, argument, options).encode(value);\n  }\n  static decode(abi, argument, data, offset, options) {\n    return this.getCoder(abi, argument, options).decode(data, offset);\n  }\n};\n\n// src/FunctionFragment.ts\n\n\n\n\n\n\n// src/utils/getFunctionInputs.ts\nvar getFunctionInputs = /* @__PURE__ */ __name((params) => {\n  const { jsonAbi, inputs } = params;\n  let isMandatory = false;\n  return inputs.reduceRight((result, input) => {\n    const type = findTypeById(jsonAbi, input.type);\n    isMandatory = isMandatory || type.type !== VOID_TYPE && !optionRegEx.test(type.type);\n    return [{ ...input, isOptional: !isMandatory }, ...result];\n  }, []);\n}, \"getFunctionInputs\");\n\n// src/utils/padValuesWithUndefined.ts\nvar padValuesWithUndefined = /* @__PURE__ */ __name((values, inputs) => {\n  if (values.length >= inputs.length) {\n    return values;\n  }\n  const paddedValues = values.slice();\n  paddedValues.length = inputs.length;\n  paddedValues.fill(void 0, values.length);\n  return paddedValues;\n}, \"padValuesWithUndefined\");\n\n// src/FunctionFragment.ts\nvar FunctionFragment = class _FunctionFragment {\n  static {\n    __name(this, \"FunctionFragment\");\n  }\n  signature;\n  selector;\n  selectorBytes;\n  encoding;\n  name;\n  jsonFn;\n  attributes;\n  jsonAbiOld;\n  jsonFnOld;\n  constructor(jsonAbi, fn) {\n    this.jsonFn = fn;\n    this.jsonAbiOld = jsonAbi;\n    this.jsonFnOld = jsonAbi.functions.find((f) => f.name === fn.name);\n    this.name = fn.name;\n    this.signature = _FunctionFragment.getSignature(this.jsonAbiOld, this.jsonFnOld);\n    this.selector = _FunctionFragment.getFunctionSelector(this.signature);\n    this.selectorBytes = new StdStringCoder().encode(this.name);\n    this.encoding = getEncodingVersion(jsonAbi.encoding);\n    this.attributes = this.jsonFn.attributes ?? [];\n  }\n  static getSignature(abi, fn) {\n    const inputsSignatures = fn.inputs.map(\n      (input) => new ResolvedAbiType(abi, input).getSignature()\n    );\n    return `${fn.name}(${inputsSignatures.join(\",\")})`;\n  }\n  static getFunctionSelector(functionSignature) {\n    const hashedFunctionSignature = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.sha256)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_3__.bufferFromString)(functionSignature, \"utf-8\"));\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(hashedFunctionSignature.slice(0, 10)).toHex(8);\n  }\n  encodeArguments(values) {\n    const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });\n    const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;\n    if (values.length < mandatoryInputLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ABI_TYPES_AND_VALUES_MISMATCH,\n        `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values.length}`\n      );\n    }\n    const coders = this.jsonFnOld.inputs.map(\n      (t) => AbiCoder.getCoder(this.jsonAbiOld, t, {\n        encoding: this.encoding\n      })\n    );\n    const argumentValues = padValuesWithUndefined(values, this.jsonFn.inputs);\n    return new TupleCoder(coders).encode(argumentValues);\n  }\n  decodeArguments(data) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data);\n    const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);\n    if (nonVoidInputs.length === 0) {\n      if (bytes.length === 0) {\n        return void 0;\n      }\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR,\n        `Types/values length mismatch during decode. ${JSON.stringify({\n          count: {\n            types: this.jsonFn.inputs.length,\n            nonVoidInputs: nonVoidInputs.length,\n            values: bytes.length\n          },\n          value: {\n            args: this.jsonFn.inputs,\n            nonVoidInputs,\n            values: bytes\n          }\n        })}`\n      );\n    }\n    const result = this.jsonFnOld.inputs.reduce(\n      (obj, input) => {\n        const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });\n        const [decodedValue, decodedOffset] = coder.decode(bytes, obj.offset);\n        return {\n          decoded: [...obj.decoded, decodedValue],\n          offset: decodedOffset\n        };\n      },\n      { decoded: [], offset: 0 }\n    );\n    return result.decoded;\n  }\n  decodeOutput(data) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data);\n    const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {\n      encoding: this.encoding\n    });\n    return coder.decode(bytes, 0);\n  }\n  /**\n   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.\n   *\n   * @returns True if the function is read-only or pure, false otherwise.\n   */\n  isReadOnly() {\n    const storageAttribute = this.attributes.find((attr) => attr.name === \"storage\");\n    return !storageAttribute?.arguments?.includes(\"write\");\n  }\n};\n\n// src/utils/transpile-abi.ts\nvar findTypeByConcreteId = /* @__PURE__ */ __name((types, id) => types.find((x) => x.concreteTypeId === id), \"findTypeByConcreteId\");\nvar findConcreteTypeById = /* @__PURE__ */ __name((abi, id) => abi.concreteTypes.find((x) => x.concreteTypeId === id), \"findConcreteTypeById\");\nfunction finsertTypeIdByConcreteTypeId(abi, types, id) {\n  const concreteType = findConcreteTypeById(abi, id);\n  if (concreteType.metadataTypeId !== void 0) {\n    return concreteType.metadataTypeId;\n  }\n  const type = findTypeByConcreteId(types, id);\n  if (type) {\n    return type.typeId;\n  }\n  types.push({\n    typeId: types.length,\n    type: concreteType.type,\n    components: parseComponents(concreteType.components),\n    concreteTypeId: id,\n    typeParameters: concreteType.typeParameters ?? null,\n    originalConcreteTypeId: concreteType?.concreteTypeId\n  });\n  return types.length - 1;\n}\n__name(finsertTypeIdByConcreteTypeId, \"finsertTypeIdByConcreteTypeId\");\nfunction parseFunctionTypeArguments(abi, types, concreteType) {\n  return concreteType.typeArguments?.map((cTypeId) => {\n    const self = findConcreteTypeById(abi, cTypeId);\n    const type = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi, types, cTypeId);\n    return {\n      name: \"\",\n      type,\n      // originalTypeId: cTypeId,\n      typeArguments: parseFunctionTypeArguments(abi, types, self)\n    };\n  }) ?? null;\n}\n__name(parseFunctionTypeArguments, \"parseFunctionTypeArguments\");\nfunction parseConcreteType(abi, types, concreteTypeId, name) {\n  const type = finsertTypeIdByConcreteTypeId(abi, types, concreteTypeId);\n  const concrete = findConcreteTypeById(abi, concreteTypeId);\n  return {\n    name: name ?? \"\",\n    type,\n    // concreteTypeId,\n    typeArguments: parseFunctionTypeArguments(abi, types, concrete)\n  };\n}\n__name(parseConcreteType, \"parseConcreteType\");\nfunction parseComponents(abi, types, components) {\n  return components?.map((component) => {\n    const { typeId, name, typeArguments } = component;\n    const type = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi, types, typeId);\n    return {\n      name,\n      type,\n      // originalTypeId: typeId,\n      typeArguments: parseComponents(abi, types, typeArguments)\n    };\n  }) ?? null;\n}\n__name(parseComponents, \"parseComponents\");\nfunction transpileAbi(abi) {\n  if (!abi.specVersion) {\n    return abi;\n  }\n  const types = [];\n  abi.metadataTypes.forEach((m) => {\n    const t = {\n      typeId: m.metadataTypeId,\n      type: m.type,\n      components: m.components ?? (m.type === \"()\" ? [] : null),\n      typeParameters: m.typeParameters ?? null\n    };\n    types.push(t);\n  });\n  types.forEach((t) => {\n    t.components = parseComponents(abi, types, t.components);\n  });\n  const functions = abi.functions.map((fn) => {\n    const inputs = fn.inputs.map(\n      ({ concreteTypeId, name }) => parseConcreteType(abi, types, concreteTypeId, name)\n    );\n    const output = parseConcreteType(abi, types, fn.output, \"\");\n    return { ...fn, inputs, output };\n  });\n  const configurables = abi.configurables.map((conf) => ({\n    name: conf.name,\n    configurableType: parseConcreteType(abi, types, conf.concreteTypeId),\n    offset: conf.offset\n  }));\n  const loggedTypes = abi.loggedTypes.map((log) => ({\n    logId: log.logId,\n    loggedType: parseConcreteType(abi, types, log.concreteTypeId)\n  }));\n  const transpiled = {\n    encoding: abi.encodingVersion,\n    types,\n    functions,\n    loggedTypes,\n    messagesTypes: abi.messagesTypes,\n    configurables\n  };\n  return transpiled;\n}\n__name(transpileAbi, \"transpileAbi\");\n\n// src/Interface.ts\nvar Interface = class {\n  static {\n    __name(this, \"Interface\");\n  }\n  functions;\n  configurables;\n  jsonAbi;\n  encoding;\n  jsonAbiOld;\n  constructor(jsonAbi) {\n    this.jsonAbi = jsonAbi;\n    this.encoding = getEncodingVersion(jsonAbi.encodingVersion);\n    this.jsonAbiOld = transpileAbi(jsonAbi);\n    this.functions = Object.fromEntries(\n      this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])\n    );\n    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));\n  }\n  /**\n   * Returns function fragment for a dynamic input.\n   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment\n   */\n  getFunction(nameOrSignatureOrSelector) {\n    const fn = Object.values(this.functions).find(\n      (f) => f.name === nameOrSignatureOrSelector || f.signature === nameOrSignatureOrSelector || f.selector === nameOrSignatureOrSelector\n    );\n    if (fn !== void 0) {\n      return fn;\n    }\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.FUNCTION_NOT_FOUND,\n      `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`\n    );\n  }\n  // Decode the result of a function call\n  decodeFunctionResult(functionFragment, data) {\n    const fragment = typeof functionFragment === \"string\" ? this.getFunction(functionFragment) : functionFragment;\n    return fragment.decodeOutput(data);\n  }\n  decodeLog(data, logId) {\n    const loggedType = this.jsonAbiOld.loggedTypes.find((type) => type.logId === logId);\n    if (!loggedType) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.LOG_TYPE_NOT_FOUND,\n        `Log type with logId '${logId}' doesn't exist in the ABI.`\n      );\n    }\n    return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data), 0, {\n      encoding: this.encoding\n    });\n  }\n  encodeConfigurable(name, value) {\n    const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);\n    if (!configurable) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n        `A configurable with the '${name}' was not found in the ABI.`\n      );\n    }\n    return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {\n      encoding: this.encoding\n    });\n  }\n  encodeType(concreteTypeId, value) {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      \"\"\n    );\n    return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {\n      encoding: this.encoding\n    });\n  }\n  decodeType(concreteTypeId, data) {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      \"\"\n    );\n    return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });\n  }\n};\n\n// src/utils/scriptData.ts\nvar decodeScriptData = /* @__PURE__ */ __name((scriptData, abi) => {\n  const [amount, amountOffset] = new BigNumberCoder(\"u64\").decode(scriptData, 0);\n  const [assetId, assetIdOffset] = new B256Coder().decode(scriptData, amountOffset);\n  const [contractId, contractIdOffset] = new B256Coder().decode(scriptData, assetIdOffset);\n  const [functionSelector, functionSelectorOffset] = new StdStringCoder().decode(\n    scriptData,\n    contractIdOffset + WORD_SIZE + WORD_SIZE\n  );\n  const functionArgsBytes = scriptData.slice(functionSelectorOffset);\n  const functionArgs = abi ? new Interface(abi).getFunction(functionSelector).decodeArguments(functionArgsBytes) : void 0;\n  return {\n    amount,\n    assetId,\n    contractId,\n    functionSelector,\n    functionArgs\n  };\n}, \"decodeScriptData\");\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fuel-ts+abi-coder@0.101.1_vitest@3.2.4_@types+debug@4.1.12_@types+node@24.7.2_jiti@2.6_6403986254e63357a3dfff475209c93d/node_modules/@fuel-ts/abi-coder/dist/index.mjs\n");

/***/ })

};
;