"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@metamask+sdk-analytics@0.0.5";
exports.ids = ["vendor-chunks/@metamask+sdk-analytics@0.0.5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  analytics: () => analytics\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/analytics.ts\nvar import_openapi_fetch = __toESM(__webpack_require__(/*! openapi-fetch */ \"(ssr)/./node_modules/.pnpm/openapi-fetch@0.13.8/node_modules/openapi-fetch/dist/cjs/index.cjs\"));\n\n// src/sender.ts\nvar Sender = class {\n  constructor(options) {\n    this.batch = [];\n    this.maxTimeoutMs = 3e4;\n    this.timeoutId = null;\n    this.isSending = false;\n    this.batchSize = options.batchSize;\n    this.baseTimeoutMs = options.baseTimeoutMs;\n    this.currentTimeoutMs = options.baseTimeoutMs;\n    this.sendFn = options.sendFn;\n  }\n  enqueue(item) {\n    this.batch.push(item);\n    this.schedule();\n  }\n  schedule() {\n    if (this.batch.length > 0 && !this.timeoutId) {\n      this.timeoutId = setTimeout(() => {\n        this.timeoutId = null;\n        this.flush();\n      }, this.currentTimeoutMs);\n    }\n  }\n  async flush() {\n    if (this.isSending || this.batch.length === 0) {\n      return;\n    }\n    this.isSending = true;\n    const current = [...this.batch.slice(0, this.batchSize)];\n    this.batch = this.batch.slice(this.batchSize);\n    try {\n      await this.sendFn(current);\n      this.currentTimeoutMs = this.baseTimeoutMs;\n    } catch (error) {\n      console.error(\"Sender: Failed to send batch\", error);\n      this.batch = [...current, ...this.batch];\n      this.currentTimeoutMs = Math.min(\n        this.currentTimeoutMs * 2,\n        this.maxTimeoutMs\n      );\n    } finally {\n      this.isSending = false;\n      this.schedule();\n    }\n  }\n};\nvar sender_default = Sender;\n\n// src/analytics.ts\nvar Analytics = class {\n  constructor(baseUrl) {\n    this.enabled = false;\n    this.properties = {};\n    const client2 = (0, import_openapi_fetch.default)({ baseUrl });\n    const sendFn = async (batch) => {\n      const res = await client2.POST(\"/v1/events\", { body: batch });\n      if (res.response.status !== 200) {\n        throw new Error(res.error);\n      }\n    };\n    this.sender = new sender_default({ batchSize: 100, baseTimeoutMs: 200, sendFn });\n  }\n  enable() {\n    this.enabled = true;\n  }\n  setGlobalProperty(key, value) {\n    this.properties[key] = value;\n  }\n  track(name, properties) {\n    if (!this.enabled) {\n      return;\n    }\n    const event = {\n      name,\n      ...this.properties,\n      ...properties\n    };\n    this.sender.enqueue(event);\n  }\n};\nvar analytics_default = Analytics;\n\n// src/index.ts\nvar endpoint;\nvar _a;\nif (typeof process !== \"undefined\" && process.env) {\n  endpoint = (_a = process.env.METAMASK_ANALYTICS_ENDPOINT) != null ? _a : process.env.NEXT_PUBLIC_METAMASK_ANALYTICS_ENDPOINT;\n}\nvar METAMASK_ANALYTICS_ENDPOINT = endpoint != null ? endpoint : \"https://mm-sdk-analytics.api.cx.metamask.io/\";\nvar client = new analytics_default(METAMASK_ANALYTICS_ENDPOINT);\nvar analytics = client;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1ldGFtYXNrK3Nkay1hbmFseXRpY3NAMC4wLjUvbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zZGstYW5hbHl0aWNzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsbUNBQW1DLG1CQUFPLENBQUMsb0hBQWU7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFNBQVM7QUFDakU7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw0Q0FBNEM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTCIsInNvdXJjZXMiOlsiL1VzZXJzL3lvdXN1a2UvTXlQcm9qZWN0L215LW5leHVzLWFwcC9ub2RlX21vZHVsZXMvLnBucG0vQG1ldGFtYXNrK3Nkay1hbmFseXRpY3NAMC4wLjUvbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zZGstYW5hbHl0aWNzL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIGFuYWx5dGljczogKCkgPT4gYW5hbHl0aWNzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvYW5hbHl0aWNzLnRzXG52YXIgaW1wb3J0X29wZW5hcGlfZmV0Y2ggPSBfX3RvRVNNKHJlcXVpcmUoXCJvcGVuYXBpLWZldGNoXCIpKTtcblxuLy8gc3JjL3NlbmRlci50c1xudmFyIFNlbmRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuYmF0Y2ggPSBbXTtcbiAgICB0aGlzLm1heFRpbWVvdXRNcyA9IDNlNDtcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgdGhpcy5pc1NlbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmJhdGNoU2l6ZSA9IG9wdGlvbnMuYmF0Y2hTaXplO1xuICAgIHRoaXMuYmFzZVRpbWVvdXRNcyA9IG9wdGlvbnMuYmFzZVRpbWVvdXRNcztcbiAgICB0aGlzLmN1cnJlbnRUaW1lb3V0TXMgPSBvcHRpb25zLmJhc2VUaW1lb3V0TXM7XG4gICAgdGhpcy5zZW5kRm4gPSBvcHRpb25zLnNlbmRGbjtcbiAgfVxuICBlbnF1ZXVlKGl0ZW0pIHtcbiAgICB0aGlzLmJhdGNoLnB1c2goaXRlbSk7XG4gICAgdGhpcy5zY2hlZHVsZSgpO1xuICB9XG4gIHNjaGVkdWxlKCkge1xuICAgIGlmICh0aGlzLmJhdGNoLmxlbmd0aCA+IDAgJiYgIXRoaXMudGltZW91dElkKSB7XG4gICAgICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgIH0sIHRoaXMuY3VycmVudFRpbWVvdXRNcyk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmlzU2VuZGluZyB8fCB0aGlzLmJhdGNoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzU2VuZGluZyA9IHRydWU7XG4gICAgY29uc3QgY3VycmVudCA9IFsuLi50aGlzLmJhdGNoLnNsaWNlKDAsIHRoaXMuYmF0Y2hTaXplKV07XG4gICAgdGhpcy5iYXRjaCA9IHRoaXMuYmF0Y2guc2xpY2UodGhpcy5iYXRjaFNpemUpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnNlbmRGbihjdXJyZW50KTtcbiAgICAgIHRoaXMuY3VycmVudFRpbWVvdXRNcyA9IHRoaXMuYmFzZVRpbWVvdXRNcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlNlbmRlcjogRmFpbGVkIHRvIHNlbmQgYmF0Y2hcIiwgZXJyb3IpO1xuICAgICAgdGhpcy5iYXRjaCA9IFsuLi5jdXJyZW50LCAuLi50aGlzLmJhdGNoXTtcbiAgICAgIHRoaXMuY3VycmVudFRpbWVvdXRNcyA9IE1hdGgubWluKFxuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lb3V0TXMgKiAyLFxuICAgICAgICB0aGlzLm1heFRpbWVvdXRNc1xuICAgICAgKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pc1NlbmRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICB9XG4gIH1cbn07XG52YXIgc2VuZGVyX2RlZmF1bHQgPSBTZW5kZXI7XG5cbi8vIHNyYy9hbmFseXRpY3MudHNcbnZhciBBbmFseXRpY3MgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGJhc2VVcmwpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcbiAgICBjb25zdCBjbGllbnQyID0gKDAsIGltcG9ydF9vcGVuYXBpX2ZldGNoLmRlZmF1bHQpKHsgYmFzZVVybCB9KTtcbiAgICBjb25zdCBzZW5kRm4gPSBhc3luYyAoYmF0Y2gpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudDIuUE9TVChcIi92MS9ldmVudHNcIiwgeyBib2R5OiBiYXRjaCB9KTtcbiAgICAgIGlmIChyZXMucmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnNlbmRlciA9IG5ldyBzZW5kZXJfZGVmYXVsdCh7IGJhdGNoU2l6ZTogMTAwLCBiYXNlVGltZW91dE1zOiAyMDAsIHNlbmRGbiB9KTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgfVxuICBzZXRHbG9iYWxQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wZXJ0aWVzW2tleV0gPSB2YWx1ZTtcbiAgfVxuICB0cmFjayhuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICBuYW1lLFxuICAgICAgLi4udGhpcy5wcm9wZXJ0aWVzLFxuICAgICAgLi4ucHJvcGVydGllc1xuICAgIH07XG4gICAgdGhpcy5zZW5kZXIuZW5xdWV1ZShldmVudCk7XG4gIH1cbn07XG52YXIgYW5hbHl0aWNzX2RlZmF1bHQgPSBBbmFseXRpY3M7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGVuZHBvaW50O1xudmFyIF9hO1xuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52KSB7XG4gIGVuZHBvaW50ID0gKF9hID0gcHJvY2Vzcy5lbnYuTUVUQU1BU0tfQU5BTFlUSUNTX0VORFBPSU5UKSAhPSBudWxsID8gX2EgOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19NRVRBTUFTS19BTkFMWVRJQ1NfRU5EUE9JTlQ7XG59XG52YXIgTUVUQU1BU0tfQU5BTFlUSUNTX0VORFBPSU5UID0gZW5kcG9pbnQgIT0gbnVsbCA/IGVuZHBvaW50IDogXCJodHRwczovL21tLXNkay1hbmFseXRpY3MuYXBpLmN4Lm1ldGFtYXNrLmlvL1wiO1xudmFyIGNsaWVudCA9IG5ldyBhbmFseXRpY3NfZGVmYXVsdChNRVRBTUFTS19BTkFMWVRJQ1NfRU5EUE9JTlQpO1xudmFyIGFuYWx5dGljcyA9IGNsaWVudDtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBhbmFseXRpY3Ncbn0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js\n");

/***/ })

};
;