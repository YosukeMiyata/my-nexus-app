"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec";
exports.ids = ["vendor-chunks/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/dist/index.esm.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/dist/index.esm.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BridgeAndExecuteButton: () => (/* binding */ BridgeAndExecuteButton),\n/* harmony export */   BridgeButton: () => (/* binding */ BridgeButton),\n/* harmony export */   CHAIN_METADATA: () => (/* binding */ CHAIN_METADATA),\n/* harmony export */   CaliburSBCTypes: () => (/* binding */ CaliburSBCTypes),\n/* harmony export */   DESTINATION_SWAP_TOKENS: () => (/* binding */ DESTINATION_SWAP_TOKENS),\n/* harmony export */   LOG_LEVEL: () => (/* binding */ LOG_LEVEL),\n/* harmony export */   MAINNET_CHAINS: () => (/* binding */ MAINNET_CHAINS),\n/* harmony export */   NEXUS_EVENTS: () => (/* binding */ NEXUS_EVENTS),\n/* harmony export */   NexusProvider: () => (/* binding */ NexusProvider),\n/* harmony export */   SUPPORTED_CHAINS: () => (/* binding */ SUPPORTED_CHAINS),\n/* harmony export */   SwapButton: () => (/* binding */ SwapButton),\n/* harmony export */   SwapMode: () => (/* binding */ SwapMode),\n/* harmony export */   TESTNET_CHAINS: () => (/* binding */ TESTNET_CHAINS),\n/* harmony export */   TESTNET_TOKEN_METADATA: () => (/* binding */ TESTNET_TOKEN_METADATA),\n/* harmony export */   TOKEN_CONTRACT_ADDRESSES: () => (/* binding */ TOKEN_CONTRACT_ADDRESSES),\n/* harmony export */   TOKEN_METADATA: () => (/* binding */ TOKEN_METADATA),\n/* harmony export */   TransferButton: () => (/* binding */ TransferButton),\n/* harmony export */   chainIdToHex: () => (/* binding */ chainIdToHex),\n/* harmony export */   encodeContractCall: () => (/* binding */ encodeContractCall),\n/* harmony export */   extractErrorMessage: () => (/* binding */ extractErrorMessage),\n/* harmony export */   formatBalance: () => (/* binding */ formatBalance),\n/* harmony export */   formatTestnetTokenAmount: () => (/* binding */ formatTestnetTokenAmount),\n/* harmony export */   formatTokenAmount: () => (/* binding */ formatTokenAmount),\n/* harmony export */   formatUnits: () => (/* binding */ formatUnits),\n/* harmony export */   getBlockExplorerUrl: () => (/* binding */ getBlockExplorerUrl),\n/* harmony export */   getChainMetadata: () => (/* binding */ getChainMetadata),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getMainnetTokenMetadata: () => (/* binding */ getMainnetTokenMetadata),\n/* harmony export */   getTestnetTokenMetadata: () => (/* binding */ getTestnetTokenMetadata),\n/* harmony export */   getTokenContractAddress: () => (/* binding */ getTokenContractAddress),\n/* harmony export */   getTokenMetadata: () => (/* binding */ getTokenMetadata),\n/* harmony export */   getTransactionHashWithFallback: () => (/* binding */ getTransactionHashWithFallback),\n/* harmony export */   getViemChain: () => (/* binding */ getViemChain),\n/* harmony export */   hexToChainId: () => (/* binding */ hexToChainId),\n/* harmony export */   isMainnetChain: () => (/* binding */ isMainnetChain),\n/* harmony export */   isTestnetChain: () => (/* binding */ isTestnetChain),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   parseUnits: () => (/* binding */ parseUnits),\n/* harmony export */   setExceptionReporter: () => (/* binding */ setExceptionReporter),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   truncateAddress: () => (/* binding */ truncateAddress$1),\n/* harmony export */   useNexus: () => (/* binding */ useNexus),\n/* harmony export */   validateContractParams: () => (/* binding */ validateContractParams),\n/* harmony export */   validateHexResponse: () => (/* binding */ validateHexResponse),\n/* harmony export */   validateTransactionHash: () => (/* binding */ validateTransactionHash),\n/* harmony export */   wait: () => (/* binding */ wait),\n/* harmony export */   waitForTransactionReceipt: () => (/* binding */ waitForTransactionReceipt)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@15.5.5_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.5.5_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _avail_project_nexus_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avail-project/nexus-core */ \"(ssr)/./node_modules/.pnpm/@avail-project+nexus-core@0.0.1-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_utf-8-va_56dd550c8b9e0639694cd9176377fa72/node_modules/@avail-project/nexus-core/dist/index.esm.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! decimal.js */ \"(ssr)/./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/node_modules/decimal.js/decimal.mjs\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/utils/hash/isHash.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/chains/definitions/polygon.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/chains/definitions/arbitrum.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/chains/definitions/optimism.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/.pnpm/viem@2.38.2_bufferutil@4.0.9_typescript@5.9.3_utf-8-validate@5.0.10_zod@4.1.12/node_modules/viem/_esm/chains/definitions/base.js\");\n/* harmony import */ var motion_react__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! motion/react */ \"(ssr)/./node_modules/.pnpm/framer-motion@12.23.24_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* harmony import */ var motion_react__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! motion/react */ \"(ssr)/./node_modules/.pnpm/framer-motion@12.23.24_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs\");\n/* harmony import */ var motion_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! motion/react */ \"(ssr)/./node_modules/.pnpm/framer-motion@12.23.24_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs\");\n/* harmony import */ var _lottiefiles_dotlottie_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lottiefiles/dotlottie-react */ \"(ssr)/./node_modules/.pnpm/@lottiefiles+dotlottie-react@0.14.2_react@19.2.0/node_modules/@lottiefiles/dotlottie-react/dist/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/.pnpm/next@15.5.5_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"/*! tailwindcss v4.1.10 | MIT License | https://tailwindcss.com */\\n@layer properties;\\n@layer theme, base, components, utilities;\\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\\n@layer theme {\\n  :root, :host {\\n    --font-sans: ui-sans-serif, system-ui, sans-serif, \\\"Apple Color Emoji\\\",\\n      \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\", \\\"Noto Color Emoji\\\";\\n    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\",\\n      \\\"Courier New\\\", monospace;\\n    --color-red-50: oklch(97.1% 0.013 17.38);\\n    --color-red-200: oklch(88.5% 0.062 18.334);\\n    --color-red-500: oklch(63.7% 0.237 25.331);\\n    --color-red-600: oklch(57.7% 0.245 27.325);\\n    --color-green-100: oklch(96.2% 0.044 156.743);\\n    --color-green-600: oklch(62.7% 0.194 149.214);\\n    --color-green-800: oklch(44.8% 0.119 151.328);\\n    --color-blue-50: oklch(97% 0.014 254.604);\\n    --color-blue-500: oklch(62.3% 0.214 259.815);\\n    --color-blue-600: oklch(54.6% 0.245 262.881);\\n    --color-purple-500: oklch(62.7% 0.265 303.9);\\n    --color-purple-600: oklch(55.8% 0.288 302.321);\\n    --color-gray-100: oklch(96.7% 0.003 264.542);\\n    --color-gray-200: oklch(92.8% 0.006 264.531);\\n    --color-gray-300: oklch(87.2% 0.01 258.338);\\n    --color-gray-600: oklch(44.6% 0.03 256.802);\\n    --color-gray-700: oklch(37.3% 0.034 259.733);\\n    --color-zinc-200: oklch(92% 0.004 286.32);\\n    --color-zinc-400: oklch(70.5% 0.015 286.067);\\n    --color-zinc-700: oklch(37% 0.013 285.805);\\n    --color-zinc-800: oklch(27.4% 0.006 286.033);\\n    --color-neutral-100: oklch(97% 0 0);\\n    --color-neutral-500: oklch(55.6% 0 0);\\n    --color-stone-500: oklch(55.3% 0.013 58.071);\\n    --color-white: #fff;\\n    --spacing: 0.25rem;\\n    --container-lg: 32rem;\\n    --text-xs: 0.75rem;\\n    --text-xs--line-height: calc(1 / 0.75);\\n    --text-sm: 0.875rem;\\n    --text-sm--line-height: calc(1.25 / 0.875);\\n    --text-base: 1rem;\\n    --text-base--line-height: calc(1.5 / 1);\\n    --text-lg: 1.125rem;\\n    --text-lg--line-height: calc(1.75 / 1.125);\\n    --text-xl: 1.25rem;\\n    --text-xl--line-height: calc(1.75 / 1.25);\\n    --text-2xl: 1.5rem;\\n    --text-2xl--line-height: calc(2 / 1.5);\\n    --font-weight-normal: 400;\\n    --font-weight-medium: 500;\\n    --font-weight-semibold: 600;\\n    --font-weight-bold: 700;\\n    --tracking-tighter: -0.05em;\\n    --tracking-tight: -0.025em;\\n    --leading-normal: 1.5;\\n    --radius-lg: 0.5rem;\\n    --radius-xl: 0.75rem;\\n    --ease-out: cubic-bezier(0, 0, 0.2, 1);\\n    --animate-pulse: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\\n    --blur-2xl: 40px;\\n    --default-transition-duration: 150ms;\\n    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    --default-font-family: var(--font-sans);\\n    --default-mono-font-family: var(--font-mono);\\n    --color-nexus-backdrop: var(--nexus-backdrop);\\n    --color-nexus-blue: var(--nexus-blue);\\n    --color-nexus-gray: var(--nexus-color-gray);\\n    --color-nexus-black: var(--nexus-color-black);\\n    --color-nexus-primary-gray: var(--nexus-color-primary-hover);\\n    --color-nexus-snow-white: var(--nexus-color-snow-white);\\n    --color-nexus-success: var(--nexus-success);\\n    --color-nexus-footer: var(--nexus-footer);\\n    --color-nexus-footer-text: var(--nexus-footer-text);\\n    --color-nexus-background: var(--nexus-color-background);\\n    --color-nexus-foreground: var(--nexus-color-foreground);\\n    --color-nexus-primary: var(--nexus-color-primary);\\n    --color-nexus-primary-foreground: var(--nexus-color-primary-foreground);\\n    --color-nexus-primary-hover: var(--nexus-color-primary-hover);\\n    --color-nexus-secondary: var(--nexus-color-secondary);\\n    --color-nexus-secondary-foreground: var(--nexus-color-secondary-foreground);\\n    --color-nexus-secondary-background: var(--nexus-color-secondary-background);\\n    --color-nexus-muted: var(--nexus-color-muted);\\n    --color-nexus-muted-foreground: var(--nexus-color-muted-foreground);\\n    --color-nexus-muted-secondary: var(--nexus-color-muted-secondary);\\n    --color-nexus-accent: var(--nexus-color-accent);\\n    --color-nexus-accent-green: var(--nexus-color-accent-green);\\n    --color-nexus-accent-foreground: var(--nexus-color-accent-foreground);\\n    --color-nexus-border: var(--nexus-color-border);\\n    --color-nexus-border-secondary: var(--nexus-color-border-secondary);\\n    --color-nexus-input: var(--nexus-color-input);\\n    --color-nexus-ring: var(--nexus-color-ring);\\n    --color-nexus-ring-offset: var(--nexus-color-background);\\n    --color-nexus-destructive: var(--nexus-color-destructive);\\n    --color-nexus-destructive-foreground: var(--nexus-color-destructive-foreground);\\n    --color-nexus-destructive-secondary: var(--nexus-color-destructive-secondary);\\n    --font-nexus-primary: var(--nexus-font-primary);\\n    --radius-nexus-md: var(--nexus-radius-md);\\n    --radius-nexus-xl: var(--nexus-radius-xl);\\n    --radius-nexus-full: var(--nexus-radius-full);\\n    --animate-in: in 0.2s ease-out;\\n    --animate-out: out 0.2s ease-in;\\n  }\\n}\\n@layer base {\\n  *,\\n  ::after,\\n  ::before,\\n  ::backdrop,\\n  ::file-selector-button {\\n    box-sizing: border-box;\\n    margin: 0;\\n    padding: 0;\\n    border: 0 solid;\\n  }\\n  html,\\n  :host {\\n    line-height: 1.5;\\n    -webkit-text-size-adjust: 100%;\\n    -moz-tab-size: 4;\\n      -o-tab-size: 4;\\n         tab-size: 4;\\n    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\", \\\"Noto Color Emoji\\\");\\n    font-feature-settings: var(--default-font-feature-settings, normal);\\n    font-variation-settings: var(--default-font-variation-settings, normal);\\n    -webkit-tap-highlight-color: transparent;\\n  }\\n  hr {\\n    height: 0;\\n    color: inherit;\\n    border-top-width: 1px;\\n  }\\n  abbr:where([title]) {\\n    -webkit-text-decoration: underline dotted;\\n    text-decoration: underline dotted;\\n  }\\n  h1,\\n  h2,\\n  h3,\\n  h4,\\n  h5,\\n  h6 {\\n    font-size: inherit;\\n    font-weight: inherit;\\n  }\\n  a {\\n    color: inherit;\\n    -webkit-text-decoration: inherit;\\n    text-decoration: inherit;\\n  }\\n  b,\\n  strong {\\n    font-weight: bolder;\\n  }\\n  code,\\n  kbd,\\n  samp,\\n  pre {\\n    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace);\\n    font-feature-settings: var(--default-mono-font-feature-settings, normal);\\n    font-variation-settings: var(--default-mono-font-variation-settings, normal);\\n    font-size: 1em;\\n  }\\n  small {\\n    font-size: 80%;\\n  }\\n  sub,\\n  sup {\\n    font-size: 75%;\\n    line-height: 0;\\n    position: relative;\\n    vertical-align: baseline;\\n  }\\n  sub {\\n    bottom: -0.25em;\\n  }\\n  sup {\\n    top: -0.5em;\\n  }\\n  table {\\n    text-indent: 0;\\n    border-color: inherit;\\n    border-collapse: collapse;\\n  }\\n  :-moz-focusring {\\n    outline: auto;\\n  }\\n  progress {\\n    vertical-align: baseline;\\n  }\\n  summary {\\n    display: list-item;\\n  }\\n  ol,\\n  ul,\\n  menu {\\n    list-style: none;\\n  }\\n  img,\\n  svg,\\n  video,\\n  canvas,\\n  audio,\\n  iframe,\\n  embed,\\n  object {\\n    display: block;\\n    vertical-align: middle;\\n  }\\n  img,\\n  video {\\n    max-width: 100%;\\n    height: auto;\\n  }\\n  button,\\n  input,\\n  select,\\n  optgroup,\\n  textarea,\\n  ::file-selector-button {\\n    font: inherit;\\n    font-feature-settings: inherit;\\n    font-variation-settings: inherit;\\n    letter-spacing: inherit;\\n    color: inherit;\\n    border-radius: 0;\\n    background-color: transparent;\\n    opacity: 1;\\n  }\\n  :where(select:is([multiple], [size])) optgroup {\\n    font-weight: bolder;\\n  }\\n  :where(select:is([multiple], [size])) optgroup option {\\n    padding-inline-start: 20px;\\n  }\\n  ::file-selector-button {\\n    margin-inline-end: 4px;\\n  }\\n  ::-moz-placeholder {\\n    opacity: 1;\\n  }\\n  ::placeholder {\\n    opacity: 1;\\n  }\\n  @supports (not (-webkit-appearance: -apple-pay-button))  or\\n    (contain-intrinsic-size: 1px) {\\n    ::-moz-placeholder {\\n      color: currentcolor;\\n      @supports (color: color-mix(in lab, red, red)) {\\n        color: color-mix(in oklab, currentcolor 50%, transparent);\\n      }\\n    }\\n    ::placeholder {\\n      color: currentcolor;\\n      @supports (color: color-mix(in lab, red, red)) {\\n        color: color-mix(in oklab, currentcolor 50%, transparent);\\n      }\\n    }\\n  }\\n  textarea {\\n    resize: vertical;\\n  }\\n  ::-webkit-search-decoration {\\n    -webkit-appearance: none;\\n  }\\n  ::-webkit-date-and-time-value {\\n    min-height: 1lh;\\n    text-align: inherit;\\n  }\\n  ::-webkit-datetime-edit {\\n    display: inline-flex;\\n  }\\n  ::-webkit-datetime-edit-fields-wrapper {\\n    padding: 0;\\n  }\\n  ::-webkit-datetime-edit,\\n  ::-webkit-datetime-edit-year-field,\\n  ::-webkit-datetime-edit-month-field,\\n  ::-webkit-datetime-edit-day-field,\\n  ::-webkit-datetime-edit-hour-field,\\n  ::-webkit-datetime-edit-minute-field,\\n  ::-webkit-datetime-edit-second-field,\\n  ::-webkit-datetime-edit-millisecond-field,\\n  ::-webkit-datetime-edit-meridiem-field {\\n    padding-block: 0;\\n  }\\n  :-moz-ui-invalid {\\n    box-shadow: none;\\n  }\\n  button,\\n  input:where([type=\\\"button\\\"], [type=\\\"reset\\\"], [type=\\\"submit\\\"]),\\n  ::file-selector-button {\\n    -webkit-appearance: button;\\n       -moz-appearance: button;\\n            appearance: button;\\n  }\\n  ::-webkit-inner-spin-button,\\n  ::-webkit-outer-spin-button {\\n    height: auto;\\n  }\\n  [hidden]:where(:not([hidden=\\\"until-found\\\"])) {\\n    display: none !important;\\n  }\\n}\\n@layer utilities {\\n  .pointer-events-auto {\\n    pointer-events: auto;\\n  }\\n  .pointer-events-none {\\n    pointer-events: none;\\n  }\\n  .absolute {\\n    position: absolute;\\n  }\\n  .fixed {\\n    position: fixed;\\n  }\\n  .relative {\\n    position: relative;\\n  }\\n  .static {\\n    position: static;\\n  }\\n  .inset-0 {\\n    inset: calc(var(--spacing) * 0);\\n  }\\n  .-top-1\\\\.5 {\\n    top: calc(var(--spacing) * -1.5);\\n  }\\n  .-top-2 {\\n    top: calc(var(--spacing) * -2);\\n  }\\n  .-top-4 {\\n    top: calc(var(--spacing) * -4);\\n  }\\n  .top-0 {\\n    top: calc(var(--spacing) * 0);\\n  }\\n  .top-16 {\\n    top: calc(var(--spacing) * 16);\\n  }\\n  .top-\\\\[50\\\\%\\\\] {\\n    top: 50%;\\n  }\\n  .-right-1 {\\n    right: calc(var(--spacing) * -1);\\n  }\\n  .right-0 {\\n    right: calc(var(--spacing) * 0);\\n  }\\n  .bottom-0 {\\n    bottom: calc(var(--spacing) * 0);\\n  }\\n  .left-0 {\\n    left: calc(var(--spacing) * 0);\\n  }\\n  .left-1\\\\/2 {\\n    left: calc(1/2 * 100%);\\n  }\\n  .left-2 {\\n    left: calc(var(--spacing) * 2);\\n  }\\n  .left-8 {\\n    left: calc(var(--spacing) * 8);\\n  }\\n  .left-14 {\\n    left: calc(var(--spacing) * 14);\\n  }\\n  .left-\\\\[50\\\\%\\\\] {\\n    left: 50%;\\n  }\\n  .z-10 {\\n    z-index: 10;\\n  }\\n  .z-40 {\\n    z-index: 40;\\n  }\\n  .z-50 {\\n    z-index: 50;\\n  }\\n  .container {\\n    width: 100%;\\n    @media (width >= 40rem) {\\n      max-width: 40rem;\\n    }\\n    @media (width >= 48rem) {\\n      max-width: 48rem;\\n    }\\n    @media (width >= 64rem) {\\n      max-width: 64rem;\\n    }\\n    @media (width >= 80rem) {\\n      max-width: 80rem;\\n    }\\n    @media (width >= 96rem) {\\n      max-width: 96rem;\\n    }\\n  }\\n  .my-4 {\\n    margin-block: calc(var(--spacing) * 4);\\n  }\\n  .my-6 {\\n    margin-block: calc(var(--spacing) * 6);\\n  }\\n  .mt-1 {\\n    margin-top: calc(var(--spacing) * 1);\\n  }\\n  .mt-2 {\\n    margin-top: calc(var(--spacing) * 2);\\n  }\\n  .mt-2\\\\.5 {\\n    margin-top: calc(var(--spacing) * 2.5);\\n  }\\n  .mt-3 {\\n    margin-top: calc(var(--spacing) * 3);\\n  }\\n  .mt-4 {\\n    margin-top: calc(var(--spacing) * 4);\\n  }\\n  .mt-6 {\\n    margin-top: calc(var(--spacing) * 6);\\n  }\\n  .mt-14 {\\n    margin-top: calc(var(--spacing) * 14);\\n  }\\n  .mt-auto {\\n    margin-top: auto;\\n  }\\n  .mr-2 {\\n    margin-right: calc(var(--spacing) * 2);\\n  }\\n  .mb-0\\\\.5 {\\n    margin-bottom: calc(var(--spacing) * 0.5);\\n  }\\n  .mb-1 {\\n    margin-bottom: calc(var(--spacing) * 1);\\n  }\\n  .mb-2 {\\n    margin-bottom: calc(var(--spacing) * 2);\\n  }\\n  .mb-2\\\\.5 {\\n    margin-bottom: calc(var(--spacing) * 2.5);\\n  }\\n  .mb-4 {\\n    margin-bottom: calc(var(--spacing) * 4);\\n  }\\n  .mb-6 {\\n    margin-bottom: calc(var(--spacing) * 6);\\n  }\\n  .mb-20 {\\n    margin-bottom: calc(var(--spacing) * 20);\\n  }\\n  .-ml-3 {\\n    margin-left: calc(var(--spacing) * -3);\\n  }\\n  .-ml-5 {\\n    margin-left: calc(var(--spacing) * -5);\\n  }\\n  .ml-2 {\\n    margin-left: calc(var(--spacing) * 2);\\n  }\\n  .block {\\n    display: block;\\n  }\\n  .flex {\\n    display: flex;\\n  }\\n  .inline-block {\\n    display: inline-block;\\n  }\\n  .inline-flex {\\n    display: inline-flex;\\n  }\\n  .size-1\\\\.5 {\\n    width: calc(var(--spacing) * 1.5);\\n    height: calc(var(--spacing) * 1.5);\\n  }\\n  .size-5 {\\n    width: calc(var(--spacing) * 5);\\n    height: calc(var(--spacing) * 5);\\n  }\\n  .size-6 {\\n    width: calc(var(--spacing) * 6);\\n    height: calc(var(--spacing) * 6);\\n  }\\n  .size-10 {\\n    width: calc(var(--spacing) * 10);\\n    height: calc(var(--spacing) * 10);\\n  }\\n  .h-1 {\\n    height: calc(var(--spacing) * 1);\\n  }\\n  .h-2 {\\n    height: calc(var(--spacing) * 2);\\n  }\\n  .h-4 {\\n    height: calc(var(--spacing) * 4);\\n  }\\n  .h-5 {\\n    height: calc(var(--spacing) * 5);\\n  }\\n  .h-6 {\\n    height: calc(var(--spacing) * 6);\\n  }\\n  .h-7 {\\n    height: calc(var(--spacing) * 7);\\n  }\\n  .h-8 {\\n    height: calc(var(--spacing) * 8);\\n  }\\n  .h-9 {\\n    height: calc(var(--spacing) * 9);\\n  }\\n  .h-10 {\\n    height: calc(var(--spacing) * 10);\\n  }\\n  .h-11 {\\n    height: calc(var(--spacing) * 11);\\n  }\\n  .h-12 {\\n    height: calc(var(--spacing) * 12);\\n  }\\n  .h-14 {\\n    height: calc(var(--spacing) * 14);\\n  }\\n  .h-16 {\\n    height: calc(var(--spacing) * 16);\\n  }\\n  .h-18 {\\n    height: calc(var(--spacing) * 18);\\n  }\\n  .h-20 {\\n    height: calc(var(--spacing) * 20);\\n  }\\n  .h-\\\\[16px\\\\] {\\n    height: 16px;\\n  }\\n  .h-\\\\[88px\\\\] {\\n    height: 88px;\\n  }\\n  .h-\\\\[380px\\\\] {\\n    height: 380px;\\n  }\\n  .h-auto {\\n    height: auto;\\n  }\\n  .h-fit {\\n    height: -moz-fit-content;\\n    height: fit-content;\\n  }\\n  .h-full {\\n    height: 100%;\\n  }\\n  .max-h-\\\\[80\\\\%\\\\] {\\n    max-height: 80%;\\n  }\\n  .max-h-\\\\[332px\\\\] {\\n    max-height: 332px;\\n  }\\n  .min-h-12 {\\n    min-height: calc(var(--spacing) * 12);\\n  }\\n  .min-h-\\\\[500px\\\\] {\\n    min-height: 500px;\\n  }\\n  .w-4 {\\n    width: calc(var(--spacing) * 4);\\n  }\\n  .w-5 {\\n    width: calc(var(--spacing) * 5);\\n  }\\n  .w-6 {\\n    width: calc(var(--spacing) * 6);\\n  }\\n  .w-8 {\\n    width: calc(var(--spacing) * 8);\\n  }\\n  .w-10 {\\n    width: calc(var(--spacing) * 10);\\n  }\\n  .w-12 {\\n    width: calc(var(--spacing) * 12);\\n  }\\n  .w-14 {\\n    width: calc(var(--spacing) * 14);\\n  }\\n  .w-16 {\\n    width: calc(var(--spacing) * 16);\\n  }\\n  .w-18 {\\n    width: calc(var(--spacing) * 18);\\n  }\\n  .w-20 {\\n    width: calc(var(--spacing) * 20);\\n  }\\n  .w-\\\\[58px\\\\] {\\n    width: 58px;\\n  }\\n  .w-\\\\[191px\\\\] {\\n    width: 191px;\\n  }\\n  .w-\\\\[380px\\\\] {\\n    width: 380px;\\n  }\\n  .w-\\\\[480px\\\\] {\\n    width: 480px;\\n  }\\n  .w-fit {\\n    width: -moz-fit-content;\\n    width: fit-content;\\n  }\\n  .w-full {\\n    width: 100%;\\n  }\\n  .max-w-\\\\[300px\\\\] {\\n    max-width: 300px;\\n  }\\n  .max-w-lg {\\n    max-width: var(--container-lg);\\n  }\\n  .max-w-max {\\n    max-width: -moz-max-content;\\n    max-width: max-content;\\n  }\\n  .min-w-0 {\\n    min-width: calc(var(--spacing) * 0);\\n  }\\n  .min-w-\\\\[192px\\\\] {\\n    min-width: 192px;\\n  }\\n  .flex-1 {\\n    flex: 1;\\n  }\\n  .flex-shrink-0 {\\n    flex-shrink: 0;\\n  }\\n  .origin-left {\\n    transform-origin: left;\\n  }\\n  .-translate-x-1\\\\/2 {\\n    --tw-translate-x: calc(calc(1/2 * 100%) * -1);\\n    translate: var(--tw-translate-x) var(--tw-translate-y);\\n  }\\n  .translate-x-1\\\\/3 {\\n    --tw-translate-x: calc(1/3 * 100%);\\n    translate: var(--tw-translate-x) var(--tw-translate-y);\\n  }\\n  .translate-x-\\\\[-50\\\\%\\\\] {\\n    --tw-translate-x: -50%;\\n    translate: var(--tw-translate-x) var(--tw-translate-y);\\n  }\\n  .translate-y-\\\\[-50\\\\%\\\\] {\\n    --tw-translate-y: -50%;\\n    translate: var(--tw-translate-x) var(--tw-translate-y);\\n  }\\n  .transform {\\n    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);\\n  }\\n  .animate-pulse {\\n    animation: var(--animate-pulse);\\n  }\\n  .cursor-move {\\n    cursor: move;\\n  }\\n  .cursor-not-allowed {\\n    cursor: not-allowed;\\n  }\\n  .cursor-pointer {\\n    cursor: pointer;\\n  }\\n  .resize {\\n    resize: both;\\n  }\\n  .flex-col {\\n    flex-direction: column;\\n  }\\n  .flex-col-reverse {\\n    flex-direction: column-reverse;\\n  }\\n  .flex-row {\\n    flex-direction: row;\\n  }\\n  .flex-wrap {\\n    flex-wrap: wrap;\\n  }\\n  .items-center {\\n    align-items: center;\\n  }\\n  .items-end {\\n    align-items: flex-end;\\n  }\\n  .items-start {\\n    align-items: flex-start;\\n  }\\n  .justify-between {\\n    justify-content: space-between;\\n  }\\n  .justify-center {\\n    justify-content: center;\\n  }\\n  .justify-end {\\n    justify-content: flex-end;\\n  }\\n  .justify-start {\\n    justify-content: flex-start;\\n  }\\n  .gap-0\\\\.5 {\\n    gap: calc(var(--spacing) * 0.5);\\n  }\\n  .gap-1 {\\n    gap: calc(var(--spacing) * 1);\\n  }\\n  .gap-1\\\\.5 {\\n    gap: calc(var(--spacing) * 1.5);\\n  }\\n  .gap-2 {\\n    gap: calc(var(--spacing) * 2);\\n  }\\n  .gap-3 {\\n    gap: calc(var(--spacing) * 3);\\n  }\\n  .space-y-1\\\\.5 {\\n    :where(& > :not(:last-child)) {\\n      --tw-space-y-reverse: 0;\\n      margin-block-start: calc(calc(var(--spacing) * 1.5) * var(--tw-space-y-reverse));\\n      margin-block-end: calc(calc(var(--spacing) * 1.5) * calc(1 - var(--tw-space-y-reverse)));\\n    }\\n  }\\n  .space-y-2 {\\n    :where(& > :not(:last-child)) {\\n      --tw-space-y-reverse: 0;\\n      margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));\\n      margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));\\n    }\\n  }\\n  .space-y-2\\\\.5 {\\n    :where(& > :not(:last-child)) {\\n      --tw-space-y-reverse: 0;\\n      margin-block-start: calc(calc(var(--spacing) * 2.5) * var(--tw-space-y-reverse));\\n      margin-block-end: calc(calc(var(--spacing) * 2.5) * calc(1 - var(--tw-space-y-reverse)));\\n    }\\n  }\\n  .space-y-3 {\\n    :where(& > :not(:last-child)) {\\n      --tw-space-y-reverse: 0;\\n      margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse));\\n      margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse)));\\n    }\\n  }\\n  .space-y-4 {\\n    :where(& > :not(:last-child)) {\\n      --tw-space-y-reverse: 0;\\n      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));\\n      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));\\n    }\\n  }\\n  .gap-x-1 {\\n    -moz-column-gap: calc(var(--spacing) * 1);\\n         column-gap: calc(var(--spacing) * 1);\\n  }\\n  .gap-x-1\\\\.5 {\\n    -moz-column-gap: calc(var(--spacing) * 1.5);\\n         column-gap: calc(var(--spacing) * 1.5);\\n  }\\n  .gap-x-2 {\\n    -moz-column-gap: calc(var(--spacing) * 2);\\n         column-gap: calc(var(--spacing) * 2);\\n  }\\n  .gap-x-3 {\\n    -moz-column-gap: calc(var(--spacing) * 3);\\n         column-gap: calc(var(--spacing) * 3);\\n  }\\n  .gap-x-4 {\\n    -moz-column-gap: calc(var(--spacing) * 4);\\n         column-gap: calc(var(--spacing) * 4);\\n  }\\n  .gap-x-5 {\\n    -moz-column-gap: calc(var(--spacing) * 5);\\n         column-gap: calc(var(--spacing) * 5);\\n  }\\n  .-space-x-1 {\\n    :where(& > :not(:last-child)) {\\n      --tw-space-x-reverse: 0;\\n      margin-inline-start: calc(calc(var(--spacing) * -1) * var(--tw-space-x-reverse));\\n      margin-inline-end: calc(calc(var(--spacing) * -1) * calc(1 - var(--tw-space-x-reverse)));\\n    }\\n  }\\n  .gap-y-0\\\\.5 {\\n    row-gap: calc(var(--spacing) * 0.5);\\n  }\\n  .gap-y-1 {\\n    row-gap: calc(var(--spacing) * 1);\\n  }\\n  .gap-y-2 {\\n    row-gap: calc(var(--spacing) * 2);\\n  }\\n  .gap-y-3 {\\n    row-gap: calc(var(--spacing) * 3);\\n  }\\n  .gap-y-4 {\\n    row-gap: calc(var(--spacing) * 4);\\n  }\\n  .gap-y-6 {\\n    row-gap: calc(var(--spacing) * 6);\\n  }\\n  .overflow-clip {\\n    overflow: clip;\\n  }\\n  .overflow-hidden {\\n    overflow: hidden;\\n  }\\n  .overflow-x-hidden {\\n    overflow-x: hidden;\\n  }\\n  .overflow-y-auto {\\n    overflow-y: auto;\\n  }\\n  .overflow-y-hidden {\\n    overflow-y: hidden;\\n  }\\n  .rounded {\\n    border-radius: 0.25rem;\\n  }\\n  .rounded-full {\\n    border-radius: calc(infinity * 1px);\\n  }\\n  .rounded-lg {\\n    border-radius: var(--radius-lg);\\n  }\\n  .rounded-nexus-full {\\n    border-radius: var(--radius-nexus-full);\\n  }\\n  .rounded-nexus-md {\\n    border-radius: var(--radius-nexus-md);\\n  }\\n  .rounded-nexus-xl {\\n    border-radius: var(--radius-nexus-xl);\\n  }\\n  .rounded-t-nexus-md {\\n    border-top-left-radius: var(--radius-nexus-md);\\n    border-top-right-radius: var(--radius-nexus-md);\\n  }\\n  .rounded-t-xl {\\n    border-top-left-radius: var(--radius-xl);\\n    border-top-right-radius: var(--radius-xl);\\n  }\\n  .rounded-b-nexus-xl {\\n    border-bottom-right-radius: var(--radius-nexus-xl);\\n    border-bottom-left-radius: var(--radius-nexus-xl);\\n  }\\n  .border {\\n    border-style: var(--tw-border-style);\\n    border-width: 1px;\\n  }\\n  .border-2 {\\n    border-style: var(--tw-border-style);\\n    border-width: 2px;\\n  }\\n  .border-t {\\n    border-top-style: var(--tw-border-style);\\n    border-top-width: 1px;\\n  }\\n  .border-r {\\n    border-right-style: var(--tw-border-style);\\n    border-right-width: 1px;\\n  }\\n  .border-b {\\n    border-bottom-style: var(--tw-border-style);\\n    border-bottom-width: 1px;\\n  }\\n  .border-\\\\[\\\\#C03C541A\\\\] {\\n    border-color: #C03C541A;\\n  }\\n  .border-\\\\[\\\\#C8C8C8\\\\] {\\n    border-color: #C8C8C8;\\n  }\\n  .border-gray-200 {\\n    border-color: var(--color-gray-200);\\n  }\\n  .border-nexus-black\\\\/80 {\\n    border-color: var(--color-nexus-black);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      border-color: color-mix(in oklab, var(--color-nexus-black) 80%, transparent);\\n    }\\n  }\\n  .border-nexus-blue {\\n    border-color: var(--color-nexus-blue);\\n  }\\n  .border-nexus-border {\\n    border-color: var(--color-nexus-border);\\n  }\\n  .border-nexus-border-secondary {\\n    border-color: var(--color-nexus-border-secondary);\\n  }\\n  .border-nexus-border-secondary\\\\/10 {\\n    border-color: var(--color-nexus-border-secondary);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      border-color: color-mix(in oklab, var(--color-nexus-border-secondary) 10%, transparent);\\n    }\\n  }\\n  .border-nexus-input {\\n    border-color: var(--color-nexus-input);\\n  }\\n  .border-nexus-muted-secondary\\\\/20 {\\n    border-color: var(--color-nexus-muted-secondary);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      border-color: color-mix(in oklab, var(--color-nexus-muted-secondary) 20%, transparent);\\n    }\\n  }\\n  .border-red-200 {\\n    border-color: var(--color-red-200);\\n  }\\n  .border-red-500 {\\n    border-color: var(--color-red-500);\\n  }\\n  .border-white {\\n    border-color: var(--color-white);\\n  }\\n  .border-zinc-400 {\\n    border-color: var(--color-zinc-400);\\n  }\\n  .border-zinc-400\\\\/40 {\\n    border-color: color-mix(in srgb, oklch(70.5% 0.015 286.067) 40%, transparent);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      border-color: color-mix(in oklab, var(--color-zinc-400) 40%, transparent);\\n    }\\n  }\\n  .\\\\!bg-transparent {\\n    background-color: transparent !important;\\n  }\\n  .bg-\\\\[\\\\#56C45B\\\\] {\\n    background-color: #56C45B;\\n  }\\n  .bg-\\\\[\\\\#0375D81A\\\\] {\\n    background-color: #0375D81A;\\n  }\\n  .bg-\\\\[\\\\#C03C541A\\\\] {\\n    background-color: #C03C541A;\\n  }\\n  .bg-\\\\[\\\\#E8EAF0\\\\] {\\n    background-color: #E8EAF0;\\n  }\\n  .bg-blue-50 {\\n    background-color: var(--color-blue-50);\\n  }\\n  .bg-blue-500 {\\n    background-color: var(--color-blue-500);\\n  }\\n  .bg-gray-100 {\\n    background-color: var(--color-gray-100);\\n  }\\n  .bg-gray-200 {\\n    background-color: var(--color-gray-200);\\n  }\\n  .bg-gray-300 {\\n    background-color: var(--color-gray-300);\\n  }\\n  .bg-green-100 {\\n    background-color: var(--color-green-100);\\n  }\\n  .bg-nexus-accent-green\\\\/10 {\\n    background-color: var(--color-nexus-accent-green);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      background-color: color-mix(in oklab, var(--color-nexus-accent-green) 10%, transparent);\\n    }\\n  }\\n  .bg-nexus-backdrop {\\n    background-color: var(--color-nexus-backdrop);\\n  }\\n  .bg-nexus-background {\\n    background-color: var(--color-nexus-background);\\n  }\\n  .bg-nexus-black\\\\/20 {\\n    background-color: var(--color-nexus-black);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      background-color: color-mix(in oklab, var(--color-nexus-black) 20%, transparent);\\n    }\\n  }\\n  .bg-nexus-blue {\\n    background-color: var(--color-nexus-blue);\\n  }\\n  .bg-nexus-destructive {\\n    background-color: var(--color-nexus-destructive);\\n  }\\n  .bg-nexus-destructive-secondary {\\n    background-color: var(--color-nexus-destructive-secondary);\\n  }\\n  .bg-nexus-footer {\\n    background-color: var(--color-nexus-footer);\\n  }\\n  .bg-nexus-gray {\\n    background-color: var(--color-nexus-gray);\\n  }\\n  .bg-nexus-primary-gray {\\n    background-color: var(--color-nexus-primary-gray);\\n  }\\n  .bg-nexus-primary-hover {\\n    background-color: var(--color-nexus-primary-hover);\\n  }\\n  .bg-nexus-ring-offset {\\n    background-color: var(--color-nexus-ring-offset);\\n  }\\n  .bg-nexus-secondary {\\n    background-color: var(--color-nexus-secondary);\\n  }\\n  .bg-nexus-secondary-background {\\n    background-color: var(--color-nexus-secondary-background);\\n  }\\n  .bg-nexus-success {\\n    background-color: var(--color-nexus-success);\\n  }\\n  .bg-red-50 {\\n    background-color: var(--color-red-50);\\n  }\\n  .bg-transparent {\\n    background-color: transparent;\\n  }\\n  .bg-white {\\n    background-color: var(--color-white);\\n  }\\n  .bg-zinc-800 {\\n    background-color: var(--color-zinc-800);\\n  }\\n  .bg-gradient-to-br {\\n    --tw-gradient-position: to bottom right in oklab;\\n    background-image: linear-gradient(var(--tw-gradient-stops));\\n  }\\n  .bg-gradient-to-r {\\n    --tw-gradient-position: to right in oklab;\\n    background-image: linear-gradient(var(--tw-gradient-stops));\\n  }\\n  .from-\\\\[\\\\#86DF00\\\\]\\\\/16 {\\n    --tw-gradient-from: color-mix(in oklab, #86DF00 16%, transparent);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .from-\\\\[\\\\#DFC200\\\\]\\\\/16 {\\n    --tw-gradient-from: color-mix(in oklab, #DFC200 16%, transparent);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .from-gray-200 {\\n    --tw-gradient-from: var(--color-gray-200);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .from-purple-500 {\\n    --tw-gradient-from: var(--color-purple-500);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .to-\\\\[\\\\#73BF01\\\\]\\\\/16 {\\n    --tw-gradient-to: color-mix(in oklab, #73BF01 16%, transparent);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .to-\\\\[\\\\#DFC200\\\\]\\\\/16 {\\n    --tw-gradient-to: color-mix(in oklab, #DFC200 16%, transparent);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .to-blue-600 {\\n    --tw-gradient-to: var(--color-blue-600);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .to-gray-300 {\\n    --tw-gradient-to: var(--color-gray-300);\\n    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\\n  }\\n  .object-cover {\\n    -o-object-fit: cover;\\n       object-fit: cover;\\n  }\\n  .p-0 {\\n    padding: calc(var(--spacing) * 0);\\n  }\\n  .p-1 {\\n    padding: calc(var(--spacing) * 1);\\n  }\\n  .p-3 {\\n    padding: calc(var(--spacing) * 3);\\n  }\\n  .p-4 {\\n    padding: calc(var(--spacing) * 4);\\n  }\\n  .p-6 {\\n    padding: calc(var(--spacing) * 6);\\n  }\\n  .px-0 {\\n    padding-inline: calc(var(--spacing) * 0);\\n  }\\n  .px-2 {\\n    padding-inline: calc(var(--spacing) * 2);\\n  }\\n  .px-3 {\\n    padding-inline: calc(var(--spacing) * 3);\\n  }\\n  .px-4 {\\n    padding-inline: calc(var(--spacing) * 4);\\n  }\\n  .px-6 {\\n    padding-inline: calc(var(--spacing) * 6);\\n  }\\n  .px-8 {\\n    padding-inline: calc(var(--spacing) * 8);\\n  }\\n  .py-0 {\\n    padding-block: calc(var(--spacing) * 0);\\n  }\\n  .py-0\\\\.5 {\\n    padding-block: calc(var(--spacing) * 0.5);\\n  }\\n  .py-1 {\\n    padding-block: calc(var(--spacing) * 1);\\n  }\\n  .py-2 {\\n    padding-block: calc(var(--spacing) * 2);\\n  }\\n  .py-3 {\\n    padding-block: calc(var(--spacing) * 3);\\n  }\\n  .py-4 {\\n    padding-block: calc(var(--spacing) * 4);\\n  }\\n  .py-5 {\\n    padding-block: calc(var(--spacing) * 5);\\n  }\\n  .py-6 {\\n    padding-block: calc(var(--spacing) * 6);\\n  }\\n  .py-8 {\\n    padding-block: calc(var(--spacing) * 8);\\n  }\\n  .pt-1 {\\n    padding-top: calc(var(--spacing) * 1);\\n  }\\n  .pt-2 {\\n    padding-top: calc(var(--spacing) * 2);\\n  }\\n  .pt-4 {\\n    padding-top: calc(var(--spacing) * 4);\\n  }\\n  .pr-2 {\\n    padding-right: calc(var(--spacing) * 2);\\n  }\\n  .pr-4 {\\n    padding-right: calc(var(--spacing) * 4);\\n  }\\n  .pb-0 {\\n    padding-bottom: calc(var(--spacing) * 0);\\n  }\\n  .pb-1 {\\n    padding-bottom: calc(var(--spacing) * 1);\\n  }\\n  .pb-3 {\\n    padding-bottom: calc(var(--spacing) * 3);\\n  }\\n  .pb-4 {\\n    padding-bottom: calc(var(--spacing) * 4);\\n  }\\n  .pl-4 {\\n    padding-left: calc(var(--spacing) * 4);\\n  }\\n  .text-center {\\n    text-align: center;\\n  }\\n  .text-left {\\n    text-align: left;\\n  }\\n  .text-right {\\n    text-align: right;\\n  }\\n  .\\\\!font-nexus-primary {\\n    font-family: var(--font-nexus-primary) !important;\\n  }\\n  .font-nexus-primary {\\n    font-family: var(--font-nexus-primary);\\n  }\\n  .text-2xl {\\n    font-size: var(--text-2xl);\\n    line-height: var(--tw-leading, var(--text-2xl--line-height));\\n  }\\n  .text-base {\\n    font-size: var(--text-base);\\n    line-height: var(--tw-leading, var(--text-base--line-height));\\n  }\\n  .text-lg {\\n    font-size: var(--text-lg);\\n    line-height: var(--tw-leading, var(--text-lg--line-height));\\n  }\\n  .text-sm {\\n    font-size: var(--text-sm);\\n    line-height: var(--tw-leading, var(--text-sm--line-height));\\n  }\\n  .text-xl {\\n    font-size: var(--text-xl);\\n    line-height: var(--tw-leading, var(--text-xl--line-height));\\n  }\\n  .text-xs {\\n    font-size: var(--text-xs);\\n    line-height: var(--tw-leading, var(--text-xs--line-height));\\n  }\\n  .text-\\\\[8px\\\\] {\\n    font-size: 8px;\\n  }\\n  .text-\\\\[10px\\\\] {\\n    font-size: 10px;\\n  }\\n  .text-\\\\[16px\\\\] {\\n    font-size: 16px;\\n  }\\n  .text-\\\\[32px\\\\] {\\n    font-size: 32px;\\n  }\\n  .leading-0 {\\n    --tw-leading: calc(var(--spacing) * 0);\\n    line-height: calc(var(--spacing) * 0);\\n  }\\n  .leading-6 {\\n    --tw-leading: calc(var(--spacing) * 6);\\n    line-height: calc(var(--spacing) * 6);\\n  }\\n  .leading-\\\\[18px\\\\] {\\n    --tw-leading: 18px;\\n    line-height: 18px;\\n  }\\n  .leading-\\\\[22px\\\\] {\\n    --tw-leading: 22px;\\n    line-height: 22px;\\n  }\\n  .leading-none {\\n    --tw-leading: 1;\\n    line-height: 1;\\n  }\\n  .leading-normal {\\n    --tw-leading: var(--leading-normal);\\n    line-height: var(--leading-normal);\\n  }\\n  .font-bold {\\n    --tw-font-weight: var(--font-weight-bold);\\n    font-weight: var(--font-weight-bold);\\n  }\\n  .font-medium {\\n    --tw-font-weight: var(--font-weight-medium);\\n    font-weight: var(--font-weight-medium);\\n  }\\n  .font-normal {\\n    --tw-font-weight: var(--font-weight-normal);\\n    font-weight: var(--font-weight-normal);\\n  }\\n  .font-semibold {\\n    --tw-font-weight: var(--font-weight-semibold);\\n    font-weight: var(--font-weight-semibold);\\n  }\\n  .tracking-tight {\\n    --tw-tracking: var(--tracking-tight);\\n    letter-spacing: var(--tracking-tight);\\n  }\\n  .tracking-tighter {\\n    --tw-tracking: var(--tracking-tighter);\\n    letter-spacing: var(--tracking-tighter);\\n  }\\n  .text-balance {\\n    text-wrap: balance;\\n  }\\n  .text-ellipsis {\\n    text-overflow: ellipsis;\\n  }\\n  .whitespace-nowrap {\\n    white-space: nowrap;\\n  }\\n  .text-\\\\[\\\\#4C4C4C\\\\] {\\n    color: #4C4C4C;\\n  }\\n  .text-\\\\[\\\\#C03C54\\\\] {\\n    color: #C03C54;\\n  }\\n  .text-blue-500 {\\n    color: var(--color-blue-500);\\n  }\\n  .text-blue-600 {\\n    color: var(--color-blue-600);\\n  }\\n  .text-gray-600 {\\n    color: var(--color-gray-600);\\n  }\\n  .text-green-600 {\\n    color: var(--color-green-600);\\n  }\\n  .text-green-800 {\\n    color: var(--color-green-800);\\n  }\\n  .text-nexus-accent {\\n    color: var(--color-nexus-accent);\\n  }\\n  .text-nexus-accent-green {\\n    color: var(--color-nexus-accent-green);\\n  }\\n  .text-nexus-black {\\n    color: var(--color-nexus-black);\\n  }\\n  .text-nexus-black\\\\/40 {\\n    color: var(--color-nexus-black);\\n    @supports (color: color-mix(in lab, red, red)) {\\n      color: color-mix(in oklab, var(--color-nexus-black) 40%, transparent);\\n    }\\n  }\\n  .text-nexus-destructive-foreground {\\n    color: var(--color-nexus-destructive-foreground);\\n  }\\n  .text-nexus-footer-text {\\n    color: var(--color-nexus-footer-text);\\n  }\\n  .text-nexus-foreground {\\n    color: var(--color-nexus-foreground);\\n  }\\n  .text-nexus-muted {\\n    color: var(--color-nexus-muted);\\n  }\\n  .text-nexus-muted-foreground {\\n    color: var(--color-nexus-muted-foreground);\\n  }\\n  .text-nexus-muted-secondary {\\n    color: var(--color-nexus-muted-secondary);\\n  }\\n  .text-nexus-primary {\\n    color: var(--color-nexus-primary);\\n  }\\n  .text-nexus-primary-foreground {\\n    color: var(--color-nexus-primary-foreground);\\n  }\\n  .text-nexus-secondary {\\n    color: var(--color-nexus-secondary);\\n  }\\n  .text-nexus-secondary-foreground {\\n    color: var(--color-nexus-secondary-foreground);\\n  }\\n  .text-nexus-snow-white {\\n    color: var(--color-nexus-snow-white);\\n  }\\n  .text-purple-600 {\\n    color: var(--color-purple-600);\\n  }\\n  .text-red-600 {\\n    color: var(--color-red-600);\\n  }\\n  .text-stone-500 {\\n    color: var(--color-stone-500);\\n  }\\n  .text-white {\\n    color: var(--color-white);\\n  }\\n  .capitalize {\\n    text-transform: capitalize;\\n  }\\n  .uppercase {\\n    text-transform: uppercase;\\n  }\\n  .underline {\\n    text-decoration-line: underline;\\n  }\\n  .underline-offset-3 {\\n    text-underline-offset: 3px;\\n  }\\n  .underline-offset-4 {\\n    text-underline-offset: 4px;\\n  }\\n  .opacity-10 {\\n    opacity: 10%;\\n  }\\n  .opacity-20 {\\n    opacity: 20%;\\n  }\\n  .opacity-50 {\\n    opacity: 50%;\\n  }\\n  .\\\\!mix-blend-screen {\\n    mix-blend-mode: screen !important;\\n  }\\n  .\\\\!shadow-\\\\[0px_4\\\\.37px_24px_-17\\\\.479px_rgba\\\\(0\\\\,0\\\\,0\\\\,0\\\\.10\\\\)\\\\] {\\n    --tw-shadow: 0px 4.37px 24px -17.479px var(--tw-shadow-color, rgba(0,0,0,0.10)) !important;\\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow) !important;\\n  }\\n  .shadow-card {\\n    --tw-shadow: 0 4px 24px var(--tw-shadow-color, rgb(0 0 0 / 0.1));\\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\\n  }\\n  .shadow-lg {\\n    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));\\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\\n  }\\n  .shadow-md {\\n    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));\\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\\n  }\\n  .shadow-sm {\\n    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));\\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\\n  }\\n  .shadow-xl {\\n    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));\\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\\n  }\\n  .ring-offset-nexus-ring-offset {\\n    --tw-ring-offset-color: var(--color-nexus-ring-offset);\\n  }\\n  .outline {\\n    outline-style: var(--tw-outline-style);\\n    outline-width: 1px;\\n  }\\n  .filter {\\n    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);\\n  }\\n  .backdrop-blur-2xl {\\n    --tw-backdrop-blur: blur(var(--blur-2xl));\\n    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);\\n  }\\n  .backdrop-blur-\\\\[4px\\\\] {\\n    --tw-backdrop-blur: blur(4px);\\n    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);\\n  }\\n  .backdrop-blur-\\\\[48px\\\\] {\\n    --tw-backdrop-blur: blur(48px);\\n    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);\\n  }\\n  .transition {\\n    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;\\n    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));\\n    transition-duration: var(--tw-duration, var(--default-transition-duration));\\n  }\\n  .transition-\\\\[color\\\\,box-shadow\\\\] {\\n    transition-property: color,box-shadow;\\n    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));\\n    transition-duration: var(--tw-duration, var(--default-transition-duration));\\n  }\\n  .transition-all {\\n    transition-property: all;\\n    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));\\n    transition-duration: var(--tw-duration, var(--default-transition-duration));\\n  }\\n  .transition-colors {\\n    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;\\n    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));\\n    transition-duration: var(--tw-duration, var(--default-transition-duration));\\n  }\\n  .duration-200 {\\n    --tw-duration: 200ms;\\n    transition-duration: 200ms;\\n  }\\n  .duration-500 {\\n    --tw-duration: 500ms;\\n    transition-duration: 500ms;\\n  }\\n  .ease-out {\\n    --tw-ease: var(--ease-out);\\n    transition-timing-function: var(--ease-out);\\n  }\\n  .outline-none {\\n    --tw-outline-style: none;\\n    outline-style: none;\\n  }\\n  .\\\\[--shadow-color\\\\:var\\\\(--color-neutral-500\\\\)\\\\] {\\n    --shadow-color: var(--color-neutral-500);\\n  }\\n  .peer-disabled\\\\:cursor-not-allowed {\\n    &:is(:where(.peer):disabled ~ *) {\\n      cursor: not-allowed;\\n    }\\n  }\\n  .peer-disabled\\\\:opacity-70 {\\n    &:is(:where(.peer):disabled ~ *) {\\n      opacity: 70%;\\n    }\\n  }\\n  .selection\\\\:text-nexus-primary-foreground {\\n    & *::-moz-selection {\\n      color: var(--color-nexus-primary-foreground);\\n    }\\n    & *::selection {\\n      color: var(--color-nexus-primary-foreground);\\n    }\\n    &::-moz-selection {\\n      color: var(--color-nexus-primary-foreground);\\n    }\\n    &::selection {\\n      color: var(--color-nexus-primary-foreground);\\n    }\\n  }\\n  .file\\\\:inline-flex {\\n    &::file-selector-button {\\n      display: inline-flex;\\n    }\\n  }\\n  .file\\\\:h-7 {\\n    &::file-selector-button {\\n      height: calc(var(--spacing) * 7);\\n    }\\n  }\\n  .file\\\\:border-0 {\\n    &::file-selector-button {\\n      border-style: var(--tw-border-style);\\n      border-width: 0px;\\n    }\\n  }\\n  .file\\\\:bg-transparent {\\n    &::file-selector-button {\\n      background-color: transparent;\\n    }\\n  }\\n  .file\\\\:text-sm {\\n    &::file-selector-button {\\n      font-size: var(--text-sm);\\n      line-height: var(--tw-leading, var(--text-sm--line-height));\\n    }\\n  }\\n  .file\\\\:font-medium {\\n    &::file-selector-button {\\n      --tw-font-weight: var(--font-weight-medium);\\n      font-weight: var(--font-weight-medium);\\n    }\\n  }\\n  .file\\\\:text-nexus-foreground {\\n    &::file-selector-button {\\n      color: var(--color-nexus-foreground);\\n    }\\n  }\\n  .placeholder\\\\:font-nexus-primary {\\n    &::-moz-placeholder {\\n      font-family: var(--font-nexus-primary);\\n    }\\n    &::placeholder {\\n      font-family: var(--font-nexus-primary);\\n    }\\n  }\\n  .placeholder\\\\:text-nexus-muted-foreground {\\n    &::-moz-placeholder {\\n      color: var(--color-nexus-muted-foreground);\\n    }\\n    &::placeholder {\\n      color: var(--color-nexus-muted-foreground);\\n    }\\n  }\\n  .placeholder\\\\:text-nexus-muted-secondary {\\n    &::-moz-placeholder {\\n      color: var(--color-nexus-muted-secondary);\\n    }\\n    &::placeholder {\\n      color: var(--color-nexus-muted-secondary);\\n    }\\n  }\\n  .last\\\\:border-none {\\n    &:last-child {\\n      --tw-border-style: none;\\n      border-style: none;\\n    }\\n  }\\n  .last\\\\:pb-0 {\\n    &:last-child {\\n      padding-bottom: calc(var(--spacing) * 0);\\n    }\\n  }\\n  .hover\\\\:border-nexus-primary {\\n    &:hover {\\n      @media (hover: hover) {\\n        border-color: var(--color-nexus-primary);\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-blue-600 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-blue-600);\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-gray-100 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-gray-100);\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-nexus-accent {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-nexus-accent);\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-nexus-accent-green\\\\/10 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-nexus-accent-green);\\n        @supports (color: color-mix(in lab, red, red)) {\\n          background-color: color-mix(in oklab, var(--color-nexus-accent-green) 10%, transparent);\\n        }\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-nexus-blue\\\\/90 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-nexus-blue);\\n        @supports (color: color-mix(in lab, red, red)) {\\n          background-color: color-mix(in oklab, var(--color-nexus-blue) 90%, transparent);\\n        }\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-nexus-destructive\\\\/90 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-nexus-destructive);\\n        @supports (color: color-mix(in lab, red, red)) {\\n          background-color: color-mix(in oklab, var(--color-nexus-destructive) 90%, transparent);\\n        }\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-nexus-primary\\\\/90 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-nexus-primary);\\n        @supports (color: color-mix(in lab, red, red)) {\\n          background-color: color-mix(in oklab, var(--color-nexus-primary) 90%, transparent);\\n        }\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-nexus-secondary\\\\/80 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-nexus-secondary);\\n        @supports (color: color-mix(in lab, red, red)) {\\n          background-color: color-mix(in oklab, var(--color-nexus-secondary) 80%, transparent);\\n        }\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-zinc-200 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-zinc-200);\\n      }\\n    }\\n  }\\n  .hover\\\\:bg-zinc-700 {\\n    &:hover {\\n      @media (hover: hover) {\\n        background-color: var(--color-zinc-700);\\n      }\\n    }\\n  }\\n  .hover\\\\:text-nexus-accent-foreground {\\n    &:hover {\\n      @media (hover: hover) {\\n        color: var(--color-nexus-accent-foreground);\\n      }\\n    }\\n  }\\n  .hover\\\\:text-nexus-foreground {\\n    &:hover {\\n      @media (hover: hover) {\\n        color: var(--color-nexus-foreground);\\n      }\\n    }\\n  }\\n  .hover\\\\:text-nexus-muted-secondary {\\n    &:hover {\\n      @media (hover: hover) {\\n        color: var(--color-nexus-muted-secondary);\\n      }\\n    }\\n  }\\n  .hover\\\\:text-zinc-700 {\\n    &:hover {\\n      @media (hover: hover) {\\n        color: var(--color-zinc-700);\\n      }\\n    }\\n  }\\n  .hover\\\\:underline {\\n    &:hover {\\n      @media (hover: hover) {\\n        text-decoration-line: underline;\\n      }\\n    }\\n  }\\n  .hover\\\\:not-even\\\\:bg-gray-700 {\\n    &:hover {\\n      @media (hover: hover) {\\n        &:not(*:nth-child(even)) {\\n          background-color: var(--color-gray-700);\\n        }\\n      }\\n    }\\n  }\\n  .focus\\\\:border-red-500 {\\n    &:focus {\\n      border-color: var(--color-red-500);\\n    }\\n  }\\n  .focus-visible\\\\:ring-2 {\\n    &:focus-visible {\\n      --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);\\n      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\\n    }\\n  }\\n  .focus-visible\\\\:ring-nexus-ring {\\n    &:focus-visible {\\n      --tw-ring-color: var(--color-nexus-ring);\\n    }\\n  }\\n  .focus-visible\\\\:ring-offset-2 {\\n    &:focus-visible {\\n      --tw-ring-offset-width: 2px;\\n      --tw-ring-offset-shadow: var(--tw-ring-inset,) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\\n    }\\n  }\\n  .focus-visible\\\\:outline-none {\\n    &:focus-visible {\\n      --tw-outline-style: none;\\n      outline-style: none;\\n    }\\n  }\\n  .disabled\\\\:pointer-events-none {\\n    &:disabled {\\n      pointer-events: none;\\n    }\\n  }\\n  .disabled\\\\:cursor-not-allowed {\\n    &:disabled {\\n      cursor: not-allowed;\\n    }\\n  }\\n  .disabled\\\\:opacity-50 {\\n    &:disabled {\\n      opacity: 50%;\\n    }\\n  }\\n  .aria-invalid\\\\:border-nexus-destructive {\\n    &[aria-invalid=\\\"true\\\"] {\\n      border-color: var(--color-nexus-destructive);\\n    }\\n  }\\n  .aria-invalid\\\\:ring-nexus-destructive\\\\/20 {\\n    &[aria-invalid=\\\"true\\\"] {\\n      --tw-ring-color: var(--color-nexus-destructive);\\n      @supports (color: color-mix(in lab, red, red)) {\\n        --tw-ring-color: color-mix(in oklab, var(--color-nexus-destructive) 20%, transparent);\\n      }\\n    }\\n  }\\n  .data-\\\\[state\\\\=closed\\\\]\\\\:animate-out {\\n    &[data-state=\\\"closed\\\"] {\\n      animation: var(--animate-out);\\n    }\\n  }\\n  .data-\\\\[state\\\\=open\\\\]\\\\:animate-in {\\n    &[data-state=\\\"open\\\"] {\\n      animation: var(--animate-in);\\n    }\\n  }\\n  .sm\\\\:flex-row {\\n    @media (width >= 40rem) {\\n      flex-direction: row;\\n    }\\n  }\\n  .sm\\\\:justify-end {\\n    @media (width >= 40rem) {\\n      justify-content: flex-end;\\n    }\\n  }\\n  .sm\\\\:space-x-2 {\\n    @media (width >= 40rem) {\\n      :where(& > :not(:last-child)) {\\n        --tw-space-x-reverse: 0;\\n        margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));\\n        margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));\\n      }\\n    }\\n  }\\n  .dark\\\\:\\\\[--shadow-color\\\\:var\\\\(--color-neutral-100\\\\)\\\\] {\\n    @media (prefers-color-scheme: dark) {\\n      --shadow-color: var(--color-neutral-100);\\n    }\\n  }\\n  .dark\\\\:aria-invalid\\\\:ring-nexus-destructive\\\\/40 {\\n    @media (prefers-color-scheme: dark) {\\n      &[aria-invalid=\\\"true\\\"] {\\n        --tw-ring-color: var(--color-nexus-destructive);\\n        @supports (color: color-mix(in lab, red, red)) {\\n          --tw-ring-color: color-mix(in oklab, var(--color-nexus-destructive) 40%, transparent);\\n        }\\n      }\\n    }\\n  }\\n}\\n:root {\\n  --nexus-color-white: #ffffff;\\n  --nexus-color-gray: #eff0f2;\\n  --nexus-color-snow-white: #fafafa;\\n  --nexus-color-black: #000000;\\n  --nexus-color-background: #f4f6f8;\\n  --nexus-color-foreground: #1b1b1b;\\n  --nexus-color-primary: #1b1b1b;\\n  --nexus-color-primary-hover: #2b2b2b;\\n  --nexus-color-primary-foreground: #ffffff;\\n  --nexus-color-secondary: #565a60;\\n  --nexus-color-secondary-foreground: #ffffff;\\n  --nexus-color-secondary-background: #bed8ee66;\\n  --nexus-color-muted: #808080;\\n  --nexus-color-muted-secondary: #666666;\\n  --nexus-color-muted-foreground: #565a60;\\n  --nexus-color-accent: #0375d8;\\n  --nexus-color-accent-green: #6b9826;\\n  --nexus-color-accent-foreground: #ffffff;\\n  --nexus-color-border: #e5e7e9;\\n  --nexus-color-border-secondary: #425c72;\\n  --nexus-color-input: #b3b3b3;\\n  --nexus-color-ring: #2b80d7;\\n  --nexus-color-destructive: #ef4444;\\n  --nexus-color-destructive-secondary: #c03c54;\\n  --nexus-color-destructive-foreground: #ffffff;\\n  --nexus-color-card: #ffffff;\\n  --nexus-color-card-foreground: #1b1b1b;\\n  --nexus-color-success-base: #78c47b;\\n  --nexus-color-neutral-50: #f4f6f8;\\n  --nexus-color-neutral-100: #e8eaf0;\\n  --nexus-color-neutral-200: #e5e7e9;\\n  --nexus-color-brand-footer: #bed8ee;\\n  --nexus-color-brand-footer-text: #4c4c4c;\\n  --nexus-backdrop: #0e0e0e66;\\n  --nexus-blue: #0375d8;\\n  --nexus-success: #78c47b;\\n  --nexus-footer: rgb(190 216 238 / 0.4);\\n  --nexus-footer-text: rgb(76 76 76);\\n  --nexus-font-primary: 'PP Mori', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\\n  --nexus-font-secondary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\\n  --nexus-radius-sm: 4px;\\n  --nexus-radius-md: 8px;\\n  --nexus-radius-lg: 12px;\\n  --nexus-radius-xl: 16px;\\n  --nexus-radius-full: 9999px;\\n}\\n@keyframes fade-in {\\n  from {\\n    opacity: 0;\\n  }\\n  to {\\n    opacity: 1;\\n  }\\n}\\n@keyframes slide-up {\\n  from {\\n    transform: translateY(10px);\\n    opacity: 0;\\n  }\\n  to {\\n    transform: translateY(0);\\n    opacity: 1;\\n  }\\n}\\n@keyframes slide-down {\\n  from {\\n    transform: translateY(-10px);\\n    opacity: 0;\\n  }\\n  to {\\n    transform: translateY(0);\\n    opacity: 1;\\n  }\\n}\\n@keyframes fade-out-scale {\\n  0% {\\n    transform: scale(0.8);\\n    opacity: 0.8;\\n  }\\n  50% {\\n    transform: scale(1.2);\\n    opacity: 0.4;\\n  }\\n  100% {\\n    transform: scale(1.5);\\n    opacity: 0;\\n  }\\n}\\n@keyframes in {\\n  from {\\n    opacity: 0;\\n    transform: scale(0.95);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n}\\n@keyframes out {\\n  from {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n  to {\\n    opacity: 0;\\n    transform: scale(0.95);\\n  }\\n}\\n@keyframes fade-in-0 {\\n  from {\\n    opacity: 0;\\n  }\\n  to {\\n    opacity: 1;\\n  }\\n}\\n@keyframes fade-out-0 {\\n  from {\\n    opacity: 1;\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n@keyframes zoom-in-95 {\\n  from {\\n    transform: scale(0.95);\\n  }\\n  to {\\n    transform: scale(1);\\n  }\\n}\\n@keyframes zoom-out-95 {\\n  from {\\n    transform: scale(1);\\n  }\\n  to {\\n    transform: scale(0.95);\\n  }\\n}\\n.no-scrollbar {\\n  overflow-y: scroll;\\n  scrollbar-width: none;\\n  -ms-overflow-style: none;\\n}\\n.no-scrollbar::-webkit-scrollbar {\\n  width: 0;\\n  height: 0;\\n}\\n@property --tw-translate-x {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0;\\n}\\n@property --tw-translate-y {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0;\\n}\\n@property --tw-translate-z {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0;\\n}\\n@property --tw-rotate-x {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-rotate-y {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-rotate-z {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-skew-x {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-skew-y {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-space-y-reverse {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0;\\n}\\n@property --tw-space-x-reverse {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0;\\n}\\n@property --tw-border-style {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: solid;\\n}\\n@property --tw-gradient-position {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-gradient-from {\\n  syntax: \\\"<color>\\\";\\n  inherits: false;\\n  initial-value: #0000;\\n}\\n@property --tw-gradient-via {\\n  syntax: \\\"<color>\\\";\\n  inherits: false;\\n  initial-value: #0000;\\n}\\n@property --tw-gradient-to {\\n  syntax: \\\"<color>\\\";\\n  inherits: false;\\n  initial-value: #0000;\\n}\\n@property --tw-gradient-stops {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-gradient-via-stops {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-gradient-from-position {\\n  syntax: \\\"<length-percentage>\\\";\\n  inherits: false;\\n  initial-value: 0%;\\n}\\n@property --tw-gradient-via-position {\\n  syntax: \\\"<length-percentage>\\\";\\n  inherits: false;\\n  initial-value: 50%;\\n}\\n@property --tw-gradient-to-position {\\n  syntax: \\\"<length-percentage>\\\";\\n  inherits: false;\\n  initial-value: 100%;\\n}\\n@property --tw-leading {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-font-weight {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-tracking {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-shadow {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0 0 #0000;\\n}\\n@property --tw-shadow-color {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-shadow-alpha {\\n  syntax: \\\"<percentage>\\\";\\n  inherits: false;\\n  initial-value: 100%;\\n}\\n@property --tw-inset-shadow {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0 0 #0000;\\n}\\n@property --tw-inset-shadow-color {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-inset-shadow-alpha {\\n  syntax: \\\"<percentage>\\\";\\n  inherits: false;\\n  initial-value: 100%;\\n}\\n@property --tw-ring-color {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-ring-shadow {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0 0 #0000;\\n}\\n@property --tw-inset-ring-color {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-inset-ring-shadow {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0 0 #0000;\\n}\\n@property --tw-ring-inset {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-ring-offset-width {\\n  syntax: \\\"<length>\\\";\\n  inherits: false;\\n  initial-value: 0px;\\n}\\n@property --tw-ring-offset-color {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: #fff;\\n}\\n@property --tw-ring-offset-shadow {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: 0 0 #0000;\\n}\\n@property --tw-outline-style {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n  initial-value: solid;\\n}\\n@property --tw-blur {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-brightness {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-contrast {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-grayscale {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-hue-rotate {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-invert {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-opacity {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-saturate {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-sepia {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-drop-shadow {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-drop-shadow-color {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-drop-shadow-alpha {\\n  syntax: \\\"<percentage>\\\";\\n  inherits: false;\\n  initial-value: 100%;\\n}\\n@property --tw-drop-shadow-size {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-blur {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-brightness {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-contrast {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-grayscale {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-hue-rotate {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-invert {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-opacity {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-saturate {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-backdrop-sepia {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-duration {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@property --tw-ease {\\n  syntax: \\\"*\\\";\\n  inherits: false;\\n}\\n@keyframes pulse {\\n  50% {\\n    opacity: 0.5;\\n  }\\n}\\n@layer properties {\\n  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {\\n    *, ::before, ::after, ::backdrop {\\n      --tw-translate-x: 0;\\n      --tw-translate-y: 0;\\n      --tw-translate-z: 0;\\n      --tw-rotate-x: initial;\\n      --tw-rotate-y: initial;\\n      --tw-rotate-z: initial;\\n      --tw-skew-x: initial;\\n      --tw-skew-y: initial;\\n      --tw-space-y-reverse: 0;\\n      --tw-space-x-reverse: 0;\\n      --tw-border-style: solid;\\n      --tw-gradient-position: initial;\\n      --tw-gradient-from: #0000;\\n      --tw-gradient-via: #0000;\\n      --tw-gradient-to: #0000;\\n      --tw-gradient-stops: initial;\\n      --tw-gradient-via-stops: initial;\\n      --tw-gradient-from-position: 0%;\\n      --tw-gradient-via-position: 50%;\\n      --tw-gradient-to-position: 100%;\\n      --tw-leading: initial;\\n      --tw-font-weight: initial;\\n      --tw-tracking: initial;\\n      --tw-shadow: 0 0 #0000;\\n      --tw-shadow-color: initial;\\n      --tw-shadow-alpha: 100%;\\n      --tw-inset-shadow: 0 0 #0000;\\n      --tw-inset-shadow-color: initial;\\n      --tw-inset-shadow-alpha: 100%;\\n      --tw-ring-color: initial;\\n      --tw-ring-shadow: 0 0 #0000;\\n      --tw-inset-ring-color: initial;\\n      --tw-inset-ring-shadow: 0 0 #0000;\\n      --tw-ring-inset: initial;\\n      --tw-ring-offset-width: 0px;\\n      --tw-ring-offset-color: #fff;\\n      --tw-ring-offset-shadow: 0 0 #0000;\\n      --tw-outline-style: solid;\\n      --tw-blur: initial;\\n      --tw-brightness: initial;\\n      --tw-contrast: initial;\\n      --tw-grayscale: initial;\\n      --tw-hue-rotate: initial;\\n      --tw-invert: initial;\\n      --tw-opacity: initial;\\n      --tw-saturate: initial;\\n      --tw-sepia: initial;\\n      --tw-drop-shadow: initial;\\n      --tw-drop-shadow-color: initial;\\n      --tw-drop-shadow-alpha: 100%;\\n      --tw-drop-shadow-size: initial;\\n      --tw-backdrop-blur: initial;\\n      --tw-backdrop-brightness: initial;\\n      --tw-backdrop-contrast: initial;\\n      --tw-backdrop-grayscale: initial;\\n      --tw-backdrop-hue-rotate: initial;\\n      --tw-backdrop-invert: initial;\\n      --tw-backdrop-opacity: initial;\\n      --tw-backdrop-saturate: initial;\\n      --tw-backdrop-sepia: initial;\\n      --tw-duration: initial;\\n      --tw-ease: initial;\\n    }\\n  }\\n}\\n\";\nstyleInject(css_248z);\n\nvar SwapMode;\n(function (SwapMode) {\n    SwapMode[SwapMode[\"EXACT_IN\"] = 0] = \"EXACT_IN\";\n    SwapMode[SwapMode[\"EXACT_OUT\"] = 1] = \"EXACT_OUT\";\n})(SwapMode || (SwapMode = {}));\nconst CaliburSBCTypes = {\n    BatchedCall: [\n        { name: 'calls', type: 'Call[]' },\n        { name: 'revertOnFailure', type: 'bool' },\n    ],\n    Call: [\n        { name: 'to', type: 'address' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n    ],\n    SignedBatchedCall: [\n        { name: 'batchedCall', type: 'BatchedCall' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'keyHash', type: 'bytes32' },\n        { name: 'executor', type: 'address' },\n        { name: 'deadline', type: 'uint256' },\n    ],\n};\n\nconst SUPPORTED_CHAINS = {\n    // Mainnet chains\n    ETHEREUM: 1,\n    BASE: 8453,\n    ARBITRUM: 42161,\n    OPTIMISM: 10,\n    POLYGON: 137,\n    AVALANCHE: 43114,\n    SCROLL: 534352,\n    SOPHON: 50104,\n    KAIA: 8217,\n    BNB: 56,\n    HYPEREVM: 999,\n    // Testnet chains\n    SEPOLIA: 11155111,\n    BASE_SEPOLIA: 84532,\n    ARBITRUM_SEPOLIA: 421614,\n    OPTIMISM_SEPOLIA: 11155420,\n    POLYGON_AMOY: 80002,\n    MONAD_TESTNET: 10143,\n};\nconst BASE_TOKEN_METADATA = {\n    ETH: {\n        symbol: 'ETH',\n        name: 'Ethereum',\n        decimals: 18,\n        icon: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png?1696501628',\n        coingeckoId: 'ethereum',\n        isNative: true,\n    },\n    USDT: {\n        symbol: 'USDT',\n        name: 'Tether USD',\n        decimals: 6,\n        icon: 'https://coin-images.coingecko.com/coins/images/35023/large/USDT.png',\n        coingeckoId: 'tether',\n    },\n    USDC: {\n        symbol: 'USDC',\n        name: 'USD Coin',\n        decimals: 6,\n        icon: 'https://coin-images.coingecko.com/coins/images/6319/large/usdc.png?1696506694',\n        coingeckoId: 'usd-coin',\n    },\n};\nconst TOKEN_METADATA = BASE_TOKEN_METADATA;\nconst TESTNET_TOKEN_METADATA = {\n    ETH: { ...BASE_TOKEN_METADATA.ETH, name: 'Test Ethereum' },\n    USDT: { ...BASE_TOKEN_METADATA.USDT, name: 'Test Tether USD' },\n    USDC: { ...BASE_TOKEN_METADATA.USDC, name: 'Test USD Coin' },\n};\nconst CHAIN_METADATA = {\n    // Mainnet chains\n    [SUPPORTED_CHAINS.ETHEREUM]: {\n        id: 1,\n        name: 'Ethereum',\n        shortName: 'eth',\n        logo: 'https://assets.coingecko.com/coins/images/279/small/ethereum.png',\n        nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://eth.merkle.io'],\n        blockExplorerUrls: ['https://etherscan.io'],\n    },\n    [SUPPORTED_CHAINS.BASE]: {\n        id: 8453,\n        name: 'Base',\n        shortName: 'base',\n        logo: 'https://pbs.twimg.com/profile_images/1945608199500910592/rnk6ixxH_400x400.jpg',\n        nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://mainnet.base.org'],\n        blockExplorerUrls: ['https://basescan.org'],\n    },\n    [SUPPORTED_CHAINS.ARBITRUM]: {\n        id: 42161,\n        name: 'Arbitrum One',\n        shortName: 'arb1',\n        logo: 'https://assets.coingecko.com/coins/images/16547/small/photo_2023-03-29_21.47.00.jpeg',\n        nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: [\n            'https://arb-mainnet.g.alchemy.com/v2/PfaswrKq0rjOrfYWHfE9uLQKhiD4JCdq',\n            'https://arbitrum.blockpi.network/v1/rpc/a8ccd43cdc840c2b2d20c24a058514a21302376d',\n        ],\n        blockExplorerUrls: ['https://arbiscan.io'],\n    },\n    [SUPPORTED_CHAINS.OPTIMISM]: {\n        id: 10,\n        name: 'Optimism',\n        shortName: 'oeth',\n        logo: 'https://assets.coingecko.com/coins/images/25244/small/Optimism.png',\n        nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://mainnet.optimism.io'],\n        blockExplorerUrls: ['https://optimistic.etherscan.io'],\n    },\n    [SUPPORTED_CHAINS.POLYGON]: {\n        id: 137,\n        name: 'Polygon',\n        shortName: 'matic',\n        logo: 'https://assets.coingecko.com/coins/images/4713/small/polygon.png',\n        nativeCurrency: { name: 'MATIC', symbol: 'MATIC', decimals: 18 },\n        rpcUrls: ['https://polygon-rpc.com'],\n        blockExplorerUrls: ['https://polygonscan.com'],\n    },\n    [SUPPORTED_CHAINS.AVALANCHE]: {\n        id: 43114,\n        name: 'Avalanche',\n        shortName: 'avax',\n        logo: 'https://assets.coingecko.com/coins/images/12559/small/Avalanche_Circle_RedWhite_Trans.png',\n        nativeCurrency: { name: 'Avalanche', symbol: 'AVAX', decimals: 18 },\n        rpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],\n        blockExplorerUrls: ['https://snowtrace.io'],\n    },\n    [SUPPORTED_CHAINS.SCROLL]: {\n        id: 534352,\n        name: 'Scroll',\n        shortName: 'scroll',\n        logo: 'https://assets.coingecko.com/coins/images/50571/standard/scroll.jpg?1728376125',\n        nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://rpc.scroll.io'],\n        blockExplorerUrls: ['https://scrollscan.com'],\n    },\n    [SUPPORTED_CHAINS.SOPHON]: {\n        id: 50104,\n        name: 'Sophon',\n        shortName: 'sophon',\n        logo: 'https://assets.coingecko.com/coins/images/38680/large/sophon_logo_200.png',\n        nativeCurrency: { name: 'Sophon', symbol: 'SOPH', decimals: 18 },\n        rpcUrls: ['https://rpc.sophon.xyz'],\n        blockExplorerUrls: ['https://explorer.sophon.xyz'],\n    },\n    [SUPPORTED_CHAINS.KAIA]: {\n        id: 8217,\n        name: 'Kaia Mainnet',\n        shortName: 'kaia',\n        logo: 'https://assets.coingecko.com/asset_platforms/images/9672/large/kaia.png',\n        nativeCurrency: { name: 'Kaia', symbol: 'KAIA', decimals: 18 },\n        rpcUrls: ['https://public-en.node.kaia.io'],\n        blockExplorerUrls: ['https://kaiascan.io'],\n    },\n    [SUPPORTED_CHAINS.BNB]: {\n        id: 56,\n        name: 'BNB Smart Chain',\n        shortName: 'bnb',\n        logo: 'https://assets.coingecko.com/asset_platforms/images/1/large/bnb_smart_chain.png',\n        nativeCurrency: { name: 'BNB', symbol: 'BNB', decimals: 18 },\n        rpcUrls: ['https://bsc-pokt.nodies.app'],\n        blockExplorerUrls: ['https://bscscan.com'],\n    },\n    [SUPPORTED_CHAINS.HYPEREVM]: {\n        id: 999,\n        name: 'Hyperliquid EVM',\n        shortName: 'hyperliquid',\n        logo: 'https://assets.coingecko.com/asset_platforms/images/243/large/hyperliquid.png',\n        nativeCurrency: { name: 'HYPE', symbol: 'HYPE', decimals: 18 },\n        rpcUrls: ['https://rpc.hyperliquid.xyz/evm'],\n        blockExplorerUrls: ['https://hyperevmscan.io/'],\n    },\n    // Testnet chains\n    [SUPPORTED_CHAINS.SEPOLIA]: {\n        id: 11155111,\n        name: 'Sepolia',\n        shortName: 'sepolia',\n        logo: 'https://assets.coingecko.com/coins/images/13383/large/ethereum.png',\n        nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://sepolia.drpc.org'],\n        blockExplorerUrls: ['https://sepolia.etherscan.io'],\n    },\n    [SUPPORTED_CHAINS.BASE_SEPOLIA]: {\n        id: 84532,\n        name: 'Base Sepolia',\n        shortName: 'base-sepolia',\n        logo: 'https://pbs.twimg.com/profile_images/1945608199500910592/rnk6ixxH_400x400.jpg',\n        nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://sepolia.base.org'],\n        blockExplorerUrls: ['https://sepolia.basescan.org'],\n    },\n    [SUPPORTED_CHAINS.MONAD_TESTNET]: {\n        id: 10143,\n        name: 'Monad Testnet',\n        shortName: 'monad-testnet',\n        logo: 'https://assets.coingecko.com/coins/images/38927/standard/monad.jpg',\n        nativeCurrency: { name: 'Testnet MON Token', symbol: 'MON', decimals: 18 },\n        rpcUrls: ['https://testnet-rpc.monad.xyz/'],\n        blockExplorerUrls: ['https://testnet.monadexplorer.com/'],\n    },\n    [SUPPORTED_CHAINS.ARBITRUM_SEPOLIA]: {\n        id: 421614,\n        name: 'Arbitrum Sepolia',\n        shortName: 'arb-sepolia',\n        logo: 'https://assets.coingecko.com/coins/images/16547/small/photo_2023-03-29_21.47.00.jpeg',\n        nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://sepolia-rollup.arbitrum.io/rpc'],\n        blockExplorerUrls: ['https://sepolia.arbiscan.io'],\n    },\n    [SUPPORTED_CHAINS.OPTIMISM_SEPOLIA]: {\n        id: 11155420,\n        name: 'Optimism Sepolia',\n        shortName: 'op-sepolia',\n        logo: 'https://assets.coingecko.com/coins/images/25244/small/Optimism.png',\n        nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n        rpcUrls: ['https://sepolia.optimism.io'],\n        blockExplorerUrls: ['https://sepolia-optimism.etherscan.io'],\n    },\n    [SUPPORTED_CHAINS.POLYGON_AMOY]: {\n        id: 80002,\n        name: 'Polygon Amoy',\n        shortName: 'amoy',\n        logo: 'https://assets.coingecko.com/coins/images/4713/small/polygon.png',\n        nativeCurrency: { name: 'MATIC', symbol: 'MATIC', decimals: 18 },\n        rpcUrls: ['https://rpc-amoy.polygon.technology'],\n        blockExplorerUrls: ['https://amoy.polygonscan.com'],\n    },\n};\n// Event name constants to prevent typos\nconst NEXUS_EVENTS = {\n    STEP_COMPLETE: 'step_complete',\n    EXPECTED_STEPS: 'expected_steps',\n    SWAP_STEPS: 'swap_step',\n    // Modular event names\n    BRIDGE_EXECUTE_EXPECTED_STEPS: 'bridge_execute_expected_steps',\n    BRIDGE_EXECUTE_COMPLETED_STEPS: 'bridge_execute_completed_steps',\n};\n// Helper constants for mainnet and testnet chain categorization\nconst MAINNET_CHAINS = [\n    SUPPORTED_CHAINS.ETHEREUM,\n    SUPPORTED_CHAINS.BASE,\n    SUPPORTED_CHAINS.ARBITRUM,\n    SUPPORTED_CHAINS.OPTIMISM,\n    SUPPORTED_CHAINS.POLYGON,\n    SUPPORTED_CHAINS.AVALANCHE,\n    SUPPORTED_CHAINS.SCROLL,\n    SUPPORTED_CHAINS.SOPHON,\n    SUPPORTED_CHAINS.KAIA,\n    SUPPORTED_CHAINS.BNB,\n    SUPPORTED_CHAINS.HYPEREVM,\n];\nconst TESTNET_CHAINS = [\n    SUPPORTED_CHAINS.SEPOLIA,\n    SUPPORTED_CHAINS.BASE_SEPOLIA,\n    SUPPORTED_CHAINS.ARBITRUM_SEPOLIA,\n    SUPPORTED_CHAINS.OPTIMISM_SEPOLIA,\n    SUPPORTED_CHAINS.POLYGON_AMOY,\n    SUPPORTED_CHAINS.MONAD_TESTNET,\n];\n/**\n * Token contract addresses per chain\n * This registry contains the contract addresses for supported tokens across different chains\n */\nconst TOKEN_CONTRACT_ADDRESSES = {\n    USDC: {\n        [SUPPORTED_CHAINS.ETHEREUM]: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        [SUPPORTED_CHAINS.BASE]: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',\n        [SUPPORTED_CHAINS.POLYGON]: '0x3c499c542cef5e3811e1192ce70d8cc03d5c3359',\n        [SUPPORTED_CHAINS.ARBITRUM]: '0xaf88d065e77c8cc2239327c5edb3a432268e5831',\n        [SUPPORTED_CHAINS.SOPHON]: '0x9aa0f72392b5784ad86c6f3e899bcc053d00db4f',\n        [SUPPORTED_CHAINS.OPTIMISM]: '0x0b2c639c533813f4aa9d7837caf62653d097ff85',\n        [SUPPORTED_CHAINS.SCROLL]: '0x06efdbff2a14a7c8e15944d1f4a48f9f95f663a4',\n        [SUPPORTED_CHAINS.AVALANCHE]: '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e',\n        [SUPPORTED_CHAINS.BNB]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n        // testnet chains\n        [SUPPORTED_CHAINS.SEPOLIA]: '0xf08A50178dfcDe18524640EA6618a1f965821715',\n        [SUPPORTED_CHAINS.BASE_SEPOLIA]: '0x036CbD53842c5426634e7929541eC2318f3dCF7e',\n        [SUPPORTED_CHAINS.ARBITRUM_SEPOLIA]: '0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d',\n        [SUPPORTED_CHAINS.OPTIMISM_SEPOLIA]: '0x5fd84259d66Cd46123540766Be93DFE6D43130D7',\n        [SUPPORTED_CHAINS.POLYGON_AMOY]: '0x41E94Eb019C0762f9Bfcf9Fb1E58725BfB0e7582',\n        [SUPPORTED_CHAINS.MONAD_TESTNET]: '0xf817257fed379853cDe0fa4F97AB987181B1E5Ea',\n    },\n    USDT: {\n        [SUPPORTED_CHAINS.ETHEREUM]: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n        [SUPPORTED_CHAINS.POLYGON]: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',\n        [SUPPORTED_CHAINS.ARBITRUM]: '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9',\n        [SUPPORTED_CHAINS.SOPHON]: '0x6386da73545ae4e2b2e0393688fa8b65bb9a7169',\n        [SUPPORTED_CHAINS.KAIA]: '0xd077a400968890eacc75cdc901f0356c943e4fdb',\n        [SUPPORTED_CHAINS.OPTIMISM]: '0x94b008aa00579c1307b0ef2c499ad98a8ce58e58',\n        [SUPPORTED_CHAINS.SCROLL]: '0xf55bec9cafdbe8730f096aa55dad6d22d44099df',\n        [SUPPORTED_CHAINS.AVALANCHE]: '0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7',\n        [SUPPORTED_CHAINS.BNB]: '0x55d398326f99059fF775485246999027B3197955',\n        [SUPPORTED_CHAINS.HYPEREVM]: '0xB8CE59FC3717ada4C02eaDF9682A9e934F625ebb',\n        // testnet chains\n        [SUPPORTED_CHAINS.SEPOLIA]: '0xaA8E23Fb1079EA71e0a56F48a2aA51851D8433D0',\n        [SUPPORTED_CHAINS.BASE_SEPOLIA]: '0xf7e53b20f39a5f8c35005fEf37eef03A7b0d0B5a',\n        [SUPPORTED_CHAINS.ARBITRUM_SEPOLIA]: '0xb9a4873d8d2C22e56b8574e8605644d08E047434',\n        [SUPPORTED_CHAINS.OPTIMISM_SEPOLIA]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\n        [SUPPORTED_CHAINS.POLYGON_AMOY]: '0x2c852e740B62308c46DD29B982FBb650D063Bd07',\n        [SUPPORTED_CHAINS.MONAD_TESTNET]: '0x88b8E2161DEDC77EF4ab7585569D2415a1C1055D',\n    },\n    // ETH is native on all supported chains, no contract address needed\n};\nconst DESTINATION_SWAP_TOKENS = new Map([\n    [\n        SUPPORTED_CHAINS.OPTIMISM,\n        [\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png?1696501628',\n                name: 'Ether',\n                symbol: 'ETH',\n                tokenAddress: '0x0000000000000000000000000000000000000000',\n            },\n            {\n                decimals: 6,\n                logo: 'https://coin-images.coingecko.com/coins/images/6319/large/usdc.png?1696506694',\n                name: 'USD Coin',\n                symbol: 'USDC',\n                tokenAddress: '0x0b2c639c533813f4aa9d7837caf62653d097ff85',\n            },\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/25244/large/Optimism.png?1696524385',\n                name: 'Optimism',\n                symbol: 'OP',\n                tokenAddress: '0x4200000000000000000000000000000000000042',\n            },\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/12645/large/AAVE.png?1696512452',\n                name: 'Aave Token',\n                symbol: 'AAVE',\n                tokenAddress: '0x76fb31fb4af56892a25e32cfc43de717950c9278',\n            },\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/12504/large/uni.jpg?1696512319',\n                name: 'Uniswap',\n                symbol: 'UNI',\n                tokenAddress: '0x6fd9d7ad17242c41f7131d257212c54a0e816691',\n            },\n        ],\n    ],\n    [\n        SUPPORTED_CHAINS.ARBITRUM,\n        [\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/29850/large/pepe-token.jpeg?1696528776',\n                name: 'Pepe',\n                symbol: 'PEPE',\n                tokenAddress: '0x25d887ce7a35172c62febfd67a1856f20faebb00',\n            },\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/13573/large/Lido_DAO.png?1696513326',\n                name: 'Lido DAO Token',\n                symbol: 'LDO',\n                tokenAddress: '0x13ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa60',\n            },\n        ],\n    ],\n    [\n        SUPPORTED_CHAINS.SCROLL,\n        [\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png?1696501628',\n                name: 'Ether',\n                symbol: 'ETH',\n                tokenAddress: '0x0000000000000000000000000000000000000000',\n            },\n        ],\n    ],\n    [\n        SUPPORTED_CHAINS.BASE,\n        [\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/9956/large/Badge_Dai.png?1696509996',\n                name: 'Dai Stablecoin',\n                symbol: 'DAI',\n                tokenAddress: '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb',\n            },\n            {\n                decimals: 18,\n                logo: 'https://coin-images.coingecko.com/coins/images/28206/large/ftxG9_TJ_400x400.jpeg?1696527208',\n                name: 'LayerZero',\n                symbol: 'ZRO',\n                tokenAddress: '0x6985884c4392d348587b19cb9eaaf157f13271cd',\n            },\n            {\n                decimals: 18,\n                logo: 'https://assets.coingecko.com/coins/images/12151/standard/OM_Token.png?1696511991',\n                name: 'MANTRA',\n                symbol: 'OM',\n                tokenAddress: '0x3992b27da26848c2b19cea6fd25ad5568b68ab98',\n            },\n            {\n                decimals: 18,\n                logo: 'https://assets.coingecko.com/coins/images/54411/standard/Qm4DW488_400x400.jpg',\n                name: 'KAITO',\n                symbol: 'KAITO',\n                tokenAddress: '0x98d0baa52b2d063e780de12f615f963fe8537553',\n            },\n        ],\n    ],\n]);\n\nconst LOG_LEVEL = {\n    DEBUG: 1,\n    ERROR: 4,\n    INFO: 2,\n    NOLOGS: 5,\n    WARNING: 3,\n};\nconst setExceptionReporter = (reporter) => {\n    state.exceptionReporter = reporter;\n};\nconst sendException = (msg) => {\n    if (!state.exceptionReporter)\n        return;\n    try {\n        state.exceptionReporter(msg);\n    }\n    catch (reportErr) {\n        console.error('[LOGGER] Exception reporter threw:', reportErr);\n    }\n};\nconst setLogLevel = (level) => {\n    state.logLevel = level;\n};\nconst getLogger = () => {\n    return state.logger;\n};\nclass Logger {\n    constructor() {\n        this.prefix = 'NEXUS_SDK';\n    }\n    consoleLog(level, message, params) {\n        if (level < state.logLevel) {\n            return;\n        }\n        switch (level) {\n            case LOG_LEVEL.DEBUG:\n                console.debug(`[DEBUG]`, message, params);\n                break;\n            case LOG_LEVEL.ERROR:\n                console.error(`[ERROR]`, message, params);\n                break;\n            case LOG_LEVEL.INFO:\n                console.info(`[INFO]`, message, params);\n                break;\n            case LOG_LEVEL.WARNING:\n                console.warn(`[WARN]`, message, params);\n                break;\n            default:\n                console.log(`[LOG]`, message, params);\n        }\n    }\n    debug(message, params = {}) {\n        this.internalLog(LOG_LEVEL.DEBUG, message, params);\n    }\n    error(message, err) {\n        if (err instanceof Error) {\n            this.internalLog(LOG_LEVEL.ERROR, message, err.message);\n            sendException(JSON.stringify({ error: err.message, message }));\n            return;\n        }\n        if (typeof err === 'string') {\n            this.internalLog(LOG_LEVEL.ERROR, message, err);\n            sendException(JSON.stringify({ error: err, message }));\n        }\n        else {\n            this.internalLog(LOG_LEVEL.ERROR, message, undefined);\n            sendException(JSON.stringify({ message }));\n        }\n    }\n    info(message, params = {}) {\n        this.internalLog(LOG_LEVEL.INFO, message, params);\n    }\n    internalLog(level, message, params) {\n        const logMessage = `[${this.prefix}] Msg: ${message}\\n`;\n        this.consoleLog(level, logMessage, params);\n    }\n    warn(message, params = {}) {\n        this.internalLog(LOG_LEVEL.WARNING, message, params);\n    }\n}\nconst state = {\n    exceptionReporter: null,\n    logger: new Logger(),\n    logLevel: LOG_LEVEL.NOLOGS,\n};\n// Export a default logger instance for convenience\nconst logger = getLogger();\n\n/**\n * Shared utility for standardized error message extraction\n */\nfunction extractErrorMessage(error, fallbackContext) {\n    return error instanceof Error ? error.message : `Unknown ${fallbackContext} error`;\n}\nfunction wait(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n/**\n * Get Viem chain configuration for supported chains\n */\nfunction getViemChain(chainId) {\n    switch (chainId) {\n        case 1:\n            return viem_chains__WEBPACK_IMPORTED_MODULE_5__.mainnet;\n        case 137:\n            return viem_chains__WEBPACK_IMPORTED_MODULE_6__.polygon;\n        case 42161:\n            return viem_chains__WEBPACK_IMPORTED_MODULE_7__.arbitrum;\n        case 10:\n            return viem_chains__WEBPACK_IMPORTED_MODULE_8__.optimism;\n        case 8453:\n            return viem_chains__WEBPACK_IMPORTED_MODULE_9__.base;\n        default:\n            // Return a basic chain config for unsupported chains\n            return {\n                id: chainId,\n                name: `Chain ${chainId}`,\n                nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },\n                rpcUrls: {\n                    default: { http: [] },\n                    public: { http: [] },\n                },\n            };\n    }\n}\n/**\n * Format a balance string to a human-readable format using Decimal.js\n */\nfunction formatBalance(balance, decimals, precision = 4) {\n    const balanceDecimal = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](balance);\n    const divisor = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](10).pow(decimals);\n    const formatted = balanceDecimal.div(divisor);\n    if (formatted.isZero())\n        return '0';\n    if (formatted.lt(0.0001))\n        return '< 0.0001';\n    return formatted.toFixed(precision).replace(/\\.?0+$/, '');\n}\n/**\n * Parse units from a human-readable string to wei/smallest unit using Decimal.js\n */\nfunction parseUnits(value, decimals) {\n    const valueDecimal = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](value);\n    const multiplier = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](10).pow(decimals);\n    const result = valueDecimal.mul(multiplier);\n    return BigInt(result.toFixed(0));\n}\n/**\n * Format units from wei/smallest unit to human-readable string using Decimal.js\n */\nfunction formatUnits(value, decimals) {\n    const valueDecimal = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](value.toString());\n    const divisor = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](10).pow(decimals);\n    const result = valueDecimal.div(divisor);\n    return result.toFixed();\n}\n/**\n * Validate if a string is a valid Ethereum address using viem\n */\nfunction isValidAddress(address) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_10__.isAddress)(address);\n}\n/**\n * Get mainnet token metadata by symbol\n */\nconst getMainnetTokenMetadata = (symbol) => {\n    return TOKEN_METADATA[symbol];\n};\n/**\n * Get testnet token metadata by symbol\n */\nconst getTestnetTokenMetadata = (symbol) => {\n    return TESTNET_TOKEN_METADATA[symbol];\n};\n/**\n * Get token metadata by symbol (defaults to mainnet, kept for backward compatibility)\n */\nconst getTokenMetadata = (symbol) => {\n    return TOKEN_METADATA[symbol];\n};\n/**\n * Get chain metadata by chain ID\n */\nfunction getChainMetadata(chainId) {\n    return CHAIN_METADATA[chainId];\n}\n/**\n * Format a mainnet token amount with proper decimals and symbol\n */\nfunction formatTokenAmount(amount, tokenSymbol, precision = 4) {\n    const metadata = getMainnetTokenMetadata(tokenSymbol);\n    if (!metadata)\n        return `${amount} ${tokenSymbol}`;\n    const amountStr = typeof amount === 'bigint' ? amount.toString() : amount;\n    const formatted = formatBalance(amountStr, metadata.decimals, precision);\n    return `${formatted} ${metadata.symbol}`;\n}\n/**\n * Format a testnet token amount with proper decimals and symbol\n */\nfunction formatTestnetTokenAmount(amount, tokenSymbol, precision = 4) {\n    const metadata = getTestnetTokenMetadata(tokenSymbol);\n    if (!metadata)\n        return `${amount} ${tokenSymbol}`;\n    const amountStr = typeof amount === 'bigint' ? amount.toString() : amount;\n    const formatted = formatBalance(amountStr, metadata.decimals, precision);\n    return `${formatted} ${metadata.symbol}`;\n}\n/**\n * Truncate an address for display purposes\n */\nfunction truncateAddress$1(address, startLength = 6, endLength = 4) {\n    if (!isValidAddress(address))\n        return address;\n    if (address.length <= startLength + endLength + 2)\n        return address;\n    return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n}\n/**\n * Convert chain ID to hex format\n */\nfunction chainIdToHex(chainId) {\n    return `0x${chainId.toString(16)}`;\n}\n/**\n * Convert hex chain ID to number\n */\nfunction hexToChainId(hex) {\n    return parseInt(hex, 16);\n}\nconst isMainnetChain = (chainId) => {\n    return MAINNET_CHAINS.includes(chainId);\n};\nconst isTestnetChain = (chainId) => {\n    return TESTNET_CHAINS.includes(chainId);\n};\n/**\n * Enhanced contract parameter validation with detailed error messages\n */\nfunction validateContractParams(params) {\n    const { contractAddress, contractAbi, functionName, functionParams, chainId } = params;\n    // Validate contract address\n    if (!contractAddress || typeof contractAddress !== 'string') {\n        return { isValid: false, error: 'Contract address is required and must be a string' };\n    }\n    if (!(0,viem__WEBPACK_IMPORTED_MODULE_10__.isAddress)(contractAddress)) {\n        return { isValid: false, error: 'Contract address must be a checksummed Ethereum address' };\n    }\n    // Validate ABI\n    if (!Array.isArray(contractAbi) || contractAbi.length === 0) {\n        return { isValid: false, error: 'Contract ABI is required and must be a non-empty array' };\n    }\n    // Validate function name\n    if (!functionName || typeof functionName !== 'string') {\n        return { isValid: false, error: 'Function name is required and must be a string' };\n    }\n    // Find function in ABI\n    const functionAbi = contractAbi.find((item) => item.type === 'function' && item.name === functionName);\n    if (!functionAbi) {\n        return { isValid: false, error: `Function '${functionName}' not found in contract ABI` };\n    }\n    // Validate parameters count\n    const expectedParamsCount = functionAbi.inputs?.length ?? 0;\n    const providedParamsCount = functionParams?.length || 0;\n    if (expectedParamsCount !== providedParamsCount) {\n        return {\n            isValid: false,\n            error: `Function '${functionName}' expects ${expectedParamsCount} parameters, but ${providedParamsCount} were provided`,\n        };\n    }\n    // Validate chain ID\n    if (!chainId || !CHAIN_METADATA[chainId]) {\n        return { isValid: false, error: `Unsupported chain ID: ${chainId}` };\n    }\n    return { isValid: true };\n}\n/**\n * Enhanced contract call encoding with comprehensive error handling\n */\nfunction encodeContractCall(params) {\n    try {\n        const { contractAbi, functionName, functionParams } = params;\n        const data = (0,viem__WEBPACK_IMPORTED_MODULE_11__.encodeFunctionData)({\n            abi: contractAbi,\n            functionName,\n            args: functionParams,\n        });\n        return { success: true, data };\n    }\n    catch (error) {\n        return {\n            success: false,\n            error: `Failed to encode contract call: ${extractErrorMessage(error, 'encoding')}`,\n        };\n    }\n}\n/**\n * Validate and ensure a value is a valid transaction hash\n */\nfunction validateTransactionHash(value) {\n    if (typeof value !== 'string')\n        return false;\n    return (0,viem__WEBPACK_IMPORTED_MODULE_12__.isHash)(value);\n}\n/**\n * Validate hex response from RPC calls\n */\nfunction validateHexResponse(value, fieldName) {\n    if (typeof value !== 'string') {\n        return { isValid: false, error: `${fieldName} must be a string, got ${typeof value}` };\n    }\n    if (!value.startsWith('0x')) {\n        return { isValid: false, error: `${fieldName} must be a hex string starting with 0x` };\n    }\n    return { isValid: true };\n}\n/**\n * Enhanced block explorer URL generation with fallback support\n */\nfunction getBlockExplorerUrl(chainId, txHash) {\n    const chainMetadata = CHAIN_METADATA[chainId];\n    if (!chainMetadata?.blockExplorerUrls?.[0]) {\n        logger.warn(`No block explorer URL found for chain ${chainId}`);\n        return '';\n    }\n    const baseUrl = chainMetadata.blockExplorerUrls[0];\n    return `${baseUrl}/tx/${txHash}`;\n}\n/**\n * Search for transaction hash in block transactions\n */\nasync function searchTransactionInBlock(provider, fromAddress) {\n    const latestBlock = (await provider.request({\n        method: 'eth_getBlockByNumber',\n        params: ['latest', true],\n    }));\n    if (!latestBlock?.transactions)\n        return null;\n    for (const tx of latestBlock.transactions) {\n        if (tx.from?.toLowerCase() === fromAddress.toLowerCase()) {\n            if (validateTransactionHash(tx.hash)) {\n                return tx.hash;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Poll for transaction hash with timeout\n */\nasync function pollForTransactionHash(provider, fromAddress, timeout) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n        const hash = await searchTransactionInBlock(provider, fromAddress);\n        if (hash) {\n            return { success: true, hash };\n        }\n        await wait(2000);\n    }\n    return { success: false, error: 'Transaction hash not found within timeout period' };\n}\n/**\n * Get transaction hash with multiple fallback strategies\n */\nasync function getTransactionHashWithFallback(provider, response, options = {}) {\n    const { enablePolling = false, timeout = 30000, fromAddress } = options;\n    // Strategy 1: Direct response validation\n    if (validateTransactionHash(response)) {\n        return { success: true, hash: response };\n    }\n    // Strategy 2: Transaction polling (if enabled)\n    if (enablePolling && fromAddress) {\n        try {\n            return await pollForTransactionHash(provider, fromAddress, timeout);\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Transaction polling failed: ${extractErrorMessage(error, 'polling')}`,\n            };\n        }\n    }\n    return {\n        success: false,\n        error: `Invalid transaction hash response: ${typeof response}${enablePolling ? ' (polling disabled)' : ''}`,\n    };\n}\n/**\n * Enhanced transaction receipt waiting using Viem\n */\nasync function waitForTransactionReceipt(provider, txHash, options = {}, chainId = 1) {\n    const { timeout = 300000, // 5 minutes default\n    requiredConfirmations = 1, pollingInterval = 2000, } = options;\n    try {\n        const client = (0,viem__WEBPACK_IMPORTED_MODULE_13__.createPublicClient)({\n            chain: getViemChain(chainId),\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_14__.custom)(provider),\n        });\n        // Use Viem's waitForTransactionReceipt with timeout\n        const receipt = await client.waitForTransactionReceipt({\n            hash: txHash,\n            timeout,\n            pollingInterval,\n        });\n        // Check transaction status\n        if (receipt.status === 'reverted') {\n            return {\n                success: false,\n                error: 'Transaction failed (reverted)',\n                receipt,\n            };\n        }\n        // Get current block number for confirmation count\n        const currentBlock = await client.getBlockNumber();\n        const confirmations = Number(currentBlock - receipt.blockNumber) + 1;\n        // Check if we have enough confirmations\n        if (confirmations >= requiredConfirmations) {\n            return {\n                success: true,\n                receipt,\n                confirmations,\n            };\n        }\n        const confirmationStartTime = Date.now();\n        const confirmationTimeout = timeout || 300000;\n        // Wait for additional confirmations if needed\n        while (true) {\n            await wait(pollingInterval);\n            if (Date.now() - confirmationStartTime > confirmationTimeout) {\n                return {\n                    success: false,\n                    error: `Confirmation timeout: only ${confirmations} of ${requiredConfirmations} confirmations received`,\n                    receipt,\n                    confirmations,\n                };\n            }\n            const latestBlock = await client.getBlockNumber();\n            const currentConfirmations = Number(latestBlock - receipt.blockNumber) + 1;\n            if (currentConfirmations >= requiredConfirmations) {\n                return {\n                    success: true,\n                    receipt,\n                    confirmations: currentConfirmations,\n                };\n            }\n        }\n    }\n    catch (error) {\n        const errorMessage = error instanceof Error\n            ? error.message\n            : error?.shortMessage ||\n                error?.message ||\n                'Transaction receipt timeout';\n        return {\n            success: false,\n            error: errorMessage,\n        };\n    }\n}\n/**\n * Utility function to get token contract address for a specific token and chain\n * @param token Token symbol (e.g., 'USDC', 'USDT')\n * @param chainId Chain ID\n * @param isTestnet Whether to use testnet addresses\n * @returns Contract address or undefined if not found\n */\nfunction getTokenContractAddress(token, chainId) {\n    const registry = TOKEN_CONTRACT_ADDRESSES;\n    const address = registry[token]?.[chainId];\n    return address || undefined;\n}\n\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}\n\nconst CLASS_PART_SEPARATOR = '-';\nconst createClassGroupUtils = config => {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  const getClassGroupId = className => {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  };\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  };\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n};\nconst getGroupRecursive = (classParts, classPartObject) => {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))?.classGroupId;\n};\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nconst getGroupIdForArbitraryProperty = className => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n};\n/**\n * Exported for testing only\n */\nconst createClassMap = config => {\n  const {\n    theme,\n    classGroups\n  } = config;\n  const classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  for (const classGroupId in classGroups) {\n    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);\n  }\n  return classMap;\n};\nconst processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach(classDefinition => {\n    if (typeof classDefinition === 'string') {\n      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup]) => {\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n};\nconst getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n};\nconst isThemeGetter = func => func.isThemeGetter;\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nconst createLruCache = maxCacheSize => {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => undefined,\n      set: () => {}\n    };\n  }\n  let cacheSize = 0;\n  let cache = new Map();\n  let previousCache = new Map();\n  const update = (key, value) => {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = new Map();\n    }\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== undefined) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== undefined) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n};\nconst IMPORTANT_MODIFIER = '!';\nconst MODIFIER_SEPARATOR = ':';\nconst MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;\nconst createParseClassName = config => {\n  const {\n    prefix,\n    experimentalParseClassName\n  } = config;\n  /**\n   * Parse class name into parts.\n   *\n   * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS\n   * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n   */\n  let parseClassName = className => {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let parenDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0 && parenDepth === 0) {\n        if (currentCharacter === MODIFIER_SEPARATOR) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + MODIFIER_SEPARATOR_LENGTH;\n          continue;\n        }\n        if (currentCharacter === '/') {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === '[') {\n        bracketDepth++;\n      } else if (currentCharacter === ']') {\n        bracketDepth--;\n      } else if (currentCharacter === '(') {\n        parenDepth++;\n      } else if (currentCharacter === ')') {\n        parenDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);\n    const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (prefix) {\n    const fullPrefix = prefix + MODIFIER_SEPARATOR;\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = className => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {\n      isExternal: true,\n      modifiers: [],\n      hasImportantModifier: false,\n      baseClassName: className,\n      maybePostfixModifierPosition: undefined\n    };\n  }\n  if (experimentalParseClassName) {\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = className => experimentalParseClassName({\n      className,\n      parseClassName: parseClassNameOriginal\n    });\n  }\n  return parseClassName;\n};\nconst stripImportantModifier = baseClassName => {\n  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(0, baseClassName.length - 1);\n  }\n  /**\n   * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.\n   * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864\n   */\n  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(1);\n  }\n  return baseClassName;\n};\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nconst createSortModifiers = config => {\n  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map(modifier => [modifier, true]));\n  const sortModifiers = modifiers => {\n    if (modifiers.length <= 1) {\n      return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach(modifier => {\n      const isPositionSensitive = modifier[0] === '[' || orderSensitiveModifiers[modifier];\n      if (isPositionSensitive) {\n        sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n        unsortedModifiers = [];\n      } else {\n        unsortedModifiers.push(modifier);\n      }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n  };\n  return sortModifiers;\n};\nconst createConfigUtils = config => ({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config),\n  sortModifiers: createSortModifiers(config),\n  ...createClassGroupUtils(config)\n});\nconst SPLIT_CLASSES_REGEX = /\\s+/;\nconst mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds,\n    sortModifiers\n  } = configUtils;\n  /**\n   * Set of classGroupIds in following format:\n   * `{importantModifier}{variantModifiers}{classGroupId}`\n   * @example 'float'\n   * @example 'hover:focus:bg-color'\n   * @example 'md:!pr'\n   */\n  const classGroupsInConflict = [];\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = '';\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\n    const originalClassName = classNames[index];\n    const {\n      isExternal,\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    if (isExternal) {\n      result = originalClassName + (result.length > 0 ? ' ' + result : result);\n      continue;\n    }\n    let hasPostfixModifier = !!maybePostfixModifierPosition;\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        // Not a Tailwind class\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\n        continue;\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        // Not a Tailwind class\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\n        continue;\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(':');\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId)) {\n      // Tailwind class omitted due to conflict\n      continue;\n    }\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i = 0; i < conflictGroups.length; ++i) {\n      const group = conflictGroups[i];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    // Tailwind class not in conflict\n    result = originalClassName + (result.length > 0 ? ' ' + result : result);\n  }\n  return result;\n};\n\n/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\nfunction twJoin() {\n  let index = 0;\n  let argument;\n  let resolvedValue;\n  let string = '';\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nconst toValue = mix => {\n  if (typeof mix === 'string') {\n    return mix;\n  }\n  let resolvedValue;\n  let string = '';\n  for (let k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nconst fromTheme = key => {\n  const themeGetter = theme => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n};\nconst arbitraryValueRegex = /^\\[(?:(\\w[\\w-]*):)?(.+)\\]$/i;\nconst arbitraryVariableRegex = /^\\((?:(\\w[\\w-]*):)?(.+)\\)$/i;\nconst fractionRegex = /^\\d+\\/\\d+$/;\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\\(.+\\)$/;\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nconst isFraction = value => fractionRegex.test(value);\nconst isNumber = value => !!value && !Number.isNaN(Number(value));\nconst isInteger = value => !!value && Number.isInteger(Number(value));\nconst isPercent = value => value.endsWith('%') && isNumber(value.slice(0, -1));\nconst isTshirtSize = value => tshirtUnitRegex.test(value);\nconst isAny = () => true;\nconst isLengthOnly = value =>\n// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n// For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n// I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\nlengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\nconst isNever = () => false;\nconst isShadow = value => shadowRegex.test(value);\nconst isImage = value => imageRegex.test(value);\nconst isAnyNonArbitrary = value => !isArbitraryValue(value) && !isArbitraryVariable(value);\nconst isArbitrarySize = value => getIsArbitraryValue(value, isLabelSize, isNever);\nconst isArbitraryValue = value => arbitraryValueRegex.test(value);\nconst isArbitraryLength = value => getIsArbitraryValue(value, isLabelLength, isLengthOnly);\nconst isArbitraryNumber = value => getIsArbitraryValue(value, isLabelNumber, isNumber);\nconst isArbitraryPosition = value => getIsArbitraryValue(value, isLabelPosition, isNever);\nconst isArbitraryImage = value => getIsArbitraryValue(value, isLabelImage, isImage);\nconst isArbitraryShadow = value => getIsArbitraryValue(value, isLabelShadow, isShadow);\nconst isArbitraryVariable = value => arbitraryVariableRegex.test(value);\nconst isArbitraryVariableLength = value => getIsArbitraryVariable(value, isLabelLength);\nconst isArbitraryVariableFamilyName = value => getIsArbitraryVariable(value, isLabelFamilyName);\nconst isArbitraryVariablePosition = value => getIsArbitraryVariable(value, isLabelPosition);\nconst isArbitraryVariableSize = value => getIsArbitraryVariable(value, isLabelSize);\nconst isArbitraryVariableImage = value => getIsArbitraryVariable(value, isLabelImage);\nconst isArbitraryVariableShadow = value => getIsArbitraryVariable(value, isLabelShadow, true);\n// Helpers\nconst getIsArbitraryValue = (value, testLabel, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n};\nconst getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {\n  const result = arbitraryVariableRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return shouldMatchNoLabel;\n  }\n  return false;\n};\n// Labels\nconst isLabelPosition = label => label === 'position' || label === 'percentage';\nconst isLabelImage = label => label === 'image' || label === 'url';\nconst isLabelSize = label => label === 'length' || label === 'size' || label === 'bg-size';\nconst isLabelLength = label => label === 'length';\nconst isLabelNumber = label => label === 'number';\nconst isLabelFamilyName = label => label === 'family-name';\nconst isLabelShadow = label => label === 'shadow';\nconst getDefaultConfig = () => {\n  /**\n   * Theme getters for theme variable namespaces\n   * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces\n   */\n  /***/\n  const themeColor = fromTheme('color');\n  const themeFont = fromTheme('font');\n  const themeText = fromTheme('text');\n  const themeFontWeight = fromTheme('font-weight');\n  const themeTracking = fromTheme('tracking');\n  const themeLeading = fromTheme('leading');\n  const themeBreakpoint = fromTheme('breakpoint');\n  const themeContainer = fromTheme('container');\n  const themeSpacing = fromTheme('spacing');\n  const themeRadius = fromTheme('radius');\n  const themeShadow = fromTheme('shadow');\n  const themeInsetShadow = fromTheme('inset-shadow');\n  const themeTextShadow = fromTheme('text-shadow');\n  const themeDropShadow = fromTheme('drop-shadow');\n  const themeBlur = fromTheme('blur');\n  const themePerspective = fromTheme('perspective');\n  const themeAspect = fromTheme('aspect');\n  const themeEase = fromTheme('ease');\n  const themeAnimate = fromTheme('animate');\n  /**\n   * Helpers to avoid repeating the same scales\n   *\n   * We use functions that create a new array every time they're called instead of static arrays.\n   * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.\n   */\n  /***/\n  const scaleBreak = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];\n  const scalePosition = () => ['center', 'top', 'bottom', 'left', 'right', 'top-left',\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n  'left-top', 'top-right',\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n  'right-top', 'bottom-right',\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n  'right-bottom', 'bottom-left',\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n  'left-bottom'];\n  const scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue];\n  const scaleOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];\n  const scaleOverscroll = () => ['auto', 'contain', 'none'];\n  const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];\n  const scaleInset = () => [isFraction, 'full', 'auto', ...scaleUnambiguousSpacing()];\n  const scaleGridTemplateColsRows = () => [isInteger, 'none', 'subgrid', isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartAndEnd = () => ['auto', {\n    span: ['full', isInteger, isArbitraryVariable, isArbitraryValue]\n  }, isInteger, isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartOrEnd = () => [isInteger, 'auto', isArbitraryVariable, isArbitraryValue];\n  const scaleGridAutoColsRows = () => ['auto', 'min', 'max', 'fr', isArbitraryVariable, isArbitraryValue];\n  const scaleAlignPrimaryAxis = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch', 'baseline', 'center-safe', 'end-safe'];\n  const scaleAlignSecondaryAxis = () => ['start', 'end', 'center', 'stretch', 'center-safe', 'end-safe'];\n  const scaleMargin = () => ['auto', ...scaleUnambiguousSpacing()];\n  const scaleSizing = () => [isFraction, 'auto', 'full', 'dvw', 'dvh', 'lvw', 'lvh', 'svw', 'svh', 'min', 'max', 'fit', ...scaleUnambiguousSpacing()];\n  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];\n  const scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {\n    position: [isArbitraryVariable, isArbitraryValue]\n  }];\n  const scaleBgRepeat = () => ['no-repeat', {\n    repeat: ['', 'x', 'y', 'space', 'round']\n  }];\n  const scaleBgSize = () => ['auto', 'cover', 'contain', isArbitraryVariableSize, isArbitrarySize, {\n    size: [isArbitraryVariable, isArbitraryValue]\n  }];\n  const scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength];\n  const scaleRadius = () => [\n  // Deprecated since Tailwind CSS v4.0.0\n  '', 'none', 'full', themeRadius, isArbitraryVariable, isArbitraryValue];\n  const scaleBorderWidth = () => ['', isNumber, isArbitraryVariableLength, isArbitraryLength];\n  const scaleLineStyle = () => ['solid', 'dashed', 'dotted', 'double'];\n  const scaleBlendMode = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];\n  const scaleMaskImagePosition = () => [isNumber, isPercent, isArbitraryVariablePosition, isArbitraryPosition];\n  const scaleBlur = () => [\n  // Deprecated since Tailwind CSS v4.0.0\n  '', 'none', themeBlur, isArbitraryVariable, isArbitraryValue];\n  const scaleRotate = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleScale = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleTranslate = () => [isFraction, 'full', ...scaleUnambiguousSpacing()];\n  return {\n    cacheSize: 500,\n    theme: {\n      animate: ['spin', 'ping', 'pulse', 'bounce'],\n      aspect: ['video'],\n      blur: [isTshirtSize],\n      breakpoint: [isTshirtSize],\n      color: [isAny],\n      container: [isTshirtSize],\n      'drop-shadow': [isTshirtSize],\n      ease: ['in', 'out', 'in-out'],\n      font: [isAnyNonArbitrary],\n      'font-weight': ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black'],\n      'inset-shadow': [isTshirtSize],\n      leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose'],\n      perspective: ['dramatic', 'near', 'normal', 'midrange', 'distant', 'none'],\n      radius: [isTshirtSize],\n      shadow: [isTshirtSize],\n      spacing: ['px', isNumber],\n      text: [isTshirtSize],\n      'text-shadow': [isTshirtSize],\n      tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest']\n    },\n    classGroups: {\n      // --------------\n      // --- Layout ---\n      // --------------\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: ['auto', 'square', isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       * @deprecated since Tailwind CSS v4.0.0\n       */\n      container: ['container'],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      'break-after': [{\n        'break-after': scaleBreak()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      'break-before': [{\n        'break-before': scaleBreak()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      'break-inside': [{\n        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      'box-decoration': [{\n        'box-decoration': ['slice', 'clone']\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: ['border', 'content']\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],\n      /**\n       * Screen Reader Only\n       * @see https://tailwindcss.com/docs/display#screen-reader-only\n       */\n      sr: ['sr-only', 'not-sr-only'],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: ['right', 'left', 'none', 'start', 'end']\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: ['left', 'right', 'both', 'none', 'start', 'end']\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: ['isolate', 'isolation-auto'],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      'object-fit': [{\n        object: ['contain', 'cover', 'fill', 'none', 'scale-down']\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      'object-position': [{\n        object: scalePositionWithArbitrary()\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: scaleOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-x': [{\n        'overflow-x': scaleOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-y': [{\n        'overflow-y': scaleOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-x': [{\n        'overscroll-x': scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-y': [{\n        'overscroll-y': scaleOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: scaleInset()\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-x': [{\n        'inset-x': scaleInset()\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-y': [{\n        'inset-y': scaleInset()\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: scaleInset()\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: scaleInset()\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: scaleInset()\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: scaleInset()\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: scaleInset()\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: scaleInset()\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: ['visible', 'invisible', 'collapse'],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [isInteger, 'auto', isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------------\n      // --- Flexbox and Grid ---\n      // ------------------------\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: [isFraction, 'full', 'auto', themeContainer, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      'flex-direction': [{\n        flex: ['row', 'row-reverse', 'col', 'col-reverse']\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      'flex-wrap': [{\n        flex: ['nowrap', 'wrap', 'wrap-reverse']\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [isNumber, isFraction, 'auto', 'initial', 'none', isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [isInteger, 'first', 'last', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      'grid-cols': [{\n        'grid-cols': scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start-end': [{\n        col: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start': [{\n        'col-start': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-end': [{\n        'col-end': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      'grid-rows': [{\n        'grid-rows': scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start-end': [{\n        row: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start': [{\n        'row-start': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-end': [{\n        'row-end': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      'grid-flow': [{\n        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      'auto-cols': [{\n        'auto-cols': scaleGridAutoColsRows()\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      'auto-rows': [{\n        'auto-rows': scaleGridAutoColsRows()\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-x': [{\n        'gap-x': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-y': [{\n        'gap-y': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      'justify-content': [{\n        justify: [...scaleAlignPrimaryAxis(), 'normal']\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      'justify-items': [{\n        'justify-items': [...scaleAlignSecondaryAxis(), 'normal']\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      'justify-self': [{\n        'justify-self': ['auto', ...scaleAlignSecondaryAxis()]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      'align-content': [{\n        content: ['normal', ...scaleAlignPrimaryAxis()]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      'align-items': [{\n        items: [...scaleAlignSecondaryAxis(), {\n          baseline: ['', 'last']\n        }]\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      'align-self': [{\n        self: ['auto', ...scaleAlignSecondaryAxis(), {\n          baseline: ['', 'last']\n        }]\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      'place-content': [{\n        'place-content': scaleAlignPrimaryAxis()\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      'place-items': [{\n        'place-items': [...scaleAlignSecondaryAxis(), 'baseline']\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      'place-self': [{\n        'place-self': ['auto', ...scaleAlignSecondaryAxis()]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: scaleMargin()\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: scaleMargin()\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: scaleMargin()\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: scaleMargin()\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: scaleMargin()\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: scaleMargin()\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: scaleMargin()\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: scaleMargin()\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: scaleMargin()\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-x': [{\n        'space-x': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-x-reverse': ['space-x-reverse'],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-y': [{\n        'space-y': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-y-reverse': ['space-y-reverse'],\n      // --------------\n      // --- Sizing ---\n      // --------------\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\n       */\n      size: [{\n        size: scaleSizing()\n      }],\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [themeContainer, 'screen', ...scaleSizing()]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      'min-w': [{\n        'min-w': [themeContainer, 'screen', /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        'none', ...scaleSizing()]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      'max-w': [{\n        'max-w': [themeContainer, 'screen', 'none', /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        'prose', /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        {\n          screen: [themeBreakpoint]\n        }, ...scaleSizing()]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: ['screen', 'lh', ...scaleSizing()]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      'min-h': [{\n        'min-h': ['screen', 'lh', 'none', ...scaleSizing()]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      'max-h': [{\n        'max-h': ['screen', 'lh', ...scaleSizing()]\n      }],\n      // ------------------\n      // --- Typography ---\n      // ------------------\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      'font-size': [{\n        text: ['base', themeText, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      'font-style': ['italic', 'not-italic'],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      'font-weight': [{\n        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Font Stretch\n       * @see https://tailwindcss.com/docs/font-stretch\n       */\n      'font-stretch': [{\n        'font-stretch': ['ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', isPercent, isArbitraryValue]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      'font-family': [{\n        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-normal': ['normal-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-ordinal': ['ordinal'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-slashed-zero': ['slashed-zero'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-fraction': ['diagonal-fractions', 'stacked-fractions'],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      'line-clamp': [{\n        'line-clamp': [isNumber, 'none', isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [/** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        themeLeading, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      'list-image': [{\n        'list-image': ['none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      'list-style-position': [{\n        list: ['inside', 'outside']\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      'list-style-type': [{\n        list: ['disc', 'decimal', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      'text-alignment': [{\n        text: ['left', 'center', 'right', 'justify', 'start', 'end']\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://v3.tailwindcss.com/docs/placeholder-color\n       */\n      'placeholder-color': [{\n        placeholder: scaleColor()\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      'text-color': [{\n        text: scaleColor()\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      'text-decoration-style': [{\n        decoration: [...scaleLineStyle(), 'wavy']\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      'text-decoration-thickness': [{\n        decoration: [isNumber, 'from-font', 'auto', isArbitraryVariable, isArbitraryLength]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      'text-decoration-color': [{\n        decoration: scaleColor()\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      'underline-offset': [{\n        'underline-offset': [isNumber, 'auto', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      'text-wrap': [{\n        text: ['wrap', 'nowrap', 'balance', 'pretty']\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      'vertical-align': [{\n        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: ['normal', 'words', 'all', 'keep']\n      }],\n      /**\n       * Overflow Wrap\n       * @see https://tailwindcss.com/docs/overflow-wrap\n       */\n      wrap: [{\n        wrap: ['break-word', 'anywhere', 'normal']\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: ['none', 'manual', 'auto']\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: ['none', isArbitraryVariable, isArbitraryValue]\n      }],\n      // -------------------\n      // --- Backgrounds ---\n      // -------------------\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      'bg-attachment': [{\n        bg: ['fixed', 'local', 'scroll']\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      'bg-clip': [{\n        'bg-clip': ['border', 'padding', 'content', 'text']\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      'bg-origin': [{\n        'bg-origin': ['border', 'padding', 'content']\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      'bg-position': [{\n        bg: scaleBgPosition()\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      'bg-repeat': [{\n        bg: scaleBgRepeat()\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      'bg-size': [{\n        bg: scaleBgSize()\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      'bg-image': [{\n        bg: ['none', {\n          linear: [{\n            to: ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']\n          }, isInteger, isArbitraryVariable, isArbitraryValue],\n          radial: ['', isArbitraryVariable, isArbitraryValue],\n          conic: [isInteger, isArbitraryVariable, isArbitraryValue]\n        }, isArbitraryVariableImage, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      'bg-color': [{\n        bg: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from-pos': [{\n        from: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via-pos': [{\n        via: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to-pos': [{\n        to: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from': [{\n        from: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via': [{\n        via: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to': [{\n        to: scaleColor()\n      }],\n      // ---------------\n      // --- Borders ---\n      // ---------------\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: scaleRadius()\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-s': [{\n        'rounded-s': scaleRadius()\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-e': [{\n        'rounded-e': scaleRadius()\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-t': [{\n        'rounded-t': scaleRadius()\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-r': [{\n        'rounded-r': scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-b': [{\n        'rounded-b': scaleRadius()\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-l': [{\n        'rounded-l': scaleRadius()\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ss': [{\n        'rounded-ss': scaleRadius()\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-se': [{\n        'rounded-se': scaleRadius()\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ee': [{\n        'rounded-ee': scaleRadius()\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-es': [{\n        'rounded-es': scaleRadius()\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tl': [{\n        'rounded-tl': scaleRadius()\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tr': [{\n        'rounded-tr': scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-br': [{\n        'rounded-br': scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-bl': [{\n        'rounded-bl': scaleRadius()\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w': [{\n        border: scaleBorderWidth()\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-x': [{\n        'border-x': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-y': [{\n        'border-y': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-s': [{\n        'border-s': scaleBorderWidth()\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-e': [{\n        'border-e': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-t': [{\n        'border-t': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-r': [{\n        'border-r': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-b': [{\n        'border-b': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-l': [{\n        'border-l': scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-x': [{\n        'divide-x': scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-x-reverse': ['divide-x-reverse'],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-y': [{\n        'divide-y': scaleBorderWidth()\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-y-reverse': ['divide-y-reverse'],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      'border-style': [{\n        border: [...scaleLineStyle(), 'hidden', 'none']\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\n       */\n      'divide-style': [{\n        divide: [...scaleLineStyle(), 'hidden', 'none']\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color': [{\n        border: scaleColor()\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-x': [{\n        'border-x': scaleColor()\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-y': [{\n        'border-y': scaleColor()\n      }],\n      /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-s': [{\n        'border-s': scaleColor()\n      }],\n      /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-e': [{\n        'border-e': scaleColor()\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-t': [{\n        'border-t': scaleColor()\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-r': [{\n        'border-r': scaleColor()\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-b': [{\n        'border-b': scaleColor()\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-l': [{\n        'border-l': scaleColor()\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      'divide-color': [{\n        divide: scaleColor()\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      'outline-style': [{\n        outline: [...scaleLineStyle(), 'none', 'hidden']\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      'outline-offset': [{\n        'outline-offset': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      'outline-w': [{\n        outline: ['', isNumber, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      'outline-color': [{\n        outline: scaleColor()\n      }],\n      // ---------------\n      // --- Effects ---\n      // ---------------\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\n        // Deprecated since Tailwind CSS v4.0.0\n        '', 'none', themeShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\n       */\n      'shadow-color': [{\n        shadow: scaleColor()\n      }],\n      /**\n       * Inset Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\n       */\n      'inset-shadow': [{\n        'inset-shadow': ['none', themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Inset Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\n       */\n      'inset-shadow-color': [{\n        'inset-shadow': scaleColor()\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\n       */\n      'ring-w': [{\n        ring: scaleBorderWidth()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      'ring-w-inset': ['ring-inset'],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\n       */\n      'ring-color': [{\n        ring: scaleColor()\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://v3.tailwindcss.com/docs/ring-offset-width\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      'ring-offset-w': [{\n        'ring-offset': [isNumber, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://v3.tailwindcss.com/docs/ring-offset-color\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      'ring-offset-color': [{\n        'ring-offset': scaleColor()\n      }],\n      /**\n       * Inset Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\n       */\n      'inset-ring-w': [{\n        'inset-ring': scaleBorderWidth()\n      }],\n      /**\n       * Inset Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\n       */\n      'inset-ring-color': [{\n        'inset-ring': scaleColor()\n      }],\n      /**\n       * Text Shadow\n       * @see https://tailwindcss.com/docs/text-shadow\n       */\n      'text-shadow': [{\n        'text-shadow': ['none', themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Text Shadow Color\n       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color\n       */\n      'text-shadow-color': [{\n        'text-shadow': scaleColor()\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      'mix-blend': [{\n        'mix-blend': [...scaleBlendMode(), 'plus-darker', 'plus-lighter']\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      'bg-blend': [{\n        'bg-blend': scaleBlendMode()\n      }],\n      /**\n       * Mask Clip\n       * @see https://tailwindcss.com/docs/mask-clip\n       */\n      'mask-clip': [{\n        'mask-clip': ['border', 'padding', 'content', 'fill', 'stroke', 'view']\n      }, 'mask-no-clip'],\n      /**\n       * Mask Composite\n       * @see https://tailwindcss.com/docs/mask-composite\n       */\n      'mask-composite': [{\n        mask: ['add', 'subtract', 'intersect', 'exclude']\n      }],\n      /**\n       * Mask Image\n       * @see https://tailwindcss.com/docs/mask-image\n       */\n      'mask-image-linear-pos': [{\n        'mask-linear': [isNumber]\n      }],\n      'mask-image-linear-from-pos': [{\n        'mask-linear-from': scaleMaskImagePosition()\n      }],\n      'mask-image-linear-to-pos': [{\n        'mask-linear-to': scaleMaskImagePosition()\n      }],\n      'mask-image-linear-from-color': [{\n        'mask-linear-from': scaleColor()\n      }],\n      'mask-image-linear-to-color': [{\n        'mask-linear-to': scaleColor()\n      }],\n      'mask-image-t-from-pos': [{\n        'mask-t-from': scaleMaskImagePosition()\n      }],\n      'mask-image-t-to-pos': [{\n        'mask-t-to': scaleMaskImagePosition()\n      }],\n      'mask-image-t-from-color': [{\n        'mask-t-from': scaleColor()\n      }],\n      'mask-image-t-to-color': [{\n        'mask-t-to': scaleColor()\n      }],\n      'mask-image-r-from-pos': [{\n        'mask-r-from': scaleMaskImagePosition()\n      }],\n      'mask-image-r-to-pos': [{\n        'mask-r-to': scaleMaskImagePosition()\n      }],\n      'mask-image-r-from-color': [{\n        'mask-r-from': scaleColor()\n      }],\n      'mask-image-r-to-color': [{\n        'mask-r-to': scaleColor()\n      }],\n      'mask-image-b-from-pos': [{\n        'mask-b-from': scaleMaskImagePosition()\n      }],\n      'mask-image-b-to-pos': [{\n        'mask-b-to': scaleMaskImagePosition()\n      }],\n      'mask-image-b-from-color': [{\n        'mask-b-from': scaleColor()\n      }],\n      'mask-image-b-to-color': [{\n        'mask-b-to': scaleColor()\n      }],\n      'mask-image-l-from-pos': [{\n        'mask-l-from': scaleMaskImagePosition()\n      }],\n      'mask-image-l-to-pos': [{\n        'mask-l-to': scaleMaskImagePosition()\n      }],\n      'mask-image-l-from-color': [{\n        'mask-l-from': scaleColor()\n      }],\n      'mask-image-l-to-color': [{\n        'mask-l-to': scaleColor()\n      }],\n      'mask-image-x-from-pos': [{\n        'mask-x-from': scaleMaskImagePosition()\n      }],\n      'mask-image-x-to-pos': [{\n        'mask-x-to': scaleMaskImagePosition()\n      }],\n      'mask-image-x-from-color': [{\n        'mask-x-from': scaleColor()\n      }],\n      'mask-image-x-to-color': [{\n        'mask-x-to': scaleColor()\n      }],\n      'mask-image-y-from-pos': [{\n        'mask-y-from': scaleMaskImagePosition()\n      }],\n      'mask-image-y-to-pos': [{\n        'mask-y-to': scaleMaskImagePosition()\n      }],\n      'mask-image-y-from-color': [{\n        'mask-y-from': scaleColor()\n      }],\n      'mask-image-y-to-color': [{\n        'mask-y-to': scaleColor()\n      }],\n      'mask-image-radial': [{\n        'mask-radial': [isArbitraryVariable, isArbitraryValue]\n      }],\n      'mask-image-radial-from-pos': [{\n        'mask-radial-from': scaleMaskImagePosition()\n      }],\n      'mask-image-radial-to-pos': [{\n        'mask-radial-to': scaleMaskImagePosition()\n      }],\n      'mask-image-radial-from-color': [{\n        'mask-radial-from': scaleColor()\n      }],\n      'mask-image-radial-to-color': [{\n        'mask-radial-to': scaleColor()\n      }],\n      'mask-image-radial-shape': [{\n        'mask-radial': ['circle', 'ellipse']\n      }],\n      'mask-image-radial-size': [{\n        'mask-radial': [{\n          closest: ['side', 'corner'],\n          farthest: ['side', 'corner']\n        }]\n      }],\n      'mask-image-radial-pos': [{\n        'mask-radial-at': scalePosition()\n      }],\n      'mask-image-conic-pos': [{\n        'mask-conic': [isNumber]\n      }],\n      'mask-image-conic-from-pos': [{\n        'mask-conic-from': scaleMaskImagePosition()\n      }],\n      'mask-image-conic-to-pos': [{\n        'mask-conic-to': scaleMaskImagePosition()\n      }],\n      'mask-image-conic-from-color': [{\n        'mask-conic-from': scaleColor()\n      }],\n      'mask-image-conic-to-color': [{\n        'mask-conic-to': scaleColor()\n      }],\n      /**\n       * Mask Mode\n       * @see https://tailwindcss.com/docs/mask-mode\n       */\n      'mask-mode': [{\n        mask: ['alpha', 'luminance', 'match']\n      }],\n      /**\n       * Mask Origin\n       * @see https://tailwindcss.com/docs/mask-origin\n       */\n      'mask-origin': [{\n        'mask-origin': ['border', 'padding', 'content', 'fill', 'stroke', 'view']\n      }],\n      /**\n       * Mask Position\n       * @see https://tailwindcss.com/docs/mask-position\n       */\n      'mask-position': [{\n        mask: scaleBgPosition()\n      }],\n      /**\n       * Mask Repeat\n       * @see https://tailwindcss.com/docs/mask-repeat\n       */\n      'mask-repeat': [{\n        mask: scaleBgRepeat()\n      }],\n      /**\n       * Mask Size\n       * @see https://tailwindcss.com/docs/mask-size\n       */\n      'mask-size': [{\n        mask: scaleBgSize()\n      }],\n      /**\n       * Mask Type\n       * @see https://tailwindcss.com/docs/mask-type\n       */\n      'mask-type': [{\n        'mask-type': ['alpha', 'luminance']\n      }],\n      /**\n       * Mask Image\n       * @see https://tailwindcss.com/docs/mask-image\n       */\n      'mask-image': [{\n        mask: ['none', isArbitraryVariable, isArbitraryValue]\n      }],\n      // ---------------\n      // --- Filters ---\n      // ---------------\n      /**\n       * Filter\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\n        // Deprecated since Tailwind CSS v3.0.0\n        '', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: scaleBlur()\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      'drop-shadow': [{\n        'drop-shadow': [\n        // Deprecated since Tailwind CSS v4.0.0\n        '', 'none', themeDropShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Drop Shadow Color\n       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color\n       */\n      'drop-shadow-color': [{\n        'drop-shadow': scaleColor()\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      'hue-rotate': [{\n        'hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Filter\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      'backdrop-filter': [{\n        'backdrop-filter': [\n        // Deprecated since Tailwind CSS v3.0.0\n        '', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      'backdrop-blur': [{\n        'backdrop-blur': scaleBlur()\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      'backdrop-brightness': [{\n        'backdrop-brightness': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      'backdrop-contrast': [{\n        'backdrop-contrast': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      'backdrop-grayscale': [{\n        'backdrop-grayscale': ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      'backdrop-hue-rotate': [{\n        'backdrop-hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      'backdrop-invert': [{\n        'backdrop-invert': ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      'backdrop-opacity': [{\n        'backdrop-opacity': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      'backdrop-saturate': [{\n        'backdrop-saturate': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      'backdrop-sepia': [{\n        'backdrop-sepia': ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      // --------------\n      // --- Tables ---\n      // --------------\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      'border-collapse': [{\n        border: ['collapse', 'separate']\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing': [{\n        'border-spacing': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-x': [{\n        'border-spacing-x': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-y': [{\n        'border-spacing-y': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      'table-layout': [{\n        table: ['auto', 'fixed']\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: ['top', 'bottom']\n      }],\n      // ---------------------------------\n      // --- Transitions and Animation ---\n      // ---------------------------------\n      /**\n       * Transition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: ['', 'all', 'colors', 'opacity', 'shadow', 'transform', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Behavior\n       * @see https://tailwindcss.com/docs/transition-behavior\n       */\n      'transition-behavior': [{\n        transition: ['normal', 'discrete']\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: [isNumber, 'initial', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: ['linear', 'initial', themeEase, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: ['none', themeAnimate, isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------\n      // --- Transforms ---\n      // ------------------\n      /**\n       * Backface Visibility\n       * @see https://tailwindcss.com/docs/backface-visibility\n       */\n      backface: [{\n        backface: ['hidden', 'visible']\n      }],\n      /**\n       * Perspective\n       * @see https://tailwindcss.com/docs/perspective\n       */\n      perspective: [{\n        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Perspective Origin\n       * @see https://tailwindcss.com/docs/perspective-origin\n       */\n      'perspective-origin': [{\n        'perspective-origin': scalePositionWithArbitrary()\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: scaleRotate()\n      }],\n      /**\n       * Rotate X\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      'rotate-x': [{\n        'rotate-x': scaleRotate()\n      }],\n      /**\n       * Rotate Y\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      'rotate-y': [{\n        'rotate-y': scaleRotate()\n      }],\n      /**\n       * Rotate Z\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      'rotate-z': [{\n        'rotate-z': scaleRotate()\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: scaleScale()\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-x': [{\n        'scale-x': scaleScale()\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-y': [{\n        'scale-y': scaleScale()\n      }],\n      /**\n       * Scale Z\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-z': [{\n        'scale-z': scaleScale()\n      }],\n      /**\n       * Scale 3D\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-3d': ['scale-3d'],\n      /**\n       * Skew\n       * @see https://tailwindcss.com/docs/skew\n       */\n      skew: [{\n        skew: scaleSkew()\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-x': [{\n        'skew-x': scaleSkew()\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-y': [{\n        'skew-y': scaleSkew()\n      }],\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [isArbitraryVariable, isArbitraryValue, '', 'none', 'gpu', 'cpu']\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      'transform-origin': [{\n        origin: scalePositionWithArbitrary()\n      }],\n      /**\n       * Transform Style\n       * @see https://tailwindcss.com/docs/transform-style\n       */\n      'transform-style': [{\n        transform: ['3d', 'flat']\n      }],\n      /**\n       * Translate\n       * @see https://tailwindcss.com/docs/translate\n       */\n      translate: [{\n        translate: scaleTranslate()\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-x': [{\n        'translate-x': scaleTranslate()\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-y': [{\n        'translate-y': scaleTranslate()\n      }],\n      /**\n       * Translate Z\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-z': [{\n        'translate-z': scaleTranslate()\n      }],\n      /**\n       * Translate None\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-none': ['translate-none'],\n      // ---------------------\n      // --- Interactivity ---\n      // ---------------------\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: scaleColor()\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: ['none', 'auto']\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      'caret-color': [{\n        caret: scaleColor()\n      }],\n      /**\n       * Color Scheme\n       * @see https://tailwindcss.com/docs/color-scheme\n       */\n      'color-scheme': [{\n        scheme: ['normal', 'dark', 'light', 'light-dark', 'only-dark', 'only-light']\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Field Sizing\n       * @see https://tailwindcss.com/docs/field-sizing\n       */\n      'field-sizing': [{\n        'field-sizing': ['fixed', 'content']\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      'pointer-events': [{\n        'pointer-events': ['auto', 'none']\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: ['none', '', 'y', 'x']\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      'scroll-behavior': [{\n        scroll: ['auto', 'smooth']\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-m': [{\n        'scroll-m': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mx': [{\n        'scroll-mx': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-my': [{\n        'scroll-my': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ms': [{\n        'scroll-ms': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-me': [{\n        'scroll-me': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mt': [{\n        'scroll-mt': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mr': [{\n        'scroll-mr': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mb': [{\n        'scroll-mb': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ml': [{\n        'scroll-ml': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-p': [{\n        'scroll-p': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-px': [{\n        'scroll-px': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-py': [{\n        'scroll-py': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-ps': [{\n        'scroll-ps': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pe': [{\n        'scroll-pe': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pt': [{\n        'scroll-pt': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pr': [{\n        'scroll-pr': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pb': [{\n        'scroll-pb': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pl': [{\n        'scroll-pl': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      'snap-align': [{\n        snap: ['start', 'end', 'center', 'align-none']\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      'snap-stop': [{\n        snap: ['normal', 'always']\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-type': [{\n        snap: ['none', 'x', 'y', 'both']\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-strictness': [{\n        snap: ['mandatory', 'proximity']\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: ['auto', 'none', 'manipulation']\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-x': [{\n        'touch-pan': ['x', 'left', 'right']\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-y': [{\n        'touch-pan': ['y', 'up', 'down']\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-pz': ['touch-pinch-zoom'],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: ['none', 'text', 'all', 'auto']\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      'will-change': [{\n        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryVariable, isArbitraryValue]\n      }],\n      // -----------\n      // --- SVG ---\n      // -----------\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: ['none', ...scaleColor()]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      'stroke-w': [{\n        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: ['none', ...scaleColor()]\n      }],\n      // ---------------------\n      // --- Accessibility ---\n      // ---------------------\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      'forced-color-adjust': [{\n        'forced-color-adjust': ['auto', 'none']\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: ['overflow-x', 'overflow-y'],\n      overscroll: ['overscroll-x', 'overscroll-y'],\n      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n      'inset-x': ['right', 'left'],\n      'inset-y': ['top', 'bottom'],\n      flex: ['basis', 'grow', 'shrink'],\n      gap: ['gap-x', 'gap-y'],\n      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n      px: ['pr', 'pl'],\n      py: ['pt', 'pb'],\n      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n      mx: ['mr', 'ml'],\n      my: ['mt', 'mb'],\n      size: ['w', 'h'],\n      'font-size': ['leading'],\n      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\n      'fvn-ordinal': ['fvn-normal'],\n      'fvn-slashed-zero': ['fvn-normal'],\n      'fvn-figure': ['fvn-normal'],\n      'fvn-spacing': ['fvn-normal'],\n      'fvn-fraction': ['fvn-normal'],\n      'line-clamp': ['display', 'overflow'],\n      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],\n      'rounded-s': ['rounded-ss', 'rounded-es'],\n      'rounded-e': ['rounded-se', 'rounded-ee'],\n      'rounded-t': ['rounded-tl', 'rounded-tr'],\n      'rounded-r': ['rounded-tr', 'rounded-br'],\n      'rounded-b': ['rounded-br', 'rounded-bl'],\n      'rounded-l': ['rounded-tl', 'rounded-bl'],\n      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n      'border-w': ['border-w-x', 'border-w-y', 'border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\n      'border-w-x': ['border-w-r', 'border-w-l'],\n      'border-w-y': ['border-w-t', 'border-w-b'],\n      'border-color': ['border-color-x', 'border-color-y', 'border-color-s', 'border-color-e', 'border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\n      'border-color-x': ['border-color-r', 'border-color-l'],\n      'border-color-y': ['border-color-t', 'border-color-b'],\n      translate: ['translate-x', 'translate-y', 'translate-none'],\n      'translate-none': ['translate', 'translate-x', 'translate-y', 'translate-z'],\n      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\n      'scroll-mx': ['scroll-mr', 'scroll-ml'],\n      'scroll-my': ['scroll-mt', 'scroll-mb'],\n      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\n      'scroll-px': ['scroll-pr', 'scroll-pl'],\n      'scroll-py': ['scroll-pt', 'scroll-pb'],\n      touch: ['touch-x', 'touch-y', 'touch-pz'],\n      'touch-x': ['touch'],\n      'touch-y': ['touch'],\n      'touch-pz': ['touch']\n    },\n    conflictingClassGroupModifiers: {\n      'font-size': ['leading']\n    },\n    orderSensitiveModifiers: ['*', '**', 'after', 'backdrop', 'before', 'details-content', 'file', 'first-letter', 'first-line', 'marker', 'placeholder', 'selection']\n  };\n};\nconst twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);\n\nfunction cn(...inputs) {\n    return twMerge(clsx(inputs));\n}\nconst getButtonText = (status, reviewStatus) => {\n    if (status === 'initializing')\n        return 'Sign';\n    if (status === 'simulation_error')\n        return 'Try Again';\n    if (reviewStatus === 'gathering_input')\n        return 'Start Transaction';\n    if (reviewStatus === 'simulating')\n        return 'Simulating...';\n    if (reviewStatus === 'needs_allowance')\n        return 'Approve and Continue';\n    if (reviewStatus === 'ready')\n        return 'Start Transaction';\n    return 'Continue';\n};\nconst getOperationText = (type) => {\n    switch (type) {\n        case 'bridge':\n            return 'Bridging';\n        case 'transfer':\n            return 'Transferring';\n        case 'bridgeAndExecute':\n            return 'Bridge & Execute';\n        case 'swap':\n            return 'Swapping';\n        default:\n            return 'Processing';\n    }\n};\nconst getStatusText = (stepData, operationType) => {\n    if (!stepData)\n        return 'Verifying Request';\n    const { type } = stepData;\n    const opText = getOperationText(operationType);\n    switch (type) {\n        case 'INTENT_ACCEPTED':\n            return 'Intent Accepted';\n        case 'INTENT_HASH_SIGNED':\n            return 'Signing Transaction';\n        case 'INTENT_SUBMITTED':\n            return 'Submitting Transaction';\n        case 'INTENT_COLLECTION':\n            return 'Collecting Confirmations';\n        case 'INTENT_COLLECTION_COMPLETE':\n            return 'Confirmations Complete';\n        case 'APPROVAL':\n            return 'Approving';\n        case 'TRANSACTION_SENT':\n            return 'Sending Transaction';\n        case 'RECEIPT_RECEIVED':\n            return 'Receipt Received';\n        case 'TRANSACTION_CONFIRMED':\n        case 'INTENT_FULFILLED':\n            return `${opText} Complete`;\n        default:\n            return `Processing ${opText}`;\n    }\n};\n/**\n * Common error patterns and their user-friendly messages\n */\nconst ERROR_PATTERNS = {\n    USER_REJECTED: [\n        /user rejected/i,\n        /user denied/i,\n        /user cancelled/i,\n        /user refused/i,\n        /action_rejected/i,\n        /userRejectedRequest/i,\n        /transaction rejected by user/i,\n        /user rejected transaction/i,\n        /user canceled/i,\n    ],\n    NETWORK_ERROR: [\n        /network error/i,\n        /connection failed/i,\n        /fetch failed/i,\n        /network request failed/i,\n        /rpc error/i,\n        /timeout/i,\n        /backend initialization failed/i,\n        /simulation client error/i,\n    ],\n    INSUFFICIENT_FUNDS: [\n        /insufficient funds/i,\n        /insufficient balance/i,\n        /not enough/i,\n        /exceeds balance/i,\n        /balance too low/i,\n        /you don't have enough/i,\n        /sender doesn't have enough/i,\n        /transfer amount exceeds balance/i,\n        /erc20: transfer amount exceeds balance/i,\n        /erc20.*insufficient/i,\n    ],\n    GAS_ERROR: [\n        /gas required exceeds allowance/i,\n        /out of gas/i,\n        /gas estimation failed/i,\n        /gas limit/i,\n        /intrinsic gas too low/i,\n    ],\n    TRANSACTION_FAILED: [\n        /transaction failed/i,\n        /transaction reverted/i,\n        /execution reverted/i,\n        /transaction underpriced/i,\n        /nonce too low/i,\n        /call exception/i,\n        /transaction was reverted/i,\n        /replacement transaction underpriced/i,\n        /already known/i,\n        /reverted with reason/i,\n        /transaction rejected/i,\n        /transaction not mined within/i,\n    ],\n    ALLOWANCE_ERROR: [\n        /allowance/i,\n        /approval/i,\n        /approve/i,\n        /token approval failed/i,\n        /insufficient allowance/i,\n    ],\n    CONTRACT_ERROR: [\n        /contract/i,\n        /invalid address/i,\n        /abi/i,\n        /function not found/i,\n        /contract execution failed/i,\n    ],\n    CHAIN_ERROR: [\n        /unrecognized chain id/i,\n        /unsupported chain/i,\n        /chain not found/i,\n        /invalid chain/i,\n        /try adding the chain using wallet_addEthereumChain/i,\n        /wrong network/i,\n        /switch to correct network/i,\n    ],\n    INIT_ERROR: [\n        /initialization failed/i,\n        /sdk not initialized/i,\n        /provider not connected/i,\n        /wallet provider not connected/i,\n        /setup failed/i,\n    ],\n    BRIDGE_ERROR: [\n        /bridge failed/i,\n        /bridging error/i,\n        /cross-chain error/i,\n        /bridge transaction failed/i,\n    ],\n    EXECUTE_ERROR: [\n        /execute failed/i,\n        /execution error/i,\n        /execute phase failed/i,\n        /contract execution error/i,\n    ],\n    SWAP_ERROR: [\n        /insufficient funds/i,\n        /insufficient balance/i,\n        /swap failed/i,\n        /swap error/i,\n        /vsc sbc tx/i,\n        /swap transaction failed/i,\n        /slippage/i,\n        /price impact/i,\n        /swap intent failed/i,\n        /swap execution failed/i,\n        /cot not present/i,\n        /chain of trust not present/i,\n    ],\n};\n/**\n * User-friendly error messages\n */\nconst USER_FRIENDLY_MESSAGES = {\n    USER_REJECTED: \"Transaction was cancelled. Please try again when you're ready to proceed.\",\n    NETWORK_ERROR: 'Network connection issue. Please check your internet connection and try again.',\n    INSUFFICIENT_FUNDS: \"You don't have enough balance to complete this transaction.\",\n    GAS_ERROR: 'Transaction fee estimation failed. Please try again or adjust the gas settings.',\n    TRANSACTION_FAILED: 'Transaction failed to execute. This might be a temporary network issue.',\n    ALLOWANCE_ERROR: 'Token approval failed. Please try approving the token again.',\n    CONTRACT_ERROR: 'Smart contract interaction failed. Please try again.',\n    CHAIN_ERROR: 'This network is not added to your wallet. Please add it to continue.',\n    INIT_ERROR: 'Wallet connection issue. Please make sure your wallet is connected and try again.',\n    BRIDGE_ERROR: 'Cross-chain transfer failed. Please try again.',\n    EXECUTE_ERROR: 'Smart contract execution failed. Please try again.',\n    SWAP_ERROR: 'Swap transaction failed. The destination chain may not support this token pair. Please try a different route.',\n    UNKNOWN: 'An unexpected error occurred. Please try again.',\n};\n/**\n * Extract meaningful information from error messages while removing technical details\n */\nfunction cleanErrorMessage(message) {\n    // Remove version and package information\n    message = message.replace(/Version: [^\\s]+/gi, '');\n    message = message.replace(/viem@[^\\s]+/gi, '');\n    message = message.replace(/arcana@[^\\s]+/gi, '');\n    // Remove common error prefixes that create noise\n    message = message.replace(/^Error: /gi, '');\n    message = message.replace(/^RPC Error: /gi, '');\n    // Handle chained error messages - extract the most meaningful part\n    // Pattern: \"Operation failed: Phase failed: Actual error\"\n    const chainedErrorMatch = message.match(/([^:]+operation failed|[^:]+phase failed|[^:]+error):\\s*(.+)/i);\n    if (chainedErrorMatch) {\n        const [, , actualError] = chainedErrorMatch;\n        // If the actual error is meaningful, use it; otherwise keep the chain\n        if (actualError && actualError.length > 10 && !actualError.includes('failed')) {\n            message = actualError.trim();\n        }\n    }\n    // Remove redundant \"failed\" phrases that pile up\n    message = message.replace(/\\b(operation|phase|transaction|execution)\\s+failed:\\s*/gi, '');\n    message = message.replace(/\\bfailed:\\s*/gi, '');\n    // Split by common delimiters and clean up\n    const lines = message.split(/[.\\n]/).filter((line) => line.trim());\n    const uniqueLines = [...new Set(lines.map((line) => line.trim()))];\n    // Take the first meaningful line if we have multiple\n    const meaningfulLine = uniqueLines.find((line) => line.length > 5 &&\n        !line.toLowerCase().includes('operation failed') &&\n        !line.toLowerCase().includes('phase failed')) || uniqueLines[0];\n    return meaningfulLine?.trim() || message.trim();\n}\n/**\n * Determine the error category based on the error message\n */\nfunction categorizeError(errorMessage) {\n    const message = errorMessage.toLowerCase();\n    for (const [category, patterns] of Object.entries(ERROR_PATTERNS)) {\n        if (patterns.some((pattern) => pattern.test(message))) {\n            return category;\n        }\n    }\n    return 'UNKNOWN';\n}\n/**\n * Format error messages to be user-friendly for display in UI components\n *\n * @param error - The error object or string from various sources (viem, Arcana SDK, etc.)\n * @param context - Optional context about where the error occurred (e.g., 'simulation', 'bridge', 'execute')\n * @returns A user-friendly error message\n */\nfunction formatErrorForUI(error, context) {\n    let errorMessage = '';\n    if (error instanceof Error) {\n        errorMessage = error.message;\n    }\n    else if (typeof error === 'string') {\n        errorMessage = error;\n    }\n    else if (error && typeof error === 'object') {\n        // Handle structured error objects\n        const errorObj = error;\n        errorMessage = errorObj.message || errorObj.error || errorObj.details || String(error);\n    }\n    else {\n        errorMessage = String(error);\n    }\n    // Log the original error for developers\n    console.error('Error being formatted for UI:', { error, errorMessage, context });\n    // Handle specific error cases before general categorization\n    if (errorMessage.includes('COT not present') || errorMessage.includes('COT not available')) {\n        return 'This token pair is not supported on the selected destination chain. Please try a different token or destination chain.';\n    }\n    const cleanedMessage = cleanErrorMessage(errorMessage);\n    const category = categorizeError(cleanedMessage);\n    let userFriendlyMessage = USER_FRIENDLY_MESSAGES[category];\n    // For unknown errors, try to provide more meaningful messages\n    if (category === 'UNKNOWN') {\n        // If we have a clean, short message that's readable, use it\n        if (cleanedMessage && cleanedMessage.length < 100 && cleanedMessage.length > 5) {\n            // Check if it looks like a user-friendly error already\n            if (!cleanedMessage.includes('0x') &&\n                !cleanedMessage.includes('viem@') &&\n                !cleanedMessage.includes('Error:')) {\n                return cleanedMessage;\n            }\n        }\n        // Provide context-specific fallback for unknown errors\n        if (context === 'simulation') {\n            return 'Unable to simulate this transaction. Please verify your inputs and try again.';\n        }\n        else if (context === 'transaction') {\n            return 'Transaction could not be completed. Please check your wallet and try again.';\n        }\n        else if (context === 'bridge') {\n            return 'Cross-chain transfer failed. Please check network connectivity and try again.';\n        }\n        else if (context === 'execute') {\n            return 'Smart contract execution failed. Please verify the transaction details.';\n        }\n        // Log unknown errors for debugging\n        console.warn('Unknown error category detected:', {\n            cleanedMessage,\n            originalError: error,\n            context,\n        });\n    }\n    // Add context-specific messaging\n    if (context && category !== 'USER_REJECTED') {\n        const contextualMessage = getContextualErrorMessage(category, context);\n        if (contextualMessage) {\n            return contextualMessage;\n        }\n        return userFriendlyMessage;\n    }\n    return userFriendlyMessage;\n}\n/**\n * Get context-specific error messages for better user experience\n */\nfunction getContextualErrorMessage(category, context) {\n    const contextMap = {\n        simulation: {\n            NETWORK_ERROR: 'Unable to simulate transaction. Please check your connection and try again.',\n            INSUFFICIENT_FUNDS: 'Simulation shows insufficient balance for this transaction.',\n            GAS_ERROR: 'Unable to estimate transaction fees. Please try again.',\n            CONTRACT_ERROR: 'Contract simulation failed. Please verify the contract details.',\n            CHAIN_ERROR: 'Simulation failed due to network issues. Please add the required network.',\n            INIT_ERROR: 'Please connect your wallet to simulate transactions.',\n        },\n        bridge: {\n            NETWORK_ERROR: 'Bridge service is temporarily unavailable. Please try again.',\n            INSUFFICIENT_FUNDS: 'Insufficient balance for cross-chain transfer.',\n            BRIDGE_ERROR: 'Cross-chain transfer failed. Please try again.',\n            CHAIN_ERROR: 'Source or destination network not supported in your wallet.',\n        },\n        execute: {\n            CONTRACT_ERROR: 'Smart contract execution failed. Please verify the contract is correct.',\n            GAS_ERROR: 'Execution failed due to gas issues. Please try again.',\n            EXECUTE_ERROR: 'Contract interaction failed. Please try again.',\n            ALLOWANCE_ERROR: 'Token approval required before execution.',\n        },\n        swap: {\n            NETWORK_ERROR: 'Swap service is temporarily unavailable. Please try again.',\n            INSUFFICIENT_FUNDS: 'Insufficient balance to complete the swap.',\n            SWAP_ERROR: 'Swap failed. Please verify your token selection and amount.',\n            GAS_ERROR: 'Swap failed due to gas issues. Please try again.',\n            CONTRACT_ERROR: 'Swap contract interaction failed. Please try again.',\n            ALLOWANCE_ERROR: 'Token approval required for swap.',\n        },\n        allowance: {\n            ALLOWANCE_ERROR: 'Token approval transaction failed. Please try again.',\n            GAS_ERROR: 'Approval failed due to insufficient gas. Please try again.',\n            CONTRACT_ERROR: 'Token contract approval failed. Please verify the token.',\n        },\n        initialization: {\n            INIT_ERROR: 'Wallet setup failed. Please reconnect your wallet and try again.',\n            NETWORK_ERROR: 'Unable to connect to Nexus services. Please try again.',\n            CHAIN_ERROR: 'Unsupported network. Please switch to a supported network.',\n        },\n    };\n    const contextMessages = contextMap[context];\n    return contextMessages?.[category] || null;\n}\n/**\n * Check if an error is related to an unrecognized chain\n */\nfunction isChainError(error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    return ERROR_PATTERNS.CHAIN_ERROR.some((pattern) => pattern.test(errorMessage));\n}\n/**\n * Format swap-specific error messages for better user experience\n *\n * @param error - The error object or string from swap operations\n * @returns A user-friendly error message specific to swap operations\n */\nfunction formatSwapError(error) {\n    // Use the general error formatter with swap context\n    return formatErrorForUI(error, 'swap');\n}\n/**\n * Extract chain ID from error message\n * Supports both hex (0x...) and decimal formats\n */\nfunction extractChainIdFromError(error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const hexMatch = errorMessage.match(/(?:chain id|chainid)\\s*[\"']?(0x[a-f0-9]+)[\"']?/i);\n    if (hexMatch) {\n        const chainId = parseInt(hexMatch[1], 16);\n        return isNaN(chainId) ? null : chainId;\n    }\n    const decimalMatch = errorMessage.match(/(?:chain id|chainid)\\s*[\"']?(\\d+)[\"']?/i);\n    if (decimalMatch) {\n        const chainId = parseInt(decimalMatch[1], 10);\n        return isNaN(chainId) ? null : chainId;\n    }\n    return null;\n}\n/**\n * Add a chain to the user's wallet using wallet_addEthereumChain\n */\nasync function addChainToWallet(chainId, provider) {\n    const chainMetadata = CHAIN_METADATA[chainId];\n    if (!chainMetadata) {\n        console.error(`Chain metadata not found for chain ID: ${chainId}`);\n        return false;\n    }\n    if (!provider) {\n        console.error('No provider available');\n        return false;\n    }\n    try {\n        await provider.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n                {\n                    chainId: `0x${chainId.toString(16)}`,\n                    chainName: chainMetadata.name,\n                    nativeCurrency: chainMetadata.nativeCurrency,\n                    rpcUrls: chainMetadata.rpcUrls,\n                    blockExplorerUrls: chainMetadata.blockExplorerUrls,\n                    iconUrls: [chainMetadata.logo],\n                },\n            ],\n        });\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to add chain to wallet:', error);\n        return false;\n    }\n}\nconst getContentKey = (status, additionalStates) => {\n    if (['processing', 'success', 'error'].includes(status)) {\n        return 'processor';\n    }\n    if (status === 'set_allowance') {\n        return 'allowance';\n    }\n    if (additionalStates?.includes(status)) {\n        return status;\n    }\n    return 'review';\n};\nconst formatCost = (cost) => {\n    const numCost = parseFloat(cost);\n    if (isNaN(numCost))\n        return 'Invalid';\n    if (numCost < 0)\n        return 'Invalid';\n    if (numCost === 0)\n        return 'Free';\n    if (numCost < 0.001)\n        return '< 0.001';\n    return numCost.toFixed(6);\n};\nfunction truncateAddress(address, startLength = 6, endLength = 4) {\n    if (!(0,viem__WEBPACK_IMPORTED_MODULE_10__.isAddress)(address))\n        return address;\n    if (address.length <= startLength + endLength + 2)\n        return address;\n    return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n}\nconst getModalTitle = (status, modalTitle) => {\n    if (status === 'set_allowance')\n        return 'Approve Token Allowance';\n    return modalTitle;\n};\nconst getPrimaryButtonText = (status, reviewStatus) => {\n    if (status === 'set_allowance')\n        return 'Approve & Continue';\n    return getButtonText(status, reviewStatus);\n};\n/**\n * Safely extract token field from union transaction input data\n */\nfunction getTokenFromInputData(data) {\n    if (!data)\n        return undefined;\n    // For SwapInputData, check fromTokenAddress first, then other fields\n    if ('fromTokenAddress' in data && typeof data.fromTokenAddress === 'string') {\n        return data.fromTokenAddress;\n    }\n    // For SwapConfig, check nested inputs structure\n    if ('inputs' in data && data.inputs) {\n        const inputs = data.inputs;\n        return inputs.inputToken || inputs.fromToken || inputs.token || inputs.fromTokenAddress;\n    }\n    // For other transaction types, access directly\n    if ('token' in data && typeof data.token === 'string') {\n        return data.token;\n    }\n    return undefined;\n}\n/**\n * Safely extract amount field from union transaction input data\n */\nfunction getAmountFromInputData(data) {\n    if (!data)\n        return undefined;\n    // For SwapInputData, check fromAmount first, then amount\n    if ('fromAmount' in data && data.fromAmount !== undefined) {\n        return data.fromAmount;\n    }\n    // For SwapConfig, check nested inputs structure\n    if ('inputs' in data && data.inputs) {\n        const inputs = data.inputs;\n        return inputs.amount || inputs.fromAmount;\n    }\n    // For other transaction types, access directly\n    if ('amount' in data) {\n        return data.amount;\n    }\n    return undefined;\n}\n\nfunction Input({ className, type, ...props }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", { type: type, \"data-slot\": \"input\", className: cn('file:text-nexus-foreground placeholder:text-nexus-muted-foreground  selection:text-nexus-primary-foreground   flex h-12 w-full min-w-0 rounded-nexus-md bg-transparent px-3 py-1 text-base transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 font-nexus-primary', 'aria-invalid:ring-nexus-destructive/20 dark:aria-invalid:ring-nexus-destructive/40 aria-invalid:border-nexus-destructive', className), ...props }));\n}\n\n/**\n * Calculate effective balance based on transaction context\n * - Bridge: Total balance minus destination chain balance\n * - Transfer: Balance available on source chain only\n * - BridgeAndExecute: Total balance minus destination chain balance\n */\nfunction getFiatValue(amount, token, exchangeRates) {\n    const rate = exchangeRates?.[token] ?? 0;\n    const amountNum = Number(amount ?? 0);\n    const approx = Number.isFinite(rate) && Number.isFinite(amountNum) ? rate * amountNum : 0;\n    return `≈ $${approx.toFixed(2)}`;\n}\nconst TOKEN_IMAGE_MAP = {\n    BNB: 'https://assets.coingecko.com/asset_platforms/images/1/large/bnb_smart_chain.png',\n    KAIA: 'https://assets.coingecko.com/asset_platforms/images/9672/large/kaia.png',\n    ETH: 'https://assets.coingecko.com/asset_platforms/images/279/large/ethereum.png?1706606803',\n    USDT: 'https://coin-images.coingecko.com/coins/images/35023/large/USDT.png',\n    POL: 'https://coin-images.coingecko.com/coins/images/32440/standard/polygon.png',\n    USDC: 'https://coin-images.coingecko.com/coins/images/6319/large/usdc.png',\n    AVAX: 'https://assets.coingecko.com/coins/images/12559/standard/Avalanche_Circle_RedWhite_Trans.png',\n    SOPH: 'https://assets.coingecko.com/coins/images/38680/large/sophon_logo_200.png',\n};\n\nfunction AmountInput({ value, disabled = false, onChange, className, placeholder = '0.0', debounceMs = 500, token, }) {\n    const [localValue, setLocalValue] = react__WEBPACK_IMPORTED_MODULE_1__.useState(value || '');\n    const timeoutRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(undefined);\n    const { exchangeRates } = useInternalNexus();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n        setLocalValue(value || '');\n    }, [value]);\n    const validateNumberInput = (input) => {\n        if (input === '')\n            return '';\n        if (input === '.')\n            return '0.';\n        // Remove non-numeric characters except dots\n        let cleaned = input.replace(/[^0-9.]/g, '');\n        // Handle case where input starts with decimal point\n        if (cleaned.startsWith('.')) {\n            cleaned = '0' + cleaned;\n        }\n        // Handle multiple decimal points - keep only the first one\n        const decimalCount = (cleaned.match(/\\./g) || []).length;\n        if (decimalCount > 1) {\n            const firstDecimalIndex = cleaned.indexOf('.');\n            cleaned =\n                cleaned.substring(0, firstDecimalIndex + 1) +\n                    cleaned.substring(firstDecimalIndex + 1).replace(/\\./g, '');\n        }\n        if (cleaned.length > 1 && cleaned.startsWith('0')) {\n            const decimalIndex = cleaned.indexOf('.');\n            if (decimalIndex === -1 || decimalIndex > 1) {\n                cleaned = cleaned.replace(/^0+/, '');\n                if (cleaned === '' || cleaned.startsWith('.')) {\n                    cleaned = '0' + cleaned;\n                }\n            }\n            else if (decimalIndex === 1) {\n                if (cleaned.length > 2 && cleaned.substring(0, 2) === '00') {\n                    cleaned = cleaned.replace(/^0+/, '0');\n                }\n            }\n        }\n        const decimalIndex = cleaned.indexOf('.');\n        if (decimalIndex !== -1 && cleaned.length - decimalIndex > 19) {\n            cleaned = cleaned.substring(0, decimalIndex + 19);\n        }\n        return cleaned;\n    };\n    const handleInputChange = (e) => {\n        const rawValue = e.target.value;\n        const validatedValue = validateNumberInput(rawValue);\n        setLocalValue(validatedValue);\n        if (!onChange)\n            return;\n        if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = setTimeout(() => {\n            if (validatedValue !== value) {\n                onChange(validatedValue);\n            }\n        }, debounceMs);\n    };\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n        return () => {\n            if (timeoutRef.current) {\n                clearTimeout(timeoutRef.current);\n            }\n        };\n    }, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex items-start flex-col gap-y-1 text-left mt-1 w-full', disabled && 'pointer-events-none cursor-not-allowed', className), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center gap-x-1\", children: onChange ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Input, { type: \"text\", value: localValue, onChange: handleInputChange, disabled: disabled, className: \"text-nexus-black text-[32px] font-semibold font-nexus-primary leading-[22px] h-7  outline-none px-0 placeholder:text-nexus-muted-secondary\", placeholder: placeholder, inputMode: \"decimal\", pattern: \"[0-9]*\\\\.?[0-9]*\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-black/40 text-[32px] font-semibold leading-[22px] font-nexus-primary\", children: value ?? 0 })) }), token && value && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-accent-green font-semibold leading-6 text-lg font-nexus-primary\", children: getFiatValue(value, token, exchangeRates) }))] }));\n}\n\nfunction AddressField({ value, onChange, disabled = false, placeholder = '0x...', className, hasValidationError = false, }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('px-4 py-2 rounded-nexus-md border border-nexus-muted-secondary/20 font-semibold flex justify-between items-center', 'bg-transparent h-12', disabled && 'opacity-50 cursor-not-allowed', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center gap-x-1.5 flex-1\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Input, { placeholder: placeholder, value: value, onChange: (e) => onChange?.(e.target.value), disabled: disabled, className: cn('px-0 placeholder:font-nexus-primary text-nexus-black font-semibold text-base', hasValidationError ? 'border-red-500 focus:border-red-500' : '') }) }) }));\n}\n\nfunction Label({ className, htmlFor, ...props }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", { \"data-slot\": \"label\", className: cn('text-sm font-nexus-primary font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', className), htmlFor: htmlFor, ...props }));\n}\n\nfunction FormField({ label, children, helperText, className }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex flex-col gap-1.5 relative', className), children: [label && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Label, { className: \"text-stone-500 text-sm font-normal font-nexus-primary leading-none text-balance\", htmlFor: label, children: label })), children, helperText && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-black text-sm font-normal font-nexus-primary leading-none\", children: helperText }))] }));\n}\n\n// Additional token logos that might not be in TOKEN_METADATA\nconst ADDITIONAL_TOKEN_LOGOS = {\n    WETH: 'https://assets.coingecko.com/coins/images/279/large/ethereum.png?1595348880',\n    USDS: 'https://assets.coingecko.com/coins/images/39926/standard/usds.webp?1726666683',\n    SOPH: 'https://assets.coingecko.com/coins/images/38680/large/sophon_logo_200.png',\n    KAIA: 'https://assets.coingecko.com/asset_platforms/images/9672/large/kaia.png',\n    BNB: 'https://assets.coingecko.com/coins/images/825/large/bnb-icon2_2x.png',\n    // Add ETH as fallback for any ETH-related tokens\n    ETH: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png?1696501628',\n    // Add common token fallbacks\n    POL: 'https://coin-images.coingecko.com/coins/images/32440/standard/polygon.png',\n    AVAX: 'https://assets.coingecko.com/coins/images/12559/standard/Avalanche_Circle_RedWhite_Trans.png',\n    FUEL: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png',\n    HYPE: 'https://assets.coingecko.com/asset_platforms/images/243/large/hyperliquid.png',\n    // Popular swap tokens\n    DAI: 'https://coin-images.coingecko.com/coins/images/9956/large/Badge_Dai.png?1696509996',\n    UNI: 'https://coin-images.coingecko.com/coins/images/12504/large/uni.jpg?1696512319',\n    AAVE: 'https://coin-images.coingecko.com/coins/images/12645/large/AAVE.png?1696512452',\n    LDO: 'https://coin-images.coingecko.com/coins/images/13573/large/Lido_DAO.png?1696513326',\n    PEPE: 'https://coin-images.coingecko.com/coins/images/29850/large/pepe-token.jpeg?1696528776',\n    OP: 'https://coin-images.coingecko.com/coins/images/25244/large/Optimism.png?1696524385',\n    ZRO: 'https://coin-images.coingecko.com/coins/images/28206/large/ftxG9_TJ_400x400.jpeg?1696527208',\n    OM: 'https://assets.coingecko.com/coins/images/12151/standard/OM_Token.png?1696511991',\n    KAITO: 'https://assets.coingecko.com/coins/images/54411/standard/Qm4DW488_400x400.jpg',\n};\nconst ChainIcon = ({ chainId }) => {\n    const chain = Object.values(CHAIN_METADATA).find((c) => c.id.toString() === chainId);\n    const iconUrl = chain?.logo;\n    if (!iconUrl) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-6 h-6 bg-gray-300 rounded-nexus-full\" });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: iconUrl, alt: chainId, className: cn('', chain?.id !== SUPPORTED_CHAINS.BASE && chain?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n            ? 'rounded-nexus-full w-6 h-6'\n            : 'w-5 h-5') }));\n};\nconst TokenIcon = ({ tokenSymbol, iconUrl, className = 'w-6 h-6 rounded-nexus-full', }) => {\n    let finalIconUrl = iconUrl;\n    // Comprehensive icon resolution logic\n    if (!finalIconUrl) {\n        // 1. First check additional token logos (prioritize over TOKEN_METADATA for better icons)\n        finalIconUrl = ADDITIONAL_TOKEN_LOGOS[tokenSymbol];\n        // 2. Then check standard TOKEN_METADATA\n        if (!finalIconUrl) {\n            const standardToken = TOKEN_METADATA[tokenSymbol];\n            finalIconUrl = standardToken?.icon;\n        }\n        // 3. Check destination swap tokens\n        if (!finalIconUrl) {\n            const allDestinationTokens = Array.from(DESTINATION_SWAP_TOKENS.values()).flat();\n            const destinationToken = allDestinationTokens.find((token) => token.symbol === tokenSymbol);\n            finalIconUrl = destinationToken?.logo;\n        }\n        // 4. Special handling for wrapped tokens\n        if (!finalIconUrl && tokenSymbol.startsWith('W') && tokenSymbol.length > 1) {\n            const baseSymbol = tokenSymbol.substring(1); // Remove 'W' prefix\n            finalIconUrl = ADDITIONAL_TOKEN_LOGOS[baseSymbol];\n        }\n        // 5. ETH fallback for any ethereum-related tokens\n        if (!finalIconUrl && (tokenSymbol.includes('ETH') || tokenSymbol === 'WETH')) {\n            finalIconUrl = ADDITIONAL_TOKEN_LOGOS['ETH'];\n        }\n    }\n    // Fallback placeholder with first letter of token symbol\n    if (!finalIconUrl) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center text-gray-600 font-semibold text-xs', className), children: tokenSymbol.charAt(0).toUpperCase() }));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: finalIconUrl, alt: tokenSymbol, className: className });\n};\n\nconst buttonVariants = {\n    default: 'bg-nexus-primary-gray text-nexus-primary-foreground hover:bg-nexus-primary/90',\n    destructive: 'bg-nexus-destructive text-nexus-destructive-foreground hover:bg-nexus-destructive/90',\n    outline: 'border border-nexus-input bg-nexus-background hover:bg-nexus-accent hover:text-nexus-accent-foreground',\n    secondary: 'bg-nexus-secondary text-nexus-secondary-foreground hover:bg-nexus-secondary/80',\n    ghost: 'hover:bg-nexus-accent hover:text-nexus-accent-foreground',\n    link: 'text-nexus-primary underline-offset-4 hover:underline',\n    custom: '',\n};\nconst buttonSizes = {\n    default: 'h-10 px-4 py-2',\n    sm: 'h-9 rounded-nexus-md px-3',\n    lg: 'h-11 rounded-nexus-md px-8',\n    icon: 'h-10 w-10',\n    custom: '',\n};\nconst Button = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, variant = 'default', size = 'default', asChild = false, ...props }, ref) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.button, { ref: ref, \"data-slot\": \"button\", className: cn('inline-flex cursor-pointer items-center justify-center whitespace-nowrap rounded-nexus-md text-sm font-nexus-primary font-medium ring-offset-nexus-ring-offset transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-nexus-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50', buttonVariants[variant], buttonSizes[size], className), whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, transition: {\n            type: 'spring',\n            stiffness: 400,\n            damping: 17,\n        }, ...props }));\n});\nButton.displayName = 'Button';\n\nconst DrawerContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext(null);\nfunction Drawer({ children }) {\n    const [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerContext.Provider, { value: { isOpen, setIsOpen }, children: children });\n}\nfunction DrawerTrigger({ children, className, disabled, ...props }) {\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DrawerContext);\n    if (!context)\n        throw new Error('DrawerTrigger must be used within a Drawer');\n    const { setIsOpen } = context;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('cursor-pointer', className), onClick: () => {\n            if (!disabled)\n                setIsOpen(true);\n        }, ...props, children: children }));\n}\nfunction DrawerContent({ children, className, contentClassName, }) {\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DrawerContext);\n    if (!context)\n        throw new Error('DrawerContent must be used within a Drawer');\n    const { isOpen, setIsOpen } = context;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_16__.AnimatePresence, { children: isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: { duration: 0.2 }, className: \"absolute inset-0 bg-nexus-backdrop backdrop-blur-[4px] z-40 rounded-t-nexus-md\", onClick: () => setIsOpen(false) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { initial: { y: '100%' }, animate: { y: 0 }, exit: { y: '100%' }, transition: {\n                        type: 'spring',\n                        damping: 30,\n                        stiffness: 400,\n                        mass: 0.8,\n                    }, className: cn('absolute bottom-0 left-0 right-0 bg-white rounded-t-xl z-50 max-h-[80%] overflow-hidden flex flex-col shadow-xl', className), style: {\n                        transformOrigin: 'bottom',\n                    }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('flex-1 overflow-y-auto', contentClassName), children: children }) })] })) }));\n}\nfunction DrawerClose({ children, className, ...props }) {\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DrawerContext);\n    if (!context)\n        throw new Error('DrawerClose must be used within a Drawer');\n    const { setIsOpen } = context;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('cursor-pointer', className), onClick: () => setIsOpen(false), ...props, children: children }));\n}\nfunction useDrawerControls() {\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DrawerContext);\n    if (!context)\n        throw new Error('useDrawerControls must be used within a Drawer');\n    return context;\n}\nfunction DrawerHeader({ className, ...props }) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('flex flex-col gap-0.5 text-center', className), ...props });\n}\nfunction DrawerFooter({ className, ...props }) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('mt-auto flex flex-col gap-2 p-4', className), ...props });\n}\nfunction DrawerTitle({ className, ...props }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", { className: cn('text-nexus-foreground font-semibold font-nexus-primary text-lg', className), ...props }));\n}\n// Helper wrapper: closes the drawer when enabled is true\nfunction DrawerAutoClose({ children, enabled, className, }) {\n    const { setIsOpen } = useDrawerControls();\n    if (!enabled)\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('cursor-pointer w-full', className), onClick: (e) => {\n            e.stopPropagation();\n            setIsOpen(false);\n        }, children: children }));\n}\n\nconst LOGO_URLS = {\n    WETH: 'https://assets.coingecko.com/coins/images/279/large/ethereum.png?1595348880',\n    USDS: 'https://assets.coingecko.com/coins/images/39926/standard/usds.webp?1726666683',\n    SOPH: 'https://assets.coingecko.com/coins/images/38680/large/sophon_logo_200.png',\n    KAIA: 'https://assets.coingecko.com/asset_platforms/images/9672/large/kaia.png',\n    BNB: 'https://assets.coingecko.com/coins/images/825/large/bnb-icon2_2x.png',\n    // Add ETH as fallback for any ETH-related tokens\n    ETH: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png?1696501628',\n    // Add common token fallbacks\n    POL: 'https://coin-images.coingecko.com/coins/images/32440/standard/polygon.png',\n    AVAX: 'https://assets.coingecko.com/coins/images/12559/standard/Avalanche_Circle_RedWhite_Trans.png',\n    FUEL: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png',\n    HYPE: 'https://assets.coingecko.com/asset_platforms/images/243/large/hyperliquid.png',\n    // Popular swap tokens\n    DAI: 'https://coin-images.coingecko.com/coins/images/9956/large/Badge_Dai.png?1696509996',\n    UNI: 'https://coin-images.coingecko.com/coins/images/12504/large/uni.jpg?1696512319',\n    AAVE: 'https://coin-images.coingecko.com/coins/images/12645/large/AAVE.png?1696512452',\n    LDO: 'https://coin-images.coingecko.com/coins/images/13573/large/Lido_DAO.png?1696513326',\n    PEPE: 'https://coin-images.coingecko.com/coins/images/29850/large/pepe-token.jpeg?1696528776',\n    OP: 'https://coin-images.coingecko.com/coins/images/25244/large/Optimism.png?1696524385',\n    ZRO: 'https://coin-images.coingecko.com/coins/images/28206/large/ftxG9_TJ_400x400.jpeg?1696527208',\n    OM: 'https://assets.coingecko.com/coins/images/12151/standard/OM_Token.png?1696511991',\n    KAITO: 'https://assets.coingecko.com/coins/images/54411/standard/Qm4DW488_400x400.jpg',\n};\nfunction _processSdkData(sdkData) {\n    if (!sdkData || !Array.isArray(sdkData))\n        return null;\n    const chains = sdkData.map((chain) => ({\n        id: chain.id,\n        name: chain.name,\n        logo: chain.logo,\n    }));\n    const chainTokenMap = new Map();\n    const tokenChainMap = new Map();\n    const allTokens = new Map();\n    for (const chain of sdkData) {\n        const tokenSymbols = [];\n        // Guard against chains that might not have a tokens array\n        for (const token of chain.tokens || []) {\n            // Enhanced logo fallback logic\n            let finalLogo = token.logo;\n            if (!finalLogo) {\n                // First try direct lookup\n                finalLogo = LOGO_URLS[token.symbol];\n                // Handle wrapped tokens\n                if (!finalLogo && token.symbol.startsWith('W') && token.symbol.length > 1) {\n                    const baseSymbol = token.symbol.substring(1);\n                    finalLogo = LOGO_URLS[baseSymbol];\n                }\n                // ETH fallback for ethereum-related tokens\n                if (!finalLogo && (token.symbol.includes('ETH') || token.symbol === 'WETH')) {\n                    finalLogo = LOGO_URLS['ETH'];\n                }\n            }\n            // For native tokens (zero address), ensure they have proper logos\n            if (token.contractAddress === '0x0000000000000000000000000000000000000000') {\n                if (!finalLogo) {\n                    // Use chain-specific native token logos\n                    const nativeTokenLogos = {\n                        137: 'https://coin-images.coingecko.com/coins/images/32440/standard/polygon.png', // POL\n                        43114: 'https://assets.coingecko.com/coins/images/12559/standard/Avalanche_Circle_RedWhite_Trans.png', // AVAX\n                        56: 'https://assets.coingecko.com/coins/images/825/large/bnb-icon2_2x.png', // BNB\n                        8217: 'https://assets.coingecko.com/asset_platforms/images/9672/large/kaia.png', // KAIA\n                        50104: 'https://assets.coingecko.com/coins/images/38680/large/sophon_logo_200.png', // SOPH\n                    };\n                    finalLogo = nativeTokenLogos[chain.id] || '';\n                }\n            }\n            tokenSymbols.push(token.symbol);\n            if (!tokenChainMap.has(token.symbol)) {\n                tokenChainMap.set(token.symbol, []);\n            }\n            tokenChainMap.get(token.symbol).push(chain.id);\n            if (!allTokens.has(token.symbol)) {\n                allTokens.set(token.symbol, {\n                    symbol: token.symbol,\n                    address: token.contractAddress,\n                    decimals: token.decimals,\n                    name: token.name || token.symbol,\n                    logo: finalLogo,\n                });\n            }\n        }\n        chainTokenMap.set(chain.id, tokenSymbols);\n    }\n    return {\n        chains,\n        tokens: Array.from(allTokens.values()),\n        chainTokenMap,\n        tokenChainMap,\n    };\n}\n/**\n * Get base token metadata based on network\n */\nfunction getBaseTokenMetadata(_network = 'mainnet') {\n    return _network === 'testnet' ? TESTNET_TOKEN_METADATA : TOKEN_METADATA;\n}\nconst transactionSupportDataCache = new Map();\n/**\n * Gets and processes support data for a given transaction type from the SDK.\n * This function caches the processed data to avoid redundant calls and processing.\n * @param sdk The NexusSDK instance.\n * @param type The type of transaction.\n * @returns Processed transaction support data or null.\n */\nfunction getTransactionSupportData(sdk, type) {\n    if (transactionSupportDataCache.has(type)) {\n        return transactionSupportDataCache.get(type);\n    }\n    let rawData = null;\n    try {\n        if (type === 'swap') {\n            rawData = sdk?.utils?.getSwapSupportedChainsAndTokens?.();\n        }\n        else {\n            // getSupportedChains actually returns the same structure as getSwapSupportedChainsAndTokens\n            // despite what the TypeScript types say\n            rawData = sdk?.utils?.getSupportedChains?.();\n        }\n    }\n    catch (error) {\n        console.warn(`Failed to fetch support data for ${type} from SDK:`, error);\n        transactionSupportDataCache.set(type, null);\n        return null;\n    }\n    const processedData = _processSdkData(rawData);\n    transactionSupportDataCache.set(type, processedData);\n    return processedData;\n}\n/**\n * Convert destination swap token to standard token metadata format\n */\nfunction convertDestinationTokenToMetadata(destinationToken) {\n    return {\n        symbol: destinationToken.symbol,\n        name: destinationToken.name,\n        decimals: destinationToken.decimals,\n        icon: destinationToken.logo,\n        coingeckoId: '', // Not provided in destination tokens\n        contractAddress: destinationToken.tokenAddress,\n    };\n}\n/**\n * Get available tokens for a specific chain and transaction type.\n * This function is the single source of truth for token resolution.\n * It handles all transaction types and uses a caching mechanism for performance.\n */\nfunction getAvailableTokens(params) {\n    const { chainId, type, network = 'mainnet', isDestination = false, sdk } = params;\n    // Handle swap destination tokens separately as they come from a different source (static list).\n    if (type === 'swap' && isDestination) {\n        const baseTokens = Object.values(getBaseTokenMetadata(network));\n        let allDestinationTokens = [];\n        if (chainId) {\n            const destinationTokens = DESTINATION_SWAP_TOKENS.get(chainId) || [];\n            allDestinationTokens = destinationTokens\n                .filter((destToken) => !baseTokens.some((baseToken) => baseToken.symbol === destToken.symbol))\n                .map(convertDestinationTokenToMetadata);\n        }\n        else {\n            const allChainTokens = Array.from(DESTINATION_SWAP_TOKENS.values()).flat();\n            const uniqueTokens = new Map();\n            allChainTokens.forEach((token) => {\n                if (!uniqueTokens.has(token.symbol) &&\n                    !baseTokens.some((baseToken) => baseToken.symbol === token.symbol)) {\n                    uniqueTokens.set(token.symbol, token);\n                }\n            });\n            allDestinationTokens = Array.from(uniqueTokens.values()).map(convertDestinationTokenToMetadata);\n        }\n        const enhancedBaseTokens = baseTokens.map((token) => ({\n            ...token,\n            contractAddress: TOKEN_CONTRACT_ADDRESSES[token.symbol]?.[chainId || 0],\n        }));\n        const result = [...enhancedBaseTokens, ...allDestinationTokens];\n        return result;\n    }\n    // For swap source tokens, use only getSwapSupportedChainsAndTokens (ERC20 tokens only, no native tokens)\n    if (type === 'swap' && !isDestination && sdk) {\n        const supportData = getTransactionSupportData(sdk, type);\n        if (supportData) {\n            let tokensToDisplay = supportData.tokens;\n            if (chainId) {\n                const supportedSymbols = supportData.chainTokenMap.get(chainId) || [];\n                tokensToDisplay = tokensToDisplay.filter((t) => supportedSymbols.includes(t.symbol));\n            }\n            const result = tokensToDisplay.map((token) => {\n                // Enhanced icon resolution for token options\n                let finalIcon = token.logo;\n                if (!finalIcon) {\n                    finalIcon = LOGO_URLS[token.symbol];\n                    // Handle wrapped tokens\n                    if (!finalIcon && token.symbol.startsWith('W') && token.symbol.length > 1) {\n                        const baseSymbol = token.symbol.substring(1);\n                        finalIcon = LOGO_URLS[baseSymbol];\n                    }\n                    // ETH fallback for ethereum-related tokens\n                    if (!finalIcon && (token.symbol.includes('ETH') || token.symbol === 'WETH')) {\n                        finalIcon = LOGO_URLS['ETH'];\n                    }\n                }\n                return {\n                    symbol: token.symbol,\n                    name: token.name || token.symbol,\n                    decimals: token.decimals,\n                    icon: finalIcon || '',\n                    coingeckoId: '',\n                    contractAddress: token.address,\n                };\n            });\n            return result;\n        }\n    }\n    // For all other cases (transfer, bridge, bridgeAndExecute), use the SDK data.\n    if (sdk) {\n        const supportData = getTransactionSupportData(sdk, type);\n        if (supportData) {\n            let tokensToDisplay = supportData.tokens;\n            if (chainId) {\n                const supportedSymbols = supportData.chainTokenMap.get(chainId) || [];\n                tokensToDisplay = tokensToDisplay.filter((t) => supportedSymbols.includes(t.symbol));\n            }\n            const result = tokensToDisplay.map((token) => {\n                // Enhanced icon resolution for token options\n                let finalIcon = token.logo;\n                if (!finalIcon) {\n                    finalIcon = LOGO_URLS[token.symbol];\n                    // Handle wrapped tokens\n                    if (!finalIcon && token.symbol.startsWith('W') && token.symbol.length > 1) {\n                        const baseSymbol = token.symbol.substring(1);\n                        finalIcon = LOGO_URLS[baseSymbol];\n                    }\n                    // ETH fallback for ethereum-related tokens\n                    if (!finalIcon && (token.symbol.includes('ETH') || token.symbol === 'WETH')) {\n                        finalIcon = LOGO_URLS['ETH'];\n                    }\n                }\n                return {\n                    symbol: token.symbol,\n                    name: token.name || token.symbol,\n                    decimals: token.decimals,\n                    icon: finalIcon || '',\n                    coingeckoId: '', // Not provided by SDK\n                    contractAddress: token.address,\n                };\n            });\n            return result;\n        }\n    }\n    // Fallback for non-SDK or failed SDK calls.\n    const baseTokens = Object.values(getBaseTokenMetadata(network));\n    // For non-swap transactions, include native tokens\n    if (type !== 'swap') {\n        const allNativeTokens = [\n            {\n                symbol: 'ETH',\n                name: 'Ether',\n                decimals: 18,\n                icon: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png',\n                coingeckoId: 'ethereum',\n            },\n            {\n                symbol: 'POL',\n                name: 'POL',\n                decimals: 18,\n                icon: 'https://coin-images.coingecko.com/coins/images/32440/standard/polygon.png',\n                coingeckoId: 'polygon-ecosystem-token',\n            },\n            {\n                symbol: 'AVAX',\n                name: 'Avalanche',\n                decimals: 18,\n                icon: 'https://assets.coingecko.com/coins/images/12559/standard/Avalanche_Circle_RedWhite_Trans.png',\n                coingeckoId: 'avalanche-2',\n            },\n            {\n                symbol: 'BNB',\n                name: 'BNB',\n                decimals: 18,\n                icon: 'https://assets.coingecko.com/coins/images/825/large/bnb-icon2_2x.png',\n                coingeckoId: 'binancecoin',\n            },\n            {\n                symbol: 'KAIA',\n                name: 'Kaia',\n                decimals: 18,\n                icon: 'https://assets.coingecko.com/asset_platforms/images/9672/large/kaia.png',\n                coingeckoId: 'kaia',\n            },\n            {\n                symbol: 'SOPH',\n                name: 'Sophon',\n                decimals: 18,\n                icon: 'https://assets.coingecko.com/coins/images/38680/large/sophon_logo_200.png',\n                coingeckoId: 'sophon',\n            },\n            {\n                symbol: 'FUEL',\n                name: 'Fuel',\n                decimals: 9,\n                icon: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png',\n                coingeckoId: 'ethereum',\n            },\n        ];\n        // If a specific chain is selected, only include native token for that chain\n        if (chainId) {\n            const chainNativeTokens = {\n                1: 'ETH', // Ethereum\n                10: 'ETH', // Optimism\n                137: 'POL', // Polygon\n                8453: 'ETH', // Base\n                42161: 'ETH', // Arbitrum\n                534352: 'ETH', // Scroll\n                43114: 'AVAX', // Avalanche\n                56: 'BNB', // BNB Chain\n                8217: 'KAIA', // Kaia\n                50104: 'SOPH', // Sophon\n                9889: 'FUEL', // Fuel\n            };\n            const nativeSymbol = chainNativeTokens[chainId];\n            if (nativeSymbol) {\n                const nativeToken = allNativeTokens.find((t) => t.symbol === nativeSymbol);\n                if (nativeToken) {\n                    baseTokens.push(nativeToken);\n                }\n            }\n        }\n        else {\n            // No chain selected, include all native tokens\n            baseTokens.push(...allNativeTokens);\n        }\n    }\n    const result = baseTokens.map((token) => {\n        // Enhanced icon resolution for base tokens\n        let finalIcon = token.icon;\n        if (!finalIcon) {\n            finalIcon = LOGO_URLS[token.symbol];\n            // Handle wrapped tokens\n            if (!finalIcon && token.symbol.startsWith('W') && token.symbol.length > 1) {\n                const baseSymbol = token.symbol.substring(1);\n                finalIcon = LOGO_URLS[baseSymbol];\n            }\n            // ETH fallback for ethereum-related tokens\n            if (!finalIcon && (token.symbol.includes('ETH') || token.symbol === 'WETH')) {\n                finalIcon = LOGO_URLS['ETH'];\n            }\n        }\n        return {\n            ...token,\n            icon: finalIcon || token.icon,\n            contractAddress: TOKEN_CONTRACT_ADDRESSES[token.symbol]?.[chainId || 0],\n        };\n    });\n    return result;\n}\n/**\n * Convert enhanced token metadata to UI selection options\n * Follows Interface Segregation Principle - provides only what UI needs\n */\nfunction convertTokensToSelectOptions(tokens) {\n    return tokens.map((token) => ({\n        value: token.symbol,\n        label: token.symbol,\n        icon: token.icon,\n        metadata: token,\n    }));\n}\n/**\n * React hook for token resolution with memoization.\n * This is the single hook for fetching available tokens for all transaction types.\n */\nfunction useAvailableTokens(params) {\n    // The useMemo hook is crucial for performance, preventing re-computation on every render.\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        const tokens = getAvailableTokens(params);\n        return convertTokensToSelectOptions(tokens);\n    }, [params.chainId, params.type, params.network, params.isDestination, params.sdk]);\n}\n/**\n * Get token contract address with enhanced resolution\n * Follows Open/Closed Principle - extensible for new token sources\n */\nfunction getTokenAddress(tokenSymbol, chainId, type = 'transfer') {\n    // Try standard TOKEN_CONTRACT_ADDRESSES first\n    const standardAddress = TOKEN_CONTRACT_ADDRESSES[tokenSymbol]?.[chainId];\n    if (standardAddress) {\n        return standardAddress;\n    }\n    // For swaps, check DESTINATION_SWAP_TOKENS\n    if (type === 'swap') {\n        const chainTokens = DESTINATION_SWAP_TOKENS.get(chainId);\n        const destinationToken = chainTokens?.find((t) => t.symbol === tokenSymbol);\n        if (destinationToken) {\n            return destinationToken.tokenAddress;\n        }\n    }\n    throw new Error(`Token ${tokenSymbol} not supported on chain ${chainId}`);\n}\n/**\n * Check if a token is available on a specific chain\n * Follows Liskov Substitution Principle - can be used wherever boolean is expected\n */\nfunction isTokenAvailableOnChain(tokenSymbol, chainId, type = 'transfer') {\n    // For swaps, be more permissive to avoid aggressive token resets\n    if (type === 'swap') {\n        // Check if token exists in either base tokens or destination swap tokens\n        const baseTokens = TOKEN_CONTRACT_ADDRESSES[tokenSymbol];\n        if (baseTokens && baseTokens[chainId]) {\n            return true;\n        }\n        const chainTokens = DESTINATION_SWAP_TOKENS.get(chainId);\n        if (chainTokens?.some((t) => t.symbol === tokenSymbol)) {\n            return true;\n        }\n        // For swap source tokens, be even more permissive since SDK data might be loading\n        return true;\n    }\n    try {\n        getTokenAddress(tokenSymbol, chainId, type);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Get supported chain IDs for a specific token and transaction type.\n * This is the single source of truth for chain resolution.\n */\nfunction getSupportedChainsForToken(tokenSymbol, type, sdk, isDestination) {\n    // For swap destination, use the static list + base tokens.\n    if (type === 'swap' && isDestination) {\n        const supportedChains = new Set();\n        // Check DESTINATION_SWAP_TOKENS\n        for (const [chainId, tokens] of DESTINATION_SWAP_TOKENS.entries()) {\n            if (tokens.some((token) => token.symbol === tokenSymbol)) {\n                supportedChains.add(chainId);\n            }\n        }\n        // Check base tokens (TOKEN_CONTRACT_ADDRESSES)\n        const tokenContracts = TOKEN_CONTRACT_ADDRESSES[tokenSymbol];\n        if (tokenContracts) {\n            Object.keys(tokenContracts).forEach((chainId) => supportedChains.add(Number(chainId)));\n        }\n        return Array.from(supportedChains).sort((a, b) => a - b);\n    }\n    // For swap source, use only getSwapSupportedChainsAndTokens\n    if (type === 'swap' && !isDestination && sdk) {\n        const supportData = getTransactionSupportData(sdk, type);\n        if (supportData) {\n            return (supportData.tokenChainMap.get(tokenSymbol) || []).sort((a, b) => a - b);\n        }\n    }\n    // For all other cases (transfer, bridge, bridgeAndExecute), use the SDK data.\n    if (sdk) {\n        const supportData = getTransactionSupportData(sdk, type);\n        if (supportData) {\n            return (supportData.tokenChainMap.get(tokenSymbol) || []).sort((a, b) => a - b);\n        }\n    }\n    // Fallback for non-SDK or failed SDK calls.\n    // For non-swap transactions, include both ERC20 contracts and native tokens on supported chains\n    const supportedChains = new Set();\n    // Add chains from TOKEN_CONTRACT_ADDRESSES (ERC20 tokens)\n    const tokenContracts = TOKEN_CONTRACT_ADDRESSES[tokenSymbol];\n    if (tokenContracts) {\n        Object.keys(tokenContracts).forEach((chainId) => supportedChains.add(Number(chainId)));\n    }\n    // Include native token chains if the token symbol matches a known native token\n    const nativeTokens = {\n        ETH: [1, 10, 8453, 42161, 534352, 11155111, 84532, 421614, 11155420, 534351], // Ethereum networks\n        POL: [137, 80002], // Polygon\n        AVAX: [43114, 43113], // Avalanche\n        BNB: [56, 97], // BNB Chain\n        KAIA: [8217, 82170], // Kaia\n        SOPH: [50104], // Sophon\n        FUEL: [9889, 10143], // Fuel\n    };\n    const nativeChains = nativeTokens[tokenSymbol];\n    if (nativeChains) {\n        nativeChains.forEach((chainId) => supportedChains.add(chainId));\n    }\n    return Array.from(supportedChains).sort((a, b) => a - b);\n}\n/**\n * Check if a token-chain combination is valid for swaps\n * Used for validation and reset logic\n */\nfunction isTokenChainCombinationValid(tokenSymbol, chainId, type = 'transfer') {\n    if (!tokenSymbol || !chainId)\n        return true; // Allow empty selections\n    // For swaps, be more lenient with validation to avoid aggressive resets\n    // Let the user make selections and validate at execution time\n    if (type === 'swap') {\n        return true;\n    }\n    return isTokenAvailableOnChain(tokenSymbol, chainId, type);\n}\n/**\n * Get chains that should be available based on a selected token.\n * Filters a list of available chains against chains that support the token.\n */\nfunction getFilteredChainsForToken(tokenSymbol, availableChains, type, sdk, isDestination) {\n    if (!tokenSymbol) {\n        return availableChains;\n    }\n    const supportedChains = getSupportedChainsForToken(tokenSymbol, type, sdk, isDestination);\n    return availableChains.filter((chainId) => supportedChains.includes(chainId));\n}\n\nfunction ChainSelect({ value, onValueChange, disabled = false, network = 'mainnet', className, hasValues, isSource, selectedToken, transactionType, }) {\n    const { sdk } = useInternalNexus();\n    const [filteredChainIds, setFilteredChainIds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const availableChainIds = network === 'testnet' ? TESTNET_CHAINS : MAINNET_CHAINS;\n    // Effect to handle chain filtering\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const filterChains = () => {\n            if (selectedToken && transactionType) {\n                const filtered = getFilteredChainsForToken(selectedToken, [...availableChainIds], transactionType, sdk, !isSource);\n                setFilteredChainIds(filtered);\n            }\n            else {\n                setFilteredChainIds([...availableChainIds]);\n            }\n        };\n        filterChains();\n    }, [selectedToken, transactionType, availableChainIds, sdk, isSource]);\n    const chainOptions = filteredChainIds.map((chainId) => {\n        const metadata = CHAIN_METADATA[chainId];\n        return {\n            value: chainId.toString(),\n            label: metadata.name,\n            chainId,\n            logo: metadata.logo,\n        };\n    });\n    const selectedOption = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => chainOptions.find((opt) => opt.value === (value ?? '')), [value]);\n    const handleSelect = (chainId) => {\n        if (disabled)\n            return;\n        onValueChange(chainId);\n    };\n    // Check if current selection is still valid after filtering\n    const isCurrentSelectionValid = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (!value)\n            return true;\n        return chainOptions.some((option) => option.value === value);\n    }, [value, chainOptions]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex flex-1 flex-col items-start gap-y-4 py-5 border-r border-nexus-muted-secondary/20 max-w-max min-w-[192px] h-full pr-4 ', className), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col gap-y-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-foreground text-lg font-semibold \", children: [isSource ? 'Source' : 'Destination', \" Chain\"] }), selectedToken && transactionType && !isCurrentSelectionValid && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-accent-red text-xs font-medium\", children: [\"Current chain doesn't support \", selectedToken] }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start w-full h-full max-h-[332px] no-scrollbar gap-y-4\", children: [chainOptions.map((chain, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerAutoClose, { enabled: hasValues, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { variant: \"custom\", size: \"custom\", onClick: () => handleSelect(chain?.chainId.toString()), className: cn('p-3 flex items-center justify-start gap-x-2 rounded-nexus-md border border-nexus-border w-full hover:bg-nexus-accent-green/10', disabled &&\n                                'pointer-events-none cursor-not-allowed opacity-50 text-nexus-foreground ', selectedOption?.chainId === chain?.chainId ? 'bg-nexus-accent-green/10' : '', index === chainOptions.length - 1 ? 'mb-20' : ''), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChainIcon, { chainId: chain?.chainId.toString() }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground font-semibold font-nexus-primary text-sm\", children: chain?.label })] }) }, chain?.chainId))), chainOptions.length === 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center justify-center w-full py-8\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted text-sm\", children: \"No chains available for selected token\" }) }))] })] }));\n}\n\nfunction TokenSelect({ value, onValueChange, disabled = false, network = 'mainnet', className, hasValues, type, chainId, isDestination = false, }) {\n    const { unifiedBalance, sdk, isSdkInitialized, activeTransaction } = useInternalNexus();\n    const tokenOptions = useAvailableTokens({\n        chainId,\n        type: type ?? 'bridge',\n        network,\n        isDestination,\n        sdk: isSdkInitialized ? sdk : undefined,\n    });\n    // Fallback to legacy logic if no type provided (backward compatibility)\n    const legacyTokenOptions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (type)\n            return []; // Use enhanced logic when type is available\n        const tokenMetadata = network === 'testnet' ? TESTNET_TOKEN_METADATA : TOKEN_METADATA;\n        return Object.values(tokenMetadata).map((token) => ({\n            value: token.symbol,\n            label: token.symbol,\n            icon: token.icon,\n            metadata: {\n                ...token,\n                contractAddress: undefined,\n            },\n        }));\n    }, [network, type]);\n    const finalTokenOptions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        const tokens = type ? tokenOptions : legacyTokenOptions;\n        const inputData = activeTransaction?.inputData;\n        if (inputData && inputData?.fromTokenAddress) {\n            return tokens.filter((token) => token?.value !== inputData?.fromTokenAddress);\n        }\n        return tokens;\n    }, [type, tokenOptions, legacyTokenOptions]);\n    const tokenBalanceBreakdown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        let breakdown = {};\n        unifiedBalance?.map((balance) => {\n            const key = balance?.symbol;\n            breakdown[key] = {\n                bal: parseFloat(balance?.balance) > 0 ? balance?.balance : '00',\n                chains: `${balance?.breakdown?.length > 1 ? balance?.breakdown?.length + ' chains' : balance?.breakdown?.length > 0 ? balance?.breakdown?.length + ' chain' : '-'}`,\n            };\n        });\n        return breakdown;\n    }, [unifiedBalance]);\n    const selectedOption = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => finalTokenOptions.find((opt) => opt.value === (value ?? '')), [finalTokenOptions, value]);\n    const handleSelect = (token) => {\n        if (disabled)\n            return;\n        onValueChange(token);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex flex-col items-start gap-y-4 py-5 pl-4 w-full', className), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground text-lg font-semibold \", children: type !== 'swap'\n                    ? 'Destination Token'\n                    : isDestination\n                        ? 'Destination Token'\n                        : 'Source Token' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start w-full h-full max-h-[332px] no-scrollbar overflow-x-hidden gap-y-4\", children: [finalTokenOptions.map((token, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerAutoClose, { enabled: hasValues, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { variant: \"custom\", size: \"custom\", onClick: () => handleSelect(token?.value), className: cn('w-full  px-3 py-0.5 rounded-nexus-md hover:bg-nexus-accent-green/10', disabled &&\n                                'pointer-events-none cursor-not-allowed opacity-50 text-nexus-foreground', selectedOption?.value === token?.value ? 'bg-nexus-accent-green/10' : '', index === finalTokenOptions.length - 1 && isDestination ? 'mb-20' : ''), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-start gap-x-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TokenIcon, { tokenSymbol: token?.value, iconUrl: token?.icon }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground font-semibold font-nexus-primary text-sm\", children: token?.label })] }), tokenBalanceBreakdown[token?.value]?.bal &&\n                                        tokenBalanceBreakdown[token?.value]?.chains && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-end gap-y-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"font-semibold font-nexus-primary text-sm text-nexus-foreground\", children: parseFloat(tokenBalanceBreakdown[token?.value]?.bal).toFixed(6) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"font-semibold font-nexus-primary text-sm text-nexus-secondary \", children: tokenBalanceBreakdown[token?.value]?.chains })] }))] }) }) }, token?.label))), finalTokenOptions.length === 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center justify-center w-full py-8\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted text-sm\", children: \"No tokens available\" }) }))] })] }));\n}\n\nconst Minimize = ({ className, size = 16 }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", className: className, width: size, height: size, viewBox: \"0 0 24 24\", fill: \"none\", role: \"img\", \"aria-hidden\": \"true\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\", stroke: \"#4C4C4C\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M5.00026 14.4883L9.98536 14.4954L9.99243 19.4805\", stroke: \"#4C4C4C\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M19.4812 9.99217L14.4961 9.9851L14.489 5\", stroke: \"#4C4C4C\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })] }));\n\nconst CircleX = ({ className, size = 16 }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { width: size, height: size, viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\", className: className, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", { cx: \"12\", cy: \"12\", r: \"10\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"m15 9-6 6\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"m9 9 6 6\" })] }));\n\nconst ExternalLink = ({ className, size = 16 }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { width: size, height: size, viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\", className: className, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M15 3h6v6\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M10 14 21 3\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\" })] }));\n\nconst ChevronDownIcon = ({ className, size = 16 }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", { width: size, height: size, viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\", className: className, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"m6 9 6 6 6-6\" }) }));\n\nconst Maximize = ({ className, size = 24 }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: size, height: size, className: className, viewBox: \"0 0 24 24\", fill: \"none\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\", stroke: \"#4C4C4C\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M12.4812 16.9922L7.49609 16.9851L7.48902 12\", stroke: \"#4C4C4C\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.9993 6.48903L16.9844 6.4961L16.9915 11.4812\", stroke: \"#4C4C4C\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })] }));\n\nconst Plus = ({ className, size = 16 }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { width: size, height: size, viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\", className: className, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M5 12h14\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M12 5v14\" })] }));\n\nconst AvailLogo = ({ className = 'h-[88px] w-[191px]' }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { width: \"192\", height: \"88\", viewBox: \"0 0 192 88\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", className: className, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M110.368 109.004L168.599 136.61C171.597 138.031 175.185 136.76 176.501 133.715C190.117 102.2 198.561 57.8524 183.448 23.7357C169.21 -8.40486 133.999 -17.1363 121.533 -15.3098L98.6641 -2.92135C107.319 -1.33316 124.771 9.46686 125.342 39.9614C125.815 65.1788 115.679 87.355 107.892 99.4844C105.783 102.768 106.841 107.332 110.368 109.004Z\", fill: \"#2B80D7\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M153.243 85.1227L99.7852 65.7731C98.1194 65.1702 96.3004 66.1272 95.7846 67.8219C92.065 80.0436 82.3151 102.091 63.3862 110.354C38.4849 121.224 30.292 96.9044 41.2491 127.637C52.2062 158.37 88.4124 167.185 121.522 148.364C145.515 134.726 154.772 106.896 157.011 91.151C157.388 88.5022 155.759 86.0333 153.243 85.1227Z\", fill: \"#3EBADD\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M72.4534 58.2985C56.2559 88.7781 40.582 151.192 90.1277 158.101C70.7519 159.592 26.7162 149.639 6.70752 102.373C-18.3033 43.2897 30.7683 -27.7053 85.554 -34.1378C139.113 -40.4262 166.72 -11.1948 182.618 21.9481C183.026 22.7364 183.384 23.5004 183.692 24.2305C183.34 23.4679 182.982 22.707 182.618 21.9481C176.501 10.1322 159.097 -7.09752 129.621 3.98016C108.299 11.9934 84.9147 34.8494 72.4534 58.2985Z\", fill: \"#2CBBF9\" })] }));\n\nconst SmallAvailLogo = ({ className = 'w-[58px] h-[16px]', }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"59\", height: \"17\", viewBox: \"0 0 59 17\", fill: \"none\", className: className, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.4248 6.69176C11.4401 7.50705 11.3281 8.28586 11.1466 8.99704C10.6664 10.8785 11.2125 13.2274 12.9671 14.0592C14.4586 14.7663 16.2658 14.1303 16.6882 12.5347C17.314 10.1709 17.4646 7.47972 16.4891 5.27758C15.2481 2.47629 12.1793 1.71528 11.0928 1.87448L9.09961 2.95422C9.85391 3.09264 11.375 4.03394 11.4248 6.69176Z\", fill: \"#2B80D7\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", { id: \"mask0_2725_30131\", style: { maskType: 'alpha' }, maskUnits: \"userSpaceOnUse\", x: \"9\", y: \"1\", width: \"9\", height: \"14\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.4258 6.69225C11.4411 7.50754 11.3291 8.28635 11.1476 8.99753C10.6673 10.879 11.2135 13.2279 12.9681 14.0597C14.4596 14.7668 16.2667 14.1308 16.6892 12.5352C17.315 10.1714 17.4656 7.4802 16.4901 5.27807C15.2491 2.47678 12.1802 1.71577 11.0938 1.87496L9.10059 2.95471C9.85489 3.09313 11.376 4.03443 11.4258 6.69225Z\", fill: \"#DEA00D\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"g\", { mask: \"url(#mask0_2725_30131)\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter0_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M12.4395 12.8514C14.9705 10.1968 17.7674 3.60266 16.1361 2.19354C15.4746 1.62221 9.43782 1.75736 8.89849 1.33057L9.33807 1.98499C9.33807 1.98499 11.1055 4.19894 10.9898 7.67561C10.9187 9.81076 10.1516 12.018 9.675 13.0971C9.59708 13.2735 6.05592 11.526 5.98939 11.6615C5.80022 12.047 9.27288 13.7673 9.27288 13.7673L10.4726 13.6755C11.208 13.6192 11.9306 13.3851 12.4395 12.8514Z\", fill: \"url(#paint0_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter1_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M19.1644 4.54743C20.8989 7.65076 18.7963 13.081 16.3391 15.3072C16.0044 15.6104 15.5153 15.6287 15.1179 15.4145C15.1179 15.4145 13.6074 14.529 12.6431 13.8193C11.944 13.9187 11.5286 13.7003 11.8664 13.012C11.8026 13.1421 12.152 13.4579 12.6431 13.8193C13.9439 13.6343 16.2268 12.3488 16.4671 10.9425C16.5817 10.2719 16.6662 9.52933 16.6928 8.73139C16.8087 5.24811 14.8378 3.3491 14.8378 3.3491L15.0055 1.17432C15.5448 1.60111 18.738 3.78445 19.1644 4.54743Z\", fill: \"url(#paint1_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { opacity: \"0.8\", filter: \"url(#filter2_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", { width: \"6.60689\", height: \"5.5307\", rx: \"2.76535\", transform: \"matrix(0.94997 0.312342 -0.312246 0.950001 9.42139 8.16748)\", fill: \"#13497E\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { opacity: \"0.7\", filter: \"url(#filter3_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M10.258 11.1591C12.0906 9.44906 12.291 5.11414 10.55 3.38596C10.0764 2.91591 9.3697 2.41132 8.91393 2.09668L9.2854 2.57914C9.2854 2.57914 10.779 4.21132 10.6812 6.77441C10.6212 8.34849 9.97293 9.97576 9.57013 10.7713C9.50429 10.9013 6.51174 9.613 6.45552 9.71293C6.29566 9.99707 9.23031 11.2654 9.23031 11.2654C9.57224 11.4261 9.9818 11.4169 10.258 11.1591Z\", fill: \"#2B80D7\" }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.09 16.1397C12.0844 15.5744 12.7884 14.7295 13.2743 13.8511C14.2075 12.164 12.9766 10.3099 11.1637 9.6537C9.96335 9.21922 8.66636 9.94197 7.98443 11.0211C7.52075 11.7549 6.87977 12.4528 6.02305 12.8268C3.85273 13.7743 3.13866 11.6546 4.09365 14.3332C5.04864 17.0118 8.20426 17.7801 11.09 16.1397Z\", fill: \"url(#paint2_linear_2725_30131)\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", { id: \"mask1_2725_30131\", style: { maskType: 'alpha' }, maskUnits: \"userSpaceOnUse\", x: \"3\", y: \"9\", width: \"11\", height: \"8\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.0895 16.1402C12.0839 15.5749 12.7879 14.7299 13.2738 13.8515C14.207 12.1644 12.9761 10.3104 11.1632 9.65419C9.96286 9.21971 8.66588 9.94246 7.98394 11.0216C7.52026 11.7554 6.87928 12.4533 6.02257 12.8273C3.85225 13.7747 3.13817 11.6551 4.09316 14.3337C5.04815 17.0123 8.20377 17.7805 11.0895 16.1402Z\", fill: \"url(#paint3_radial_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"g\", { mask: \"url(#mask1_2725_30131)\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter4_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M6.5825 17.7176C10.3101 17.7176 12.2514 12.1751 12.5251 9.44705C12.6169 8.53191 11.9421 7.9068 11.0646 7.6315L3.8934 5.38184L7.99163 7.07218C8.64228 7.34054 9.01811 8.02625 8.80304 8.69642C8.53164 9.54214 8.05449 10.6796 7.28184 11.5135C5.89205 13.0136 3.0216 13.3501 1.83753 13.0704C1.207 13.0694 0.851074 12.8537 0.851074 12.8537C2.28493 13.7854 4.34408 17.7176 6.5825 17.7176Z\", fill: \"url(#paint4_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { opacity: \"0.4\", filter: \"url(#filter5_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M7.10345 12.5636C8.35959 11.7124 9.39757 9.23989 9.81224 7.33962C10.1145 5.95446 9.02041 5.06578 7.60406 5.00249L4.75074 4.875L8.14135 6.54209C8.7263 6.8297 9.05936 7.46242 8.89485 8.09316C8.6721 8.9472 8.26633 10.1406 7.5932 11.0067C6.42735 12.5067 4.01941 12.8433 3.02613 12.5636C2.4972 12.5626 2.22412 12.7768 2.22412 12.7768C3.42694 13.7086 5.47095 13.6698 7.10345 12.5636Z\", fill: \"#3EBADD\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter6_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.2337 16.5419C12.8581 15.6185 14.338 12.6529 14.8294 10.6344C15.1103 9.48095 14.1894 8.73023 13.0108 8.58797L8.83503 8.08398L8.70185 8.94455L10.6863 9.71953C12.4312 10.401 13.5718 12.1781 12.5673 13.7592C12.3661 14.076 12.1251 14.4029 11.8366 14.7313C10.1086 16.698 7.6104 16.6048 6.42633 16.3251C5.7958 16.3242 5.64062 16.3251 5.64062 16.3251C6.98987 17.2841 9.28758 17.6481 11.2337 16.5419Z\", fill: \"url(#paint5_linear_2725_30131)\" }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M6.81482 8.28951C5.4031 10.946 4.03701 16.3859 8.35527 16.9881C6.66653 17.118 2.8285 16.2505 1.08461 12.1309C-1.09526 6.98138 3.18168 0.793646 7.95663 0.233012C12.6247 -0.315073 15.0309 2.23266 16.4165 5.12131C16.452 5.19001 16.4832 5.2566 16.5101 5.32023C16.4794 5.25377 16.4482 5.18745 16.4165 5.12131C15.8833 4.09146 14.3664 2.58977 11.7974 3.55527C9.93904 4.25368 7.90092 6.24575 6.81482 8.28951Z\", fill: \"#2CBBF9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", { id: \"mask2_2725_30131\", style: { maskType: 'alpha' }, maskUnits: \"userSpaceOnUse\", x: \"0\", y: \"0\", width: \"17\", height: \"17\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M6.81482 8.28951C5.4031 10.946 4.03701 16.3859 8.35527 16.9881C6.66653 17.118 2.8285 16.2505 1.08461 12.1309C-1.09526 6.98138 3.18168 0.793646 7.95663 0.233012C12.6247 -0.315073 15.0309 2.23266 16.4165 5.12131C16.452 5.19001 16.4832 5.2566 16.5101 5.32023C16.4794 5.25377 16.4482 5.18745 16.4165 5.12131C15.8833 4.09146 14.3664 2.58977 11.7974 3.55527C9.93904 4.25368 7.90092 6.24575 6.81482 8.28951Z\", fill: \"#00CCC0\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"g\", { mask: \"url(#mask2_2725_30131)\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"g\", { filter: \"url(#filter7_f_2725_30131)\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M-3.13511 12.0162C-1.39121 16.1358 6.54073 17.3695 8.22947 17.2396C8.31421 16.4404 5.8912 14.7053 5.97572 12.7746C5.97572 12.7746 2.88597 12.8735 2.41418 8.2889C1.94238 3.70426 4.57172 1.39697 4.57172 1.39697C1.43695 2.94251 -4.07851 9.78756 -3.13511 12.0162Z\", fill: \"url(#paint6_linear_2725_30131)\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M16.5085 5.32081C24.6483 -1.25018 10.8779 -2.76706 6.10292 -2.20643C4.11517 -1.97304 -1.11368 3.28316 0.944588 5.54509C0.944588 5.54509 3.07906 3.18017 6.10292 2.74812C9.12679 2.31606 10.527 4.49621 10.527 4.49621C10.8955 4.27021 11.8642 4.20795 12.2274 4.07147C14.9677 3.04157 16.3746 5.03848 16.5085 5.32081Z\", fill: \"url(#paint7_linear_2725_30131)\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter8_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M1.28483 12.6645C-3.57503 11.1295 -1.23599 0.704751 3.63987 -0.787251C8.02692 -2.12968 8.38843 -0.0203528 9.16014 0.10816C9.26032 0.105065 9.31463 0.10705 9.31463 0.10705C9.26067 0.116496 9.20956 0.116391 9.16014 0.10816C8.58042 0.126073 6.46456 0.314111 4.44675 2.04139C1.41202 4.63918 0.190147 8.79231 1.28483 12.6645Z\", fill: \"#56E5FF\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter9_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M9.14058 16.9787C7.79007 18.4992 2.26216 16.6503 0.518262 12.5307C0.204291 11.789 0.545665 9.51354 0.52298 8.6292C0.519028 8.56285 0.518263 8.52734 0.518263 8.52734C0.520498 8.55881 0.522047 8.59283 0.52298 8.6292C0.552314 9.12162 0.757215 11.3128 2.12788 13.293C3.68321 15.54 6.87795 16.42 6.87795 16.42C7.29482 16.7166 8.47241 16.8855 9.14058 16.9787Z\", fill: \"#FDC7C7\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", { id: \"mask3_2725_30131\", style: { maskType: 'alpha' }, maskUnits: \"userSpaceOnUse\", x: \"-2\", y: \"7\", width: \"11\", height: \"12\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", { width: \"11.0837\", height: \"3.89175\", transform: \"matrix(0.696244 0.717805 -0.717686 0.696366 0.919434 7.96387)\", fill: \"url(#paint8_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { mask: \"url(#mask3_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M9.14253 16.9763C7.79203 18.4967 2.26411 16.6479 0.520216 12.5283C0.206244 11.7866 0.547618 9.5111 0.524933 8.62676C0.520981 8.56041 0.520216 8.5249 0.520216 8.5249C0.522451 8.55636 0.524 8.59038 0.524933 8.62676C0.554268 9.11918 0.759168 11.3103 2.12983 13.2905C3.68517 15.5375 6.87991 16.4176 6.87991 16.4176C7.29678 16.7142 8.47437 16.8831 9.14253 16.9763Z\", fill: \"#FDC7C7\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter10_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M16.8544 5.53755C17.21 2.95289 12.5992 -1.05245 7.82423 -0.491817C6.09666 -0.288981 4.56597 1.37578 3.25098 2.73611C3.25098 2.73611 6.23529 0.0837122 9.86837 0.593976C13.5014 1.10424 15.1247 3.79472 15.1247 3.79472C15.8834 4.23843 16.2295 5.60195 16.8544 5.53755Z\", fill: \"#EFC7FD\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", { id: \"mask4_2725_30131\", style: { maskType: 'alpha' }, maskUnits: \"userSpaceOnUse\", x: \"2\", y: \"-1\", width: \"15\", height: \"7\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", { width: \"13.1771\", height: \"4.4257\", transform: \"matrix(0.989125 0.14708 -0.147031 0.989132 3.34082 -0.984863)\", fill: \"url(#paint9_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { mask: \"url(#mask4_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M16.8534 5.53657C17.2091 2.95191 12.5982 -1.05343 7.82325 -0.492794C6.09568 -0.289958 4.56499 1.37481 3.25 2.73513C3.25 2.73513 6.23431 0.0827356 9.86739 0.593C13.5005 1.10326 15.1238 3.79375 15.1238 3.79375C15.8824 4.23745 16.2285 5.60097 16.8534 5.53657Z\", fill: \"#EFC7FD\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { filter: \"url(#filter11_f_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.3268 2.90531C6.43539 4.44806 2.10252 13.4527 6.31266 16.8304C10.5228 20.2081 15.4446 13.7919 17.9208 8.59511C16.6956 5.10265 16.2182 1.36256 11.3268 2.90531Z\", fill: \"url(#paint10_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", { id: \"mask5_2725_30131\", style: { maskType: 'alpha' }, maskUnits: \"userSpaceOnUse\", x: \"-2\", y: \"-3\", width: \"22\", height: \"23\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", { width: \"14.2603\", height: \"17.0129\", transform: \"matrix(0.855497 0.517808 -0.517678 0.855575 7.04688 -2.31055)\", fill: \"url(#paint11_linear_2725_30131)\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"g\", { mask: \"url(#mask5_2725_30131)\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M11.3263 2.90531C6.4349 4.44806 2.10204 13.4527 6.31218 16.8304C10.5223 20.2081 15.4441 13.7919 17.9203 8.59511C16.6952 5.10265 16.2177 1.36256 11.3263 2.90531Z\", fill: \"url(#paint12_linear_2725_30131)\" }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M27.6551 5.64608C27.7791 5.22448 28.166 4.93495 28.6054 4.93495C29.1525 4.93495 29.596 5.37846 29.596 5.92555V12.4925C29.596 13.0579 29.1377 13.5162 28.5723 13.5162C28.108 13.5162 27.7019 13.2037 27.5828 12.755L27.5782 12.7375C26.8473 13.3891 25.894 13.7705 24.7977 13.7705C22.2238 13.7705 20.3013 11.8158 20.3013 9.22558C20.3013 6.63531 22.2238 4.69658 24.7977 4.69658C25.9099 4.69658 26.8791 5.09386 27.6259 5.7454L27.6551 5.64608ZM24.9884 11.5775C26.3389 11.5775 27.324 10.5763 27.324 9.22558C27.324 7.87482 26.3389 6.87368 24.9884 6.87368C23.6379 6.87368 22.6528 7.87482 22.6528 9.22558C22.6528 10.5604 23.6379 11.5775 24.9884 11.5775Z\", fill: \"#546B8A\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M36.8877 5.66515C37.045 5.22711 37.4603 4.93495 37.9258 4.93495C38.7045 4.93495 39.238 5.72015 38.9511 6.44412L36.546 12.514C36.3063 13.1189 35.7216 13.5162 35.0709 13.5162C34.4258 13.5162 33.8449 13.1256 33.6015 12.5281L31.1443 6.49588C30.8407 5.75047 31.3891 4.93495 32.194 4.93495C32.6702 4.93495 33.0957 5.23268 33.2588 5.68011L35.0844 10.6876L36.8877 5.66515Z\", fill: \"#546B8A\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M47.1669 4.93495C48.1233 4.93495 48.8987 5.71032 48.8987 6.6668V12.4925C48.8987 13.0579 48.4404 13.5162 47.875 13.5162C47.4107 13.5162 47.0045 13.2037 46.8855 12.755L46.8809 12.7375C46.15 13.3891 45.1967 13.7705 44.1004 13.7705C41.5264 13.7705 39.6039 11.8158 39.6039 9.22558C39.6039 6.63531 41.5264 4.69658 44.1004 4.69658C45.2126 4.69658 46.1818 5.09386 46.9285 5.7454L47.1669 4.93495ZM44.291 11.5775C45.6416 11.5775 46.6267 10.5763 46.6267 9.22558C46.6267 7.87482 45.6416 6.87368 44.291 6.87368C42.9405 6.87368 41.9554 7.87482 41.9554 9.22558C41.9554 10.5604 42.9405 11.5775 44.291 11.5775Z\", fill: \"#546B8A\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M51.9651 4.09431C51.3459 4.09431 50.8439 3.59236 50.8439 2.97319C50.8439 2.35401 51.3459 1.85207 51.9651 1.85207H52.0267C52.6458 1.85207 53.1478 2.35401 53.1478 2.97319C53.1478 3.59236 52.6458 4.09431 52.0267 4.09431H51.9651ZM51.9879 13.5162C51.3473 13.5162 50.8281 12.9969 50.8281 12.3563V6.09481C50.8281 5.45424 51.3473 4.93495 51.9879 4.93495C52.6285 4.93495 53.1478 5.45424 53.1478 6.09481V12.3563C53.1478 12.9969 52.6285 13.5162 51.9879 13.5162Z\", fill: \"#546B8A\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M57.3762 10.6982C57.3762 10.9004 57.4179 11.0432 57.5011 11.1264C57.5963 11.1978 57.7449 11.2335 57.9471 11.2335C58.0479 11.2335 58.1419 11.2335 58.2789 11.2335C58.416 11.2335 58.5002 11.3564 58.5002 11.469V13.2501L58.5002 13.2582C58.5004 13.388 58.401 13.5032 58.2429 13.5032C57.9426 13.5032 57.6935 13.5162 57.3762 13.5162L56.9476 13.5162C56.341 13.5162 55.8712 13.3556 55.5382 13.0344C55.2171 12.7132 55.0565 12.1422 55.0565 11.3214V3.01192C55.0565 2.37135 55.5758 1.85207 56.2164 1.85206C56.8569 1.85206 57.3762 2.37134 57.3762 3.01192V10.6982Z\", fill: \"#546B8A\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"defs\", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter0_f_2725_30131\", x: \"-16.5346\", y: \"-21.186\", width: \"55.6728\", height: \"57.4696\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"11.2583\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter1_f_2725_30131\", x: \"10.9965\", y: \"0.423765\", width: \"9.55433\", height: \"15.8844\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"0.375276\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter2_f_2725_30131\", x: \"-12.5965\", y: \"-12.1234\", width: \"48.5851\", height: \"47.8996\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"10.5077\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter3_f_2725_30131\", x: \"3.44701\", y: \"-0.905528\", width: \"11.3057\", height: \"15.2798\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"1.5011\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter4_f_2725_30131\", x: \"-14.16\", y: \"-9.6292\", width: \"41.7047\", height: \"42.358\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"7.50552\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter5_f_2725_30131\", x: \"-0.778086\", y: \"1.87279\", width: \"13.6431\", height: \"14.5669\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"1.5011\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter6_f_2725_30131\", x: \"4.89007\", y: \"7.33343\", width: \"10.7408\", height: \"10.6403\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"0.375276\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter7_f_2725_30131\", x: \"-27.2598\", y: \"-26.3311\", width: \"70.3058\", height: \"67.5973\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"12.0088\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter8_f_2725_30131\", x: \"-4.39527\", y: \"-4.23463\", width: \"16.7119\", height: \"19.9014\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"1.5011\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter9_f_2725_30131\", x: \"-2.61744\", y: \"5.52514\", width: \"14.7603\", height: \"14.9839\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"1.5011\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter10_f_2725_30131\", x: \"0.248769\", y: \"-3.54713\", width: \"19.627\", height: \"12.0889\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"1.5011\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"filter\", { id: \"filter11_f_2725_30131\", x: \"3.85931\", y: \"1.7973\", width: \"14.8121\", height: \"16.7242\", filterUnits: \"userSpaceOnUse\", colorInterpolationFilters: \"sRGB\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feFlood\", { floodOpacity: \"0\", result: \"BackgroundImageFix\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feBlend\", { mode: \"normal\", in: \"SourceGraphic\", in2: \"BackgroundImageFix\", result: \"shape\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"feGaussianBlur\", { stdDeviation: \"0.375276\", result: \"effect1_foregroundBlur_2725_30131\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint0_linear_2725_30131\", x1: \"12.6408\", y1: \"3.43224\", x2: \"12.5582\", y2: \"13.8373\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#13497E\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.640419\", stopColor: \"#2B80D7\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint1_linear_2725_30131\", x1: \"15.8297\", y1: \"4.19706\", x2: \"15.8336\", y2: \"15.0075\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#E2C7FE\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.450702\", stopColor: \"#77B8FD\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint2_linear_2725_30131\", x1: \"11.5038\", y1: \"6.97377\", x2: \"5.9255\", y2: \"16.3594\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#269EBF\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#3EBADD\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"radialGradient\", { id: \"paint3_radial_2725_30131\", cx: \"0\", cy: \"0\", r: \"1\", gradientUnits: \"userSpaceOnUse\", gradientTransform: \"translate(12.264 10.1111) rotate(139.704) scale(11.8373 8.72265)\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.411461\", stopColor: \"#FF7360\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#630513\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint4_linear_2725_30131\", x1: \"10.3728\", y1: \"9.4111\", x2: \"5.78507\", y2: \"15.9578\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#33B6D2\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.142991\", stopColor: \"#5BD8FF\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#228AA7\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint5_linear_2725_30131\", x1: \"11.8727\", y1: \"10.1311\", x2: \"7.93646\", y2: \"16.6789\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.635417\", stopColor: \"#68DEFF\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#F3C8CB\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint6_linear_2725_30131\", x1: \"1.12085\", y1: \"5.70719\", x2: \"5.45881\", y2: \"16.441\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.661495\", stopColor: \"#88FFF8\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#176781\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint7_linear_2725_30131\", x1: \"3.42539\", y1: \"6.36962\", x2: \"15.4762\", y2: \"1.37403\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.731633\", stopColor: \"#4D89FD\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#033883\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint8_linear_2725_30131\", x1: \"10.5845\", y1: \"1.89383\", x2: \"4.49758\", y2: \"2.96609\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#D9D9D9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.658857\", stopColor: \"#D9D9D9\", stopOpacity: \"0\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint9_linear_2725_30131\", x1: \"13.1682\", y1: \"3.33168\", x2: \"6.98546\", y2: \"0.455441\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#D9D9D9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#D9D9D9\", stopOpacity: \"0\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint10_linear_2725_30131\", x1: \"14.4366\", y1: \"2.86898\", x2: \"6.32704\", y2: \"16.6037\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#EFC7FE\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.286458\", stopColor: \"#2CBBF9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.65625\", stopColor: \"#2CBBF9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#FDC8C8\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint11_linear_2725_30131\", x1: \"13.951\", y1: \"7.96762\", x2: \"2.07929\", y2: \"7.71684\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#D9D9D9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.659264\", stopColor: \"#D9D9D9\", stopOpacity: \"0\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"linearGradient\", { id: \"paint12_linear_2725_30131\", x1: \"14.4361\", y1: \"2.86898\", x2: \"6.32656\", y2: \"16.6037\", gradientUnits: \"userSpaceOnUse\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { stopColor: \"#EFC7FE\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.317708\", stopColor: \"#2CBBF9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"0.661458\", stopColor: \"#2CBBF9\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"stop\", { offset: \"1\", stopColor: \"#FDC8C8\" })] })] })] }));\n\nconst DestinationTrigger = ({ chainValue, tokenValue, fieldLabel = 'Destination', }) => {\n    const chainId = chainValue ? parseInt(chainValue) : undefined;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormField, { label: fieldLabel, className: \"flex-1 font-nexus-primary gap-y-2 w-full\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between py-2 px-4 gap-x-2 rounded-nexus-full border border-nexus-muted-secondary/20 bg-nexus-background w-full\", style: {\n                boxShadow: '0 4px 21.1px 0 rgba(0, 0, 0, 0.05), 0 7px 11px 0 rgba(255, 255, 255, 0.40) inset',\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-3\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"relative\", children: [tokenValue ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TokenIcon, { tokenSymbol: tokenValue, className: \"rounded-full size-10 border border-nexus-border-secondary/10\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"size-10 rounded-full bg-nexus-secondary-background\" })), chainId ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: CHAIN_METADATA[chainId]?.logo, alt: CHAIN_METADATA[chainId]?.name, className: cn(' absolute bottom-0 -right-1', chainId !== SUPPORTED_CHAINS?.BASE && chainId !== SUPPORTED_CHAINS?.BASE_SEPOLIA\n                                        ? 'rounded-full size-6'\n                                        : 'size-5') })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"size-6 absolute bottom-0 right-0 rounded-full bg-nexus-black/20\" }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start gap-y-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-black font-semibold font-nexus-primary text-base text-left\", children: tokenValue ? tokenValue : 'Token' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted text-xs font-semibold font-nexus-primary text-left\", children: chainId ? CHAIN_METADATA[chainId]?.name : 'Chain' })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDownIcon, { size: 24, className: \"text-nexus-muted\" })] }) }));\n};\nconst DestinationDrawer = ({ chainValue, tokenValue, isChainSelectDisabled, isTokenSelectDisabled, network, onChainValueChange, onTokenValueChange, fieldLabel, drawerTitle = 'Select Destination Chain & Token', type, isDestination = false, isSourceChain = false, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Drawer, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTrigger, { disabled: isChainSelectDisabled && isTokenSelectDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DestinationTrigger, { chainValue: chainValue, tokenValue: tokenValue, fieldLabel: fieldLabel }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DrawerContent, { className: \"font-nexus-primary\", contentClassName: \"overflow-hidden\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerHeader, { className: \"px-4 pt-4 pb-0\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between mb-4\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTitle, { className: \"font-nexus-primary text-nexus-foreground\", children: drawerTitle }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerClose, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CircleX, { className: \"w-6 h-6 text-nexus-black hover:text-zinc-700 transition-colors\" }) })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"px-4 pb-4 flex flex-1 items-start border-t border-nexus-muted-secondary/20\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChainSelect, { value: chainValue, onValueChange: onChainValueChange, disabled: isChainSelectDisabled, network: network, className: \"w-full\", hasValues: !!tokenValue, isSource: isSourceChain, selectedToken: tokenValue, transactionType: type }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TokenSelect, { value: tokenValue, onValueChange: (token, iconUrl) => onTokenValueChange(token, iconUrl), disabled: isTokenSelectDisabled, network: network, className: \"w-full\", hasValues: !!chainValue, type: type, chainId: chainValue ? parseInt(chainValue) : undefined, isDestination: isDestination })] })] })] }));\n};\n\nconst FORM_CONFIG = {\n    bridge: {\n        chainLabel: 'Destination Network',\n        tokenLabel: 'Token to be transferred',\n        chainField: 'chainId',\n        showRecipient: false,\n        showOutputToken: false,\n        showDestinationAmount: false,\n    },\n    bridgeAndExecute: {\n        chainLabel: 'Destination Network',\n        tokenLabel: 'Token to be deposited',\n        chainField: 'toChainId',\n        showRecipient: false,\n        showOutputToken: false,\n        showDestinationAmount: false,\n    },\n    transfer: {\n        chainLabel: 'Source Network',\n        tokenLabel: 'Token to transfer',\n        chainField: 'chainId',\n        showRecipient: true,\n        showOutputToken: false,\n        showDestinationAmount: false,\n    },\n    swap: {\n        chainLabel: 'Source Network',\n        tokenLabel: 'Input Token',\n        outputTokenLabel: 'Output Token',\n        chainField: 'fromChainID',\n        toChainField: 'toChainID',\n        showRecipient: false,\n        showDestinationAmount: true,\n        showOutputToken: true,\n        showDestinationChain: true,\n    },\n};\nconst SwapForm = ({ title, inputData, isAmountDisabled, handleUpdate, isChainSelectDisabled, isTokenSelectDisabled, isOutputTokenSelectDisabled, network = 'mainnet', destinationAmount, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-center gap-y-4\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex gap-x-4 justify-between items-start w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormField, { label: title, className: \"flex-1 font-nexus-primary gap-y-2 w-full max-w-max\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AmountInput, { value: inputData?.fromAmount ? inputData.fromAmount?.toString() : '0', disabled: isAmountDisabled, onChange: isAmountDisabled\n                                ? undefined\n                                : (value) => handleUpdate({ fromAmount: value, toAmount: value }), token: inputData?.fromTokenAddress, debounceMs: 1000 }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DestinationDrawer, { chainValue: inputData.fromChainID?.toString() ?? '', tokenValue: inputData.fromTokenAddress, onChainValueChange: (chainId) => {\n                            if (isChainSelectDisabled)\n                                return;\n                            handleUpdate({ fromChainID: parseInt(chainId, 10) });\n                        }, onTokenValueChange: (token) => {\n                            if (!isTokenSelectDisabled) {\n                                handleUpdate({ fromTokenAddress: token });\n                            }\n                        }, isTokenSelectDisabled: isTokenSelectDisabled, isChainSelectDisabled: isChainSelectDisabled, network: network, drawerTitle: \"Select Source Chain & Token\", fieldLabel: \"Source\", type: \"swap\", isSourceChain: true })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex gap-x-4 justify-between items-start w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormField, { label: 'Receive', className: \"flex-1 font-nexus-primary gap-y-2 w-full max-w-max\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AmountInput, { value: destinationAmount, disabled: true, token: inputData?.toTokenAddress }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DestinationDrawer, { chainValue: inputData.toChainID?.toString() ?? '', tokenValue: inputData.toTokenAddress, onChainValueChange: (chainId) => {\n                            if (isChainSelectDisabled)\n                                return;\n                            handleUpdate({ toChainID: parseInt(chainId, 10) });\n                        }, onTokenValueChange: (token) => {\n                            if (!isOutputTokenSelectDisabled) {\n                                handleUpdate({ toTokenAddress: token });\n                            }\n                        }, isTokenSelectDisabled: isOutputTokenSelectDisabled, isChainSelectDisabled: isChainSelectDisabled, network: network, drawerTitle: \"Select Destination Chain & Token\", fieldLabel: \"Destination\", type: \"swap\", isDestination: true, isSourceChain: false })] })] }));\n};\nfunction SwapTransactionForm({ inputData, onUpdate, disabled = false, className, prefillFields = {}, }) {\n    const { config, isSimulating, activeTransaction } = useInternalNexus();\n    const isInputDisabled = disabled || isSimulating;\n    const isChainSelectDisabled = isInputDisabled || prefillFields.fromChainID;\n    const isTokenSelectDisabled = isInputDisabled || prefillFields.fromTokenAddress;\n    const isOutputTokenSelectDisabled = isInputDisabled || prefillFields.toTokenAddress;\n    const isAmountDisabled = isInputDisabled || prefillFields.fromAmount;\n    const title = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        const fromToken = inputData?.fromTokenAddress;\n        const toToken = inputData?.toTokenAddress;\n        if (fromToken && toToken) {\n            return `Swapping (${fromToken} → ${toToken})`;\n        }\n        return 'Swap';\n    }, [inputData?.fromTokenAddress, inputData?.toTokenAddress]);\n    const handleUpdate = (data) => {\n        onUpdate({ ...inputData, ...data });\n    };\n    // Reset token when chain changes to invalid combination (disabled for swaps to prevent aggressive resets)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    }, [inputData.fromChainID]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    }, [inputData.toChainID]);\n    const destinationAmount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        const intent = activeTransaction?.simulationResult?.intent;\n        if (intent?.destination?.amount) {\n            return parseFloat(intent.destination.amount).toFixed(6);\n        }\n        return '0';\n    }, [activeTransaction?.simulationResult]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('px-6 flex flex-col gap-y-4 w-full', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SwapForm, { title: title, isAmountDisabled: isAmountDisabled, isChainSelectDisabled: isChainSelectDisabled, isOutputTokenSelectDisabled: isOutputTokenSelectDisabled, isTokenSelectDisabled: isTokenSelectDisabled, inputData: inputData, destinationAmount: destinationAmount, handleUpdate: handleUpdate, network: config?.network }) }));\n}\nfunction UnifiedTransactionForm({ type, inputData, onUpdate, disabled = false, className, prefillFields = {}, }) {\n    const { config, isSimulating } = useInternalNexus();\n    const formConfig = FORM_CONFIG[type];\n    const isInputDisabled = disabled || isSimulating;\n    const isChainSelectDisabled = isInputDisabled || prefillFields[formConfig.chainField];\n    const isTokenSelectDisabled = isInputDisabled || prefillFields.token || prefillFields.inputToken;\n    const isAmountDisabled = isInputDisabled || prefillFields.amount;\n    const isReceipientDisabled = isInputDisabled || prefillFields.recipient;\n    const title = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        const chainId = inputData?.chainId || inputData?.toChainId;\n        const token = inputData?.token || inputData?.inputToken;\n        if (chainId && token) {\n            return `Sending (${token} to ${CHAIN_METADATA[chainId]?.name})`;\n        }\n        return 'Sending';\n    }, [inputData, type]);\n    const hasValidationError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => inputData?.recipient && !(0,viem__WEBPACK_IMPORTED_MODULE_10__.isAddress)(inputData?.recipient ?? ''), [inputData?.recipient]);\n    const handleUpdate = (data) => {\n        onUpdate(data);\n    };\n    // Reset token when chain changes to invalid combination for bridge/bridgeAndExecute\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (type === 'bridge' || type === 'bridgeAndExecute') {\n            const chainId = type === 'bridgeAndExecute' ? inputData.toChainId : inputData.chainId;\n            if (chainId && inputData.token) {\n                if (!isTokenChainCombinationValid(inputData.token, chainId, type)) {\n                    handleUpdate({ token: undefined });\n                }\n            }\n        }\n    }, [inputData.chainId, inputData.toChainId, type]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('px-6 flex flex-col gap-y-4 w-full', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex flex-col gap-y-4 w-full', type !== 'bridgeAndExecute' && 'font-nexus-primary'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex gap-x-4 justify-between items-start w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormField, { label: title, className: \"flex-1 font-nexus-primary gap-y-2 w-full max-w-max\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AmountInput, { value: inputData?.amount ? inputData.amount?.toString() : '0', disabled: isAmountDisabled, onChange: isAmountDisabled ? undefined : (value) => handleUpdate({ amount: value }), token: inputData?.token || inputData?.inputToken, debounceMs: 1000 }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DestinationDrawer, { chainValue: formConfig.chainField === 'toChainId'\n                                ? (inputData.toChainId?.toString() ?? '')\n                                : (inputData.chainId?.toString() ?? ''), tokenValue: inputData.token, onChainValueChange: (chainId) => {\n                                if (isChainSelectDisabled)\n                                    return;\n                                const fieldName = formConfig.chainField;\n                                handleUpdate({ [fieldName]: parseInt(chainId, 10) });\n                            }, onTokenValueChange: (token) => {\n                                if (!isTokenSelectDisabled) {\n                                    handleUpdate({ token });\n                                }\n                            }, isTokenSelectDisabled: isTokenSelectDisabled, isChainSelectDisabled: isChainSelectDisabled, network: config?.network ?? 'mainnet' })] }), formConfig.showRecipient && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormField, { label: \"Receivers Address\", className: \"flex-1\", helperText: hasValidationError ? 'Invalid address format (must be 0x...)' : undefined, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AddressField, { value: inputData?.recipient ?? '', onChange: (value) => {\n                            if (!isReceipientDisabled) {\n                                handleUpdate({ recipient: value });\n                            }\n                        }, disabled: isReceipientDisabled }) }))] }) }));\n}\n\nconst BridgeInputForm = ({ prefill, onUpdate, isBusy, prefillFields = {} }) => {\n    // Transform BridgeConfig to UnifiedInputData\n    const unifiedInputData = {\n        chainId: prefill?.chainId,\n        toChainId: prefill?.chainId, // Bridge uses same source chain\n        token: prefill?.token,\n        amount: prefill?.amount,\n    };\n    // Transform UnifiedInputData back to BridgeConfig\n    const handleUpdate = (data) => {\n        onUpdate({\n            chainId: data.chainId,\n            token: data.token,\n            amount: data.amount,\n        });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionForm, { type: \"bridge\", inputData: unifiedInputData, onUpdate: handleUpdate, disabled: isBusy, prefillFields: prefillFields }));\n};\nclass BridgeController {\n    constructor() {\n        this.InputForm = BridgeInputForm;\n    }\n    hasSufficientInput(inputData) {\n        if (!inputData.amount || !inputData.chainId || !inputData.token) {\n            return false;\n        }\n        const amount = parseFloat(inputData.amount.toString());\n        return !isNaN(amount) && amount > 0;\n    }\n    async runReview(sdk, inputData) {\n        const simulationResult = await sdk.simulateBridge(inputData);\n        logger.info('bridge simulationResult', simulationResult);\n        const sourcesData = simulationResult?.intent?.sources || [];\n        let needsApproval = false;\n        const chainDetails = [];\n        for (const source of sourcesData) {\n            if (inputData?.token === 'ETH') {\n                chainDetails.push({\n                    chainId: source.chainID,\n                    amount: source.amount,\n                    needsApproval: false,\n                });\n                continue;\n            }\n            const requiredAmount = sdk.utils.parseUnits(source.amount, sdk.utils.getTokenMetadata(inputData.token)?.decimals ?? 18);\n            const allowances = await sdk.getAllowance(source.chainID, [inputData.token]);\n            logger.info(`allowances for chain ${source.chainID}:`, allowances);\n            const currentAllowance = allowances[0]?.allowance ?? 0n;\n            const chainNeedsApproval = currentAllowance < requiredAmount;\n            if (chainNeedsApproval) {\n                needsApproval = true;\n                logger.info(`Allowance needed on chain ${source.chainID}: required=${requiredAmount}, current=${currentAllowance}`);\n            }\n            chainDetails.push({\n                chainId: source.chainID,\n                amount: requiredAmount.toString(),\n                needsApproval: chainNeedsApproval,\n            });\n        }\n        return {\n            ...simulationResult,\n            allowance: {\n                needsApproval,\n                chainDetails,\n            },\n        };\n    }\n    async confirmAndProceed(sdk, inputData) {\n        const result = await sdk.bridge(inputData);\n        return result;\n    }\n}\n\nconst TransferInputForm = ({ prefill, onUpdate, isBusy, prefillFields = {} }) => {\n    // Transform TransferConfig to UnifiedInputData\n    const unifiedInputData = {\n        chainId: prefill?.chainId,\n        toChainId: prefill?.chainId, // Transfer uses same chain\n        token: prefill?.token,\n        amount: prefill?.amount,\n        recipient: prefill?.recipient,\n    };\n    // Transform UnifiedInputData back to TransferConfig\n    const handleUpdate = (data) => {\n        onUpdate({\n            chainId: data.chainId,\n            token: data.token,\n            amount: data.amount,\n            recipient: data.recipient, // Cast to proper hex string type\n        });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionForm, { type: \"transfer\", inputData: unifiedInputData, onUpdate: handleUpdate, disabled: isBusy, prefillFields: prefillFields }));\n};\nclass TransferController {\n    constructor() {\n        this.InputForm = TransferInputForm;\n    }\n    hasSufficientInput(inputData) {\n        if (!inputData.amount || !inputData.chainId || !inputData.token || !inputData.recipient) {\n            return false;\n        }\n        const amount = parseFloat(inputData.amount.toString());\n        if (isNaN(amount) || amount <= 0) {\n            return false;\n        }\n        if (!/^0x[a-fA-F0-9]{40}$/.test(inputData.recipient)) {\n            return false;\n        }\n        return true;\n    }\n    async runReview(sdk, inputData) {\n        const simulationResult = await sdk.simulateTransfer(inputData);\n        logger.info('transfer simulationResult', simulationResult);\n        const sourcesData = simulationResult?.intent?.sources || [];\n        let needsApproval = false;\n        const chainDetails = [];\n        for (const source of sourcesData) {\n            if (inputData?.token === 'ETH') {\n                chainDetails.push({\n                    chainId: source.chainID,\n                    amount: source.amount,\n                    needsApproval: false,\n                });\n                continue;\n            }\n            const requiredAmount = sdk.utils.parseUnits(source.amount, sdk.utils.getTokenMetadata(inputData.token)?.decimals ?? 18);\n            const allowances = await sdk.getAllowance(source.chainID, [inputData.token]);\n            logger.info(`transfer allowances for chain ${source.chainID}:`, allowances);\n            const currentAllowance = allowances[0]?.allowance ?? 0n;\n            const chainNeedsApproval = currentAllowance < requiredAmount;\n            if (chainNeedsApproval) {\n                needsApproval = true;\n                logger.info(`Transfer allowance needed on chain ${source.chainID}: required=${requiredAmount.toString()}, current=${currentAllowance.toString()}`);\n            }\n            chainDetails.push({\n                chainId: source.chainID,\n                amount: requiredAmount.toString(),\n                needsApproval: chainNeedsApproval,\n            });\n        }\n        return {\n            ...simulationResult,\n            allowance: {\n                needsApproval,\n                chainDetails,\n            },\n        };\n    }\n    async confirmAndProceed(sdk, inputData) {\n        const result = await sdk.transfer(inputData);\n        return result;\n    }\n}\n\nconst BridgeAndExecuteInputForm = ({ prefill, onUpdate, isBusy, prefillFields = {} }) => {\n    // Transform BridgeAndExecuteConfig to UnifiedInputData\n    const unifiedInputData = {\n        toChainId: prefill?.toChainId,\n        token: prefill?.token,\n        amount: prefill?.amount,\n    };\n    // Transform UnifiedInputData back to BridgeAndExecuteConfig\n    const handleUpdate = (data) => {\n        // Only include defined values to avoid overwriting existing data\n        const transformedData = {};\n        if (data.toChainId !== undefined)\n            transformedData.toChainId = data.toChainId;\n        if (data.token !== undefined)\n            transformedData.token = data.token;\n        if (data.amount !== undefined)\n            transformedData.amount = data.amount;\n        onUpdate(transformedData);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionForm, { type: \"bridgeAndExecute\", inputData: unifiedInputData, onUpdate: handleUpdate, disabled: isBusy, prefillFields: prefillFields }));\n};\nclass BridgeAndExecuteController {\n    constructor() {\n        this.InputForm = BridgeAndExecuteInputForm;\n    }\n    hasSufficientInput(inputData) {\n        const { token, amount, toChainId, contractAddress, contractAbi, functionName, buildFunctionParams, } = inputData;\n        if (!token || !amount || !toChainId)\n            return false;\n        if (!contractAddress || !contractAbi || !functionName || !buildFunctionParams)\n            return false;\n        const amt = parseFloat(amount.toString());\n        return !isNaN(amt) && amt > 0;\n    }\n    buildExecute(inputData) {\n        // Return new callback-based execute params directly\n        return {\n            contractAddress: inputData.contractAddress,\n            contractAbi: inputData.contractAbi,\n            functionName: inputData.functionName,\n            buildFunctionParams: inputData.buildFunctionParams,\n            tokenApproval: inputData.token !== 'ETH'\n                ? {\n                    token: inputData.token,\n                    amount: inputData.amount.toString(),\n                }\n                : undefined,\n        };\n    }\n    async runReview(sdk, inputData) {\n        let params = inputData;\n        if (!params.execute) {\n            const execute = this.buildExecute(inputData);\n            params = { ...inputData, execute };\n        }\n        const simulationResult = await sdk.simulateBridgeAndExecute(params);\n        logger.info('bridgeAndExecute simulationResult', simulationResult);\n        let needsApproval = false;\n        const chainDetails = [];\n        // Check if bridge part needs allowance (when bridge is NOT skipped)\n        if (simulationResult?.bridgeSimulation?.intent?.sources && inputData.token !== 'ETH') {\n            const sourcesData = simulationResult.bridgeSimulation.intent.sources;\n            for (const source of sourcesData) {\n                const requiredAmount = sdk.utils.parseUnits(source.amount, sdk.utils.getTokenMetadata(inputData.token)?.decimals ?? 18);\n                const allowances = await sdk.getAllowance(source.chainID, [inputData.token]);\n                logger.info(`bridgeAndExecute bridge allowances for chain ${source.chainID}:`, allowances);\n                const currentAllowance = allowances[0]?.allowance ?? 0n;\n                const chainNeedsApproval = currentAllowance < requiredAmount;\n                if (chainNeedsApproval) {\n                    needsApproval = true;\n                    logger.info(`BridgeAndExecute bridge allowance needed on chain ${source.chainID}: required=${requiredAmount.toString()}, current=${currentAllowance.toString()}`);\n                }\n                chainDetails.push({\n                    chainId: source.chainID,\n                    amount: requiredAmount.toString(),\n                    needsApproval: chainNeedsApproval,\n                });\n            }\n        }\n        // Also check if contract execution needs approval (when bridge is skipped)\n        // This is handled by the execute service internally, but we can inform the UI\n        const contractApprovalNeeded = !!simulationResult?.metadata?.approvalRequired;\n        if (contractApprovalNeeded) {\n            needsApproval = true;\n        }\n        return {\n            ...simulationResult,\n            allowance: {\n                needsApproval,\n                chainDetails: chainDetails.length > 0 ? chainDetails : undefined,\n            },\n        };\n    }\n    async confirmAndProceed(sdk, inputData, _simulationResult) {\n        let params = inputData;\n        if (!params.execute) {\n            const execute = this.buildExecute(inputData);\n            params = { ...inputData, execute };\n        }\n        const result = await sdk.bridgeAndExecute(params);\n        return result;\n    }\n}\n\nconst SuccessRipple = ({ children, size = 'md' }) => {\n    const { activeTransaction } = useInternalNexus();\n    const [showRipple, setShowRipple] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [animationKey, setAnimationKey] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Size configurations for different contexts\n    const sizeConfig = {\n        sm: {\n            ripple1: 'w-12 h-12',\n            ripple2: 'w-10 h-10',\n            ripple3: 'w-8 h-8',\n        },\n        md: {\n            ripple1: 'w-16 h-16',\n            ripple2: 'w-14 h-14',\n            ripple3: 'w-12 h-12',\n        },\n        lg: {\n            ripple1: 'w-20 h-20',\n            ripple2: 'w-18 h-18',\n            ripple3: 'w-16 h-16',\n        },\n    };\n    const config = sizeConfig[size];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (activeTransaction.status === 'success') {\n            setShowRipple(true);\n            setAnimationKey((prev) => prev + 1);\n        }\n        else {\n            setShowRipple(false);\n        }\n    }, [activeTransaction.status]);\n    const rippleAnimation1 = {\n        animation: 'fade-out-scale 2s ease-out infinite',\n    };\n    const rippleAnimation2 = {\n        animation: 'fade-out-scale 2s ease-out 0.2s infinite',\n    };\n    const rippleAnimation3 = {\n        animation: 'fade-out-scale 2s ease-out 0.4s infinite',\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"relative inline-block\", children: [showRipple && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"absolute inset-0 flex items-center justify-center pointer-events-none\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"absolute\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: `${config.ripple1} rounded-nexus-full bg-nexus-success opacity-10`, style: rippleAnimation1 }) }, `ripple-${animationKey}`), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"absolute\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: `${config.ripple2} rounded-nexus-full bg-nexus-success opacity-10`, style: rippleAnimation2 }) }, `ripple-2-${animationKey}`), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"absolute\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: `${config.ripple3} rounded-nexus-full bg-nexus-success opacity-10`, style: rippleAnimation3 }) }, `ripple-3-${animationKey}`)] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"relative z-10\", children: children })] }));\n};\n\nfunction WordsPullUp({ text, className = '' }) {\n    const words = (text || '').split(' ');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex justify-center flex-wrap\", children: words.map((word, i) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.span, { initial: { y: 20, opacity: 0 }, animate: { y: 0, opacity: 1 }, transition: { delay: i * 0.1 }, className: cn('text-center text-nexus-black font-nexus-primary font-semibold text-xl tracking-tighter', 'pr-2', // spacing between words\n            className), children: word === '' ? '\\u00A0' : word }, `${word}-${i}`))) }));\n}\n\nfunction Progress({ className, value = 0, max = 100, indicatorColor = 'bg-[#56C45B]', ...props }) {\n    const percentage = Math.min(Math.max((value / max) * 100, 0), 100);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { \"data-slot\": \"progress\", className: cn('bg-[#E8EAF0] relative h-2 w-full overflow-hidden rounded-nexus-full border border-[#C8C8C8]', className), ...props, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { \"data-slot\": \"progress-indicator\", className: cn(indicatorColor, 'h-full origin-left'), initial: { scaleX: 0 }, animate: { scaleX: percentage / 100 }, transition: {\n                duration: 0.3,\n                ease: [0.4, 0.0, 0.2, 1],\n            }, style: {\n                transformOrigin: 'left',\n                width: '100%',\n            } }) }));\n}\n\nconst ThreeStageProgress = ({ progress, hasError = false, errorProgress, tokenIcon, size = 'md', className = '', }) => {\n    const calculateBarStates = () => {\n        const errorPoint = hasError && errorProgress !== undefined ? errorProgress : progress;\n        return [\n            // First bar (0-33%)\n            {\n                value: Math.min(Math.max(0, progress * 3), 100),\n                state: hasError && errorPoint <= 33.33\n                    ? 'error'\n                    : progress >= 33.33\n                        ? 'completed'\n                        : progress > 0\n                            ? 'active'\n                            : 'empty',\n                showToken: progress <= 33.33,\n            },\n            // Second bar (33-66%)\n            {\n                value: Math.min(Math.max(0, (progress - 33.33) * 3), 100),\n                state: hasError && errorPoint > 33.33 && errorPoint <= 66.66\n                    ? 'error'\n                    : progress >= 66.66\n                        ? 'completed'\n                        : progress > 33.33\n                            ? 'active'\n                            : 'empty',\n                showToken: progress >= 33.33 && progress <= 66.66,\n            },\n            // Third bar (66-100%)\n            {\n                value: Math.min(Math.max(0, (progress - 66.66) * 3), 100),\n                state: hasError && errorPoint > 66.66\n                    ? 'error'\n                    : progress > 66.66\n                        ? progress >= 100\n                            ? 'completed'\n                            : 'active'\n                        : 'empty',\n                showToken: progress >= 66.66,\n            },\n        ];\n    };\n    const barStates = calculateBarStates();\n    // Size configurations\n    const sizeConfig = {\n        sm: {\n            height: 'h-1',\n            gap: 'gap-1',\n            tokenSize: 'w-4 h-4',\n            tokenOffset: '-top-1.5',\n            startOffset: 0,\n        },\n        md: {\n            height: 'h-2',\n            gap: 'gap-2',\n            tokenSize: 'w-6 h-6',\n            tokenOffset: '-top-2',\n            startOffset: 0,\n        },\n        lg: {\n            height: 'h-2',\n            gap: 'gap-3',\n            tokenSize: 'w-10 h-10',\n            tokenOffset: '-top-4',\n            startOffset: 5,\n        },\n    };\n    const config = sizeConfig[size];\n    // Get indicator color based on state\n    const getIndicatorColor = (state) => {\n        switch (state) {\n            case 'error':\n                return 'bg-nexus-destructive-secondary';\n            case 'completed':\n            case 'active':\n                return undefined;\n            default:\n                return undefined;\n        }\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: `w-full flex !font-nexus-primary ${config.gap} ${className}`, children: barStates.map((barState, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"relative w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Progress, { value: barState.value, className: `${config.height} bg-gray-200`, indicatorColor: getIndicatorColor(barState.state) }), barState.showToken && tokenIcon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: `absolute ${config.tokenOffset} ${config.tokenSize} transition-all duration-500 ease-out`, style: {\n                        left: `${barState.value + config.startOffset}%`,\n                        transform: 'translateX(-50%)',\n                    }, children: tokenIcon }))] }, index))) }));\n};\n\nconst falsyToString = (value)=>typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\nconst cx = clsx;\nconst cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n\nconst infoMessageVariants = cva('px-2 py-3 rounded-nexus-md overflow-hidden font-nexus-primary font-semibold text-sm leading-[18px] backdrop-blur-[48px] border border-nexus-black/80', {\n    variants: {\n        variant: {\n            success: 'bg-gradient-to-r from-[#86DF00]/16 to-[#73BF01]/16 text-nexus-black',\n            info: 'bg-blue-50 text-nexus-black',\n            warning: 'bg-gradient-to-r from-[#DFC200]/16 to-[#DFC200]/16 text-nexus-black',\n            error: 'bg-[#C03C541A] text-[#C03C54] border border-[#C03C541A]',\n        },\n    },\n    defaultVariants: {\n        variant: 'success',\n    },\n});\nfunction InfoMessage({ variant, children, className }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('px-6', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn(infoMessageVariants({ variant })), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center gap-1\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex-1 text-sm font-semibold font-nexus-primary leading-normal\", children: children }) }) }) }));\n}\n\nconst LoadingDots = ({ className, removeWidth }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('relative flex items-center  justify-center', className, !removeWidth && 'w-full'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.span, { initial: { scale: 0 }, animate: { scale: 1 }, transition: { duration: 0.7, repeat: Infinity }, className: \"absolute size-1.5 rounded-nexus-full bg-white left-2\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.span, { initial: { x: 0 }, animate: { x: 24 }, transition: { duration: 0.7, repeat: Infinity }, className: \"absolute size-1.5 rounded-nexus-full bg-white left-2\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.span, { initial: { x: 0 }, animate: { x: 24 }, transition: { duration: 0.7, repeat: Infinity }, className: \"absolute size-1.5 rounded-nexus-full bg-white left-8\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.span, { initial: { scale: 1 }, animate: { scale: 0 }, transition: { duration: 0.7, repeat: Infinity }, className: \"absolute size-1.5 rounded-nexus-full bg-white left-14\" })] }));\n\nfunction EnhancedInfoMessage({ error, context, className }) {\n    const [isAddingChain, setIsAddingChain] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [chainAdded, setChainAdded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { sdk } = useInternalNexus();\n    const isChainRelatedError = isChainError(error);\n    const chainId = isChainRelatedError ? extractChainIdFromError(error) : null;\n    const chainMetadata = chainId ? CHAIN_METADATA[chainId] : null;\n    const handleAddChain = async () => {\n        if (!chainId)\n            return;\n        setIsAddingChain(true);\n        try {\n            const provider = sdk.getEVMProviderWithCA();\n            const success = await addChainToWallet(chainId, provider);\n            if (success) {\n                setChainAdded(true);\n            }\n        }\n        catch (err) {\n            logger.error('Failed to add chain:', err);\n        }\n        finally {\n            setIsAddingChain(false);\n        }\n    };\n    const formattedError = formatErrorForUI(error, context);\n    if (isChainRelatedError && chainMetadata && !chainAdded) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoMessage, { variant: \"error\", className: className, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"space-y-3\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-nexus-primary text-red-600 font-bold\", children: formattedError }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-2 p-3 bg-red-50 rounded-nexus-md border border-red-200\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: chainMetadata.logo, alt: chainMetadata.name, className: cn('w-8 h-8', chainMetadata?.id !== SUPPORTED_CHAINS.BASE &&\n                                    chainMetadata?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                    ? 'rounded-nexus-full'\n                                    : '') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-semibold font-nexus-primary text-nexus-black\", children: chainMetadata.name }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-xs font-nexus-primary text-nexus-muted-secondary\", children: [\"Chain ID: \", chainId] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { onClick: handleAddChain, disabled: isAddingChain, size: \"sm\", className: \"bg-nexus-blue hover:bg-nexus-blue/90 text-white\", children: isAddingChain ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingDots, {}), \"Adding...\"] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Plus, { className: \"w-4 h-4 mr-2\" }), \"Add Chain\"] })) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-xs font-nexus-primary text-nexus-muted-secondary\", children: [\"This will add \", chainMetadata.name, \" network to your wallet so you can use it for transactions.\"] })] }) }));\n    }\n    if (chainAdded) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoMessage, { variant: \"success\", className: className, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-6 h-6 bg-green-100 rounded-nexus-full flex items-center justify-center\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", { className: \"w-4 h-4 text-green-600\", fill: \"currentColor\", viewBox: \"0 0 20 20\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { fillRule: \"evenodd\", d: \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\", clipRule: \"evenodd\" }) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-semibold font-nexus-primary text-green-800\", children: chainMetadata\n                                    ? `${chainMetadata.name} network added successfully!`\n                                    : 'Network added successfully!' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-xs font-nexus-primary text-green-600 mt-1\", children: \"You can now retry your transaction.\" })] })] }) }));\n    }\n    // Fallback to regular formatted error message\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoMessage, { variant: \"error\", className: className, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-nexus-primary text-red-600 font-bold\", children: formattedError }) }));\n}\n\nconst ProcessorMiniCard = ({ status, toggleTransactionCollapse, sourceChainMeta, destChainMeta, tokenMeta, transactionType, processing, explorerURL, explorerURLs, description, error, executionResult, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { layout: true, initial: { opacity: 0, y: -10, scale: 0.95 }, animate: { opacity: 1, y: 0, scale: 1 }, exit: { opacity: 0, y: 10, scale: 0.95 }, transition: { duration: 0.3 }, className: \"flex flex-col items-center w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-4 w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between w-full gap-x-3\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex -space-x-1 mb-1\", children: sourceChainMeta?.slice(0, 3).map((chain, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: chain?.logo ?? '', alt: chain?.name ?? '', className: cn('w-8 h-8', index > 0 ? '-ml-3' : '', chain?.id !== SUPPORTED_CHAINS.BASE && chain?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                        ? 'rounded-nexus-full'\n                                        : ''), style: { zIndex: sourceChainMeta?.length - index } }, chain?.id))) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { className: \"flex-1 relative w-full\", initial: { scale: 0.7, opacity: 0 }, animate: { scale: 1, opacity: 1 }, exit: { scale: 0.7, opacity: 0 }, transition: { type: 'spring', stiffness: 260, damping: 20 }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThreeStageProgress, { progress: processing?.animationProgress, hasError: !!error, errorProgress: processing?.animationProgress, tokenIcon: tokenMeta?.icon ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: tokenMeta?.icon, alt: tokenMeta?.symbol, className: \"w-6 h-6 rounded-nexus-full border border-white shadow-sm\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-4 h-4 bg-blue-500 rounded-nexus-full flex items-center justify-center\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-white text-[8px] font-bold\", children: tokenMeta?.symbol?.[0] || 'T' }) })), size: \"md\" }) }), destChainMeta ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SuccessRipple, { size: \"sm\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: destChainMeta?.logo, alt: destChainMeta?.name, className: cn('w-8 h-8 mb-1', destChainMeta?.id !== SUPPORTED_CHAINS.BASE &&\n                                        destChainMeta?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                        ? 'rounded-nexus-full'\n                                        : '') }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-8 h-8 bg-gray-200 rounded-nexus-full animate-pulse mb-1\" }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { type: \"button\", onPointerDownCapture: (e) => {\n                            e.stopPropagation();\n                        }, onPointerDown: (e) => {\n                            e.stopPropagation();\n                        }, onMouseDownCapture: (e) => {\n                            e.stopPropagation();\n                        }, onMouseDown: (e) => {\n                            e.stopPropagation();\n                        }, onClick: (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            toggleTransactionCollapse();\n                        }, className: \"p-1 hover:bg-gray-100 rounded-nexus-md transition-colors text-nexus-foreground\", variant: \"link\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Maximize, { className: \"w-6 h-6 text-nexus-muted-secondary\" }) })] }), status === 'error' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"text-left flex flex-col items-start gap-y-0.5 text-ellipsis overflow-hidden\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EnhancedInfoMessage, { error: error, context: \"transaction\" }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"text-left flex flex-col items-start gap-y-0.5 py-0.5 w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { initial: { opacity: 0, y: 6 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: 6 }, transition: { duration: 0.25 }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(WordsPullUp, { text: processing?.statusText, className: \"text-[16px] font-nexus-primary font-semibold text-nexus-black\" }) }), status === 'success' &&\n                        (transactionType === 'swap' ? (\n                        // For swap, prioritize showing destination transaction link\n                        explorerURLs?.destination ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { className: \"h-fit text-xs text-nexus-accent underline font-semibold font-nexus-primary px-0\", size: \"sm\", variant: \"link\", onClick: () => window.open(explorerURLs.destination, '_blank'), children: [\"View Transaction\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-4 h-4 ml-2 text-nexus-muted-secondary\" })] })) : explorerURLs?.source ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { className: \"h-fit text-xs text-nexus-accent underline font-semibold font-nexus-primary px-0\", size: \"sm\", variant: \"link\", onClick: () => window.open(explorerURLs.source, '_blank'), children: [\"View Transaction\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-4 h-4 ml-2 text-nexus-muted-secondary\" })] })) : null) : transactionType !== 'bridgeAndExecute' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { className: \"h-fit text-xs text-nexus-accent underline font-semibold font-nexus-primary px-0\", size: \"sm\", variant: \"link\", onClick: () => window.open(explorerURL ?? '', '_blank'), children: [\"View on Explorer\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-4 h-4 ml-2 text-nexus-muted-secondary\" })] })) : (\n                        // For bridgeAndExecute, show execute transaction link (bridge link handled in full card)\n                        executionResult?.executeExplorerUrl && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { className: \"h-fit text-xs text-nexus-accent underline font-semibold font-nexus-primary px-0\", size: \"sm\", variant: \"link\", onClick: () => window.open(executionResult?.executeExplorerUrl ?? '', '_blank'), children: [\"View Transaction\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-4 h-4 ml-2 text-nexus-muted-secondary\" })] })))), status !== 'success' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"font-nexus-primary text-sm text-nexus-foreground text-ellipsis overflow-hidden\", children: description }))] }))] }));\n};\n\nconst ProcessorFullCard = ({ status, cancelTransaction, toggleTransactionCollapse, sourceChainMeta, destChainMeta, tokenMeta, transactionType, simulationResult, processing, explorerURL, explorerURLs, timer, description, error, executionResult, disableCollapse, }) => {\n    const lottieRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sourceAmount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        if (transactionType === 'bridge' || transactionType === 'transfer') {\n            return formatCost(simulationResult?.intent?.sourcesTotal);\n        }\n        else if (transactionType === 'swap') {\n            const swapResult = simulationResult;\n            return formatCost(swapResult?.intent?.sources?.[0]?.amount ?? '0');\n        }\n        else {\n            const bridgeExecuteResult = simulationResult;\n            // If bridge was skipped, use input amount from metadata\n            if (bridgeExecuteResult?.metadata?.bridgeSkipped) {\n                return formatCost(bridgeExecuteResult.metadata.inputAmount ?? '');\n            }\n            return formatCost(bridgeExecuteResult?.bridgeSimulation?.intent?.sourcesTotal ?? '');\n        }\n    }, [transactionType, simulationResult]);\n    const destinationAmount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        if (transactionType === 'bridge' || transactionType === 'transfer') {\n            return formatCost(simulationResult?.intent?.destination?.amount);\n        }\n        else if (transactionType === 'swap') {\n            const swapResult = simulationResult;\n            return formatCost(swapResult?.intent?.destination?.amount ?? '0');\n        }\n        else {\n            const bridgeExecuteResult = simulationResult;\n            // If bridge was skipped, use input amount from metadata (same as source since no bridge)\n            if (bridgeExecuteResult?.metadata?.bridgeSkipped) {\n                return formatCost(bridgeExecuteResult.metadata.inputAmount ?? '');\n            }\n            return formatCost(bridgeExecuteResult?.bridgeSimulation?.intent?.destination?.amount ?? '');\n        }\n    }, [transactionType, simulationResult]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { initial: { opacity: 0, y: -10, scale: 0.95 }, animate: { opacity: 1, y: 0, scale: 1 }, exit: { opacity: 0, y: 10, scale: 0.95 }, transition: { duration: 0.3 }, className: \"w-full h-full flex flex-col items-center\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { layout: false, onLayoutAnimationComplete: () => {\n                            lottieRef.current?.resize();\n                        }, className: \"absolute top-16 left-1/2 -translate-x-1/2 pointer-events-none\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-[380px] h-[380px] opacity-20\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lottiefiles_dotlottie_react__WEBPACK_IMPORTED_MODULE_3__.DotLottieReact, { src: \"https://lottie.host/17486479-f319-4b3c-8c10-7bf10fcc534b/gRY7aNOi5G.lottie\", loop: true, autoplay: status === 'processing', className: \"w-full h-full object-cover opacity-10 !mix-blend-screen\", dotLottieRefCallback: (instance) => {\n                                    lottieRef.current = instance;\n                                } }) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { variant: \"link\", size: \"icon\", className: \"w-full flex items-end justify-end text-nexus-foreground mt-3 px-6 py-0\", onClick: () => {\n                            if (status === 'error' || status === 'success') {\n                                cancelTransaction();\n                            }\n                            else {\n                                disableCollapse ? cancelTransaction() : toggleTransactionCollapse();\n                            }\n                        }, children: status === 'error' || status === 'success' || disableCollapse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CircleX, { className: \"w-6 h-6 text-nexus-foreground\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Minimize, { className: \"w-6 h-6 text-nexus-foreground\" })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-full p-4 relative z-10\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"w-full flex flex-col items-center gap-y-6\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { className: \"w-full flex items-center\", initial: { opacity: 0, y: -12 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: -12 }, transition: { duration: 0.35 }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-center gap-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center\", children: sourceChainMeta.slice(0, 3).map((chain, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: chain?.logo ?? '', alt: chain?.name ?? '', className: cn('w-12 h-12', index > 0 ? '-ml-5' : '', chain?.id !== SUPPORTED_CHAINS.BASE &&\n                                                            chain?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                                            ? 'rounded-nexus-full'\n                                                            : ''), style: { zIndex: sourceChainMeta?.length - index } }, chain?.id))) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col gap-y-1 items-center\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-lg font-nexus-primary text-nexus-black font-bold\", children: sourceAmount() }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-nexus-primary text-nexus-muted-secondary font-medium\", children: [\"From \", sourceChainMeta.length, \" chain\", sourceChainMeta.length > 1 ? 's' : ''] })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { className: \"flex-1 flex flex-col items-center justify-center px-2 relative\", initial: { scale: 0.8, opacity: 0 }, animate: { scale: 1, opacity: 1 }, exit: { scale: 0.8, opacity: 0 }, transition: { type: 'spring', stiffness: 260, damping: 22 }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"relative w-full flex items-center justify-center\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-full max-w-[300px] relative\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThreeStageProgress, { progress: processing?.animationProgress, hasError: !!error, errorProgress: processing?.animationProgress, tokenIcon: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-10 h-10 bg-white rounded-nexus-full border-2 border-gray-200 flex items-center justify-center shadow-md\", children: tokenMeta?.icon ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: tokenMeta?.icon, alt: tokenMeta?.symbol, className: \"w-8 h-8 rounded-nexus-full\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-5 h-5 bg-blue-500 rounded-nexus-full flex items-center justify-center\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-white text-xs font-bold\", children: tokenMeta?.symbol?.[0] || 'T' }) })) }), size: \"lg\" }) }) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex flex-col items-center gap-y-2 relative\", children: destChainMeta ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SuccessRipple, { size: \"md\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: destChainMeta?.logo ?? '', alt: destChainMeta?.name ?? '', className: cn('w-12 h-12', destChainMeta?.id !== SUPPORTED_CHAINS.BASE &&\n                                                                destChainMeta?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                                                ? 'rounded-nexus-full'\n                                                                : '') }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col gap-y-1 items-center\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-lg font-nexus-primary text-nexus-black font-bold\", children: destinationAmount() }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-nexus-primary text-nexus-muted-secondary font-medium\", children: [\"To \", destChainMeta?.name ?? ''] })] })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"w-12 h-12 bg-gray-200 rounded-nexus-full animate-pulse\" })) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { className: \"flex flex-col items-center gap-y-2 w-full\", initial: { opacity: 0, y: 12 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: 12 }, transition: { duration: 0.35, delay: 0.05 }, children: [error ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EnhancedInfoMessage, { error: error, context: \"transaction\", className: \"px-0\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-center w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-2xl font-semibold font-nexus-primary text-nexus-black\", children: Math.floor(timer) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-base font-semibold font-nexus-primary text-nexus-black\", children: \".\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { className: \"text-base font-semibold font-nexus-primary text-nexus-muted-secondary\", children: [String(Math.floor((timer % 1) * 1000)).padStart(3, '0'), \"s\"] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"relative overflow-hidden\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(WordsPullUp, { text: processing?.statusText }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"w-full text-center font-nexus-primary text-base text-nexus-foreground\", children: description })] })), transactionType === 'bridgeAndExecute' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-center gap-y-1\", children: [explorerURL && !executionResult?.bridgeSkipped && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { variant: \"link\", className: \"text-nexus-accent underline text-base font-semibold font-nexus-primary cursor-pointer\", onClick: () => window.open(explorerURL, '_blank'), children: [\"View Bridge Transaction\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-6 h-6 ml-2 text-nexus-muted-secondary\" })] })), executionResult?.executeExplorerUrl && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { variant: \"link\", className: \" text-nexus-accent underline text-base font-semibold font-nexus-primary cursor-pointer\", onClick: () => window.open(executionResult?.executeExplorerUrl, '_blank'), children: [executionResult?.bridgeSkipped\n                                                            ? 'View Transaction'\n                                                            : 'View Execute Transaction', ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-6 h-6 ml-2 text-nexus-muted-secondary\" })] }))] })) : transactionType === 'swap' ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-center gap-y-1\", children: [explorerURLs?.source && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { variant: \"link\", className: \"text-nexus-accent underline text-base font-semibold font-nexus-primary cursor-pointer p-0\", onClick: () => window.open(explorerURLs.source, '_blank'), children: [\"View Source Transaction\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-6 h-6 ml-2 text-nexus-muted-secondary\" })] })), explorerURLs?.destination && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { variant: \"link\", className: \"text-nexus-accent underline text-base font-semibold font-nexus-primary cursor-pointer p-0\", onClick: () => window.open(explorerURLs.destination, '_blank'), children: [\"View Destination Transaction\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-6 h-6 ml-2 text-nexus-muted-secondary\" })] }))] })) : (explorerURL && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, { variant: \"link\", className: \" text-nexus-accent underline text-base font-semibold font-nexus-primary cursor-pointer\", onClick: () => window.open(explorerURL, '_blank'), children: [\"View on Explorer\", ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExternalLink, { className: \"w-6 h-6 ml-2 text-nexus-muted-secondary\" })] })))] })] }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"w-full flex flex-col items-center gap-y-3\", children: [status === 'success' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { className: \"w-full px-6\", initial: { y: 20, opacity: 0 }, animate: { y: 0, opacity: 1 }, transition: { type: 'spring', stiffness: 400, damping: 25, delay: 0.5 }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { onClick: cancelTransaction, className: \"w-full bg-nexus-primary-hover font-nexus-primary text-[16px] text-nexus-snow-white font-semibold h-12 hover:not-even:bg-gray-700 rounded-nexus-md\", children: \"Close\" }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-center gap-x-1.5 text-xs h-8 bg-nexus-secondary-background w-full rounded-b-nexus-xl\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-[#4C4C4C] font-nexus-primary\", children: \"Powered By\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SmallAvailLogo, {})] })] })] }));\n};\n\nconst DragConstraintsContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst DragConstraintsProvider = ({ children }) => {\n    const dragConstraintsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DragConstraintsContext.Provider, { value: { dragConstraints: dragConstraintsRef }, children: [children, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: dragConstraintsRef, className: \"fixed inset-0 pointer-events-none z-50\" })] }));\n};\nconst useDragConstraints = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DragConstraintsContext);\n    if (!context) {\n        throw new Error('useDragConstraints must be used within DragConstraintsProvider');\n    }\n    return context.dragConstraints;\n};\n\nconst COLLAPSED = { width: 400, height: 120, radius: 16 };\nconst EXPANDED = { width: 480, height: 500, radius: 16 };\nconst TransactionProcessorShell = ({ disableCollapse = false }) => {\n    const lastLoggedProcessingState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('');\n    const { activeTransaction, processing, explorerURL, explorerURLs, timer, toggleTransactionCollapse, isTransactionCollapsed, cancelTransaction, } = useInternalNexus();\n    const { type: transactionType, simulationResult } = activeTransaction;\n    const sources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (!simulationResult)\n            return [];\n        if (transactionType === 'bridge' || transactionType === 'transfer') {\n            return simulationResult?.intent?.sources?.map((s) => s.chainID) || [];\n        }\n        if (transactionType === 'swap') {\n            const swapResult = simulationResult;\n            // For swap, extract chain IDs from sources\n            return swapResult?.intent?.sources?.map((source) => source?.chain?.id) || [];\n        }\n        const bridgeExecuteResult = simulationResult;\n        // If bridge was skipped, use the target chain as the source since we're executing directly\n        if (bridgeExecuteResult?.metadata?.bridgeSkipped) {\n            return [bridgeExecuteResult.metadata.targetChain];\n        }\n        return bridgeExecuteResult.bridgeSimulation?.intent?.sources?.map((s) => s.chainID) || [];\n    }, [simulationResult, transactionType]);\n    const destination = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (!simulationResult)\n            return 0;\n        if (transactionType === 'bridge' || transactionType === 'transfer') {\n            return simulationResult?.intent?.destination?.chainID || 0;\n        }\n        if (transactionType === 'swap') {\n            const swapResult = simulationResult;\n            // For swap, extract destination chain ID\n            return swapResult?.intent?.destination?.chain?.id ?? 0;\n        }\n        const bridgeExecuteResult = simulationResult;\n        // If bridge was skipped, use the target chain as the destination\n        if (bridgeExecuteResult?.metadata?.bridgeSkipped) {\n            return bridgeExecuteResult.metadata.targetChain;\n        }\n        return bridgeExecuteResult.bridgeSimulation?.intent?.destination?.chainID || 0;\n    }, [simulationResult, transactionType]);\n    const token = getTokenFromInputData(activeTransaction.inputData) || '';\n    const sourceChainMeta = sources\n        .filter((s) => s != null && !isNaN(s))\n        .map((s) => CHAIN_METADATA[s])\n        .filter(Boolean);\n    const destChainMeta = destination\n        ? CHAIN_METADATA[destination]\n        : null;\n    const tokenMeta = token ? TOKEN_METADATA[token] : null;\n    const getDescription = () => {\n        if (activeTransaction?.type === 'swap') {\n            if (processing?.statusText === 'Swap is completed') {\n                return 'Transaction Completed Successfully';\n            }\n            const destinationToken = activeTransaction?.simulationResult?.intent\n                ?.destination?.token;\n            const destinationTokenSymbol = destinationToken\n                ? destinationToken.symbol.toUpperCase()\n                : 'token';\n            return `${getOperationText(transactionType)} ${tokenMeta?.symbol || 'token'} to ${destinationTokenSymbol} on ${destChainMeta?.name || 'destination chain'}`;\n        }\n        if (activeTransaction?.executionResult?.success)\n            return 'Transaction Completed Successfully';\n        return `${getOperationText(transactionType)} ${tokenMeta?.symbol || 'token'} from ${sourceChainMeta.length > 1 ? 'multiple chains' : sourceChainMeta[0]?.name} to ${destChainMeta?.name || 'destination chain'}`;\n    };\n    const shellActive = ['processing', 'success', 'error'].includes(activeTransaction.status);\n    const dragConstraints = useDragConstraints();\n    const [windowSize, setWindowSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({ width: 0, height: 0 });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const update = () => setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n        update();\n        window.addEventListener('resize', update);\n        return () => window.removeEventListener('resize', update);\n    }, []);\n    const collapsedPos = {\n        x: Math.max(16, windowSize.width - COLLAPSED.width - 16),\n        y: 16,\n    };\n    const expandedPos = {\n        x: Math.max(0, (windowSize.width - EXPANDED.width) / 2),\n        y: Math.max(0, (windowSize.height - EXPANDED.height) / 2),\n    };\n    if (!shellActive || !transactionType || !simulationResult) {\n        return null;\n    }\n    // Only log processing changes when state actually changes to reduce noise\n    const processingStateKey = `${processing?.currentStep}-${processing?.totalSteps}-${processing?.statusText}-${processing?.animationProgress}`;\n    if (lastLoggedProcessingState.current !== processingStateKey && processing) {\n        logger.info('processing from hook', processing);\n        lastLoggedProcessingState.current = processingStateKey;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_16__.AnimatePresence, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [!isTransactionCollapsed && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: { duration: 0.25 }, className: \"fixed inset-0 bg-nexus-backdrop backdrop-blur-[4px] z-40\" }, \"tx-backdrop\")), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { drag: isTransactionCollapsed, dragConstraints: dragConstraints, dragElastic: 0.05, dragMomentum: false, whileDrag: {\n                        scale: 0.95,\n                        rotate: 2,\n                        boxShadow: '0 25px 50px -12px rgba(0,0,0,0.4)',\n                        zIndex: 60,\n                    }, initial: false, animate: {\n                        width: isTransactionCollapsed ? COLLAPSED?.width : EXPANDED?.width,\n                        height: isTransactionCollapsed ? COLLAPSED?.height : EXPANDED?.height,\n                        x: isTransactionCollapsed ? collapsedPos?.x : expandedPos?.x,\n                        y: isTransactionCollapsed ? collapsedPos?.y : expandedPos?.y,\n                        borderRadius: isTransactionCollapsed ? COLLAPSED?.radius : EXPANDED?.radius,\n                        boxShadow: isTransactionCollapsed\n                            ? '0 10px 25px -5px rgba(0,0,0,0.2)'\n                            : '0 25px 50px -12px rgba(0,0,0,0.25)',\n                        opacity: 1,\n                    }, exit: { opacity: 0 }, transition: { type: 'spring', damping: 22, stiffness: 320, mass: 0.6 }, className: `fixed top-0 left-0 bg-white font-nexus-primary overflow-hidden z-50 pointer-events-auto rounded-nexus-xl ${isTransactionCollapsed\n                        ? 'cursor-move px-4 py-2 border border-gray-200'\n                        : 'shadow-card  flex flex-col items-center justify-between w-full'}`, children: isTransactionCollapsed ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ProcessorMiniCard, { status: activeTransaction?.status, cancelTransaction: cancelTransaction, toggleTransactionCollapse: toggleTransactionCollapse, sourceChainMeta: sourceChainMeta, destChainMeta: destChainMeta, tokenMeta: tokenMeta, transactionType: transactionType, simulationResult: simulationResult, processing: processing, explorerURL: explorerURL, explorerURLs: explorerURLs, timer: timer, description: getDescription(), error: activeTransaction?.error, executionResult: activeTransaction?.executionResult })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ProcessorFullCard, { status: activeTransaction?.status, cancelTransaction: cancelTransaction, toggleTransactionCollapse: toggleTransactionCollapse, sourceChainMeta: sourceChainMeta, destChainMeta: destChainMeta, tokenMeta: tokenMeta, transactionType: transactionType, simulationResult: simulationResult, processing: processing, explorerURL: explorerURL, explorerURLs: explorerURLs, timer: timer, description: getDescription(), error: activeTransaction?.error, executionResult: activeTransaction?.executionResult, disableCollapse: disableCollapse })) }, \"tx-card\")] }) }));\n};\nTransactionProcessorShell.displayName = 'TransactionProcessorShell';\nvar TransactionProcessorShell$1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(TransactionProcessorShell);\n\n// Swap-specific step handling\nconst getTextFromSwapStep = (step) => {\n    switch (step.type) {\n        case 'CREATE_PERMIT_EOA_TO_EPHEMERAL':\n            return `Creating permit for eoa to ephemeral for ${step.symbol} on ${step.chain?.name || 'chain'}`;\n        case 'CREATE_PERMIT_FOR_SOURCE_SWAP':\n            return `Creating permit for source swap for ${step.symbol} on ${step.chain?.name || 'chain'}`;\n        case 'DESTINATION_SWAP_BATCH_TX':\n            return `Creating destination swap transaction`;\n        case 'DESTINATION_SWAP_HASH':\n            return `Hash for destination swap on ${step.chain?.name || 'chain'}`;\n        case 'DETERMINING_SWAP':\n            return `Generating routes for XCS`;\n        case 'RFF_ID':\n            return `Chain abstracted intent`;\n        case 'SOURCE_SWAP_BATCH_TX':\n            return 'Creating source swap batch transactions';\n        case 'SOURCE_SWAP_HASH':\n            return `Hash for source swap on ${step.chain?.name || 'chain'}`;\n        case 'SWAP_COMPLETE':\n            return `Swap is completed`;\n        case 'SWAP_START':\n            return 'Swap starting';\n        default:\n            return 'Processing swap';\n    }\n};\nconst swapSteps = [\n    { id: 0, type: 'SWAP_START', typeID: 'SWAP_START', name: 'Starting Swap' },\n    { id: 1, type: 'DETERMINING_SWAP', typeID: 'DETERMINING_SWAP', name: 'Finding Best Route' },\n    {\n        id: 2,\n        type: 'SOURCE_SWAP_BATCH_TX',\n        typeID: 'SOURCE_SWAP_BATCH_TX',\n        name: 'Source Transaction',\n    },\n    { id: 3, type: 'SOURCE_SWAP_HASH', typeID: 'SOURCE_SWAP_HASH', name: 'Source Transaction hash' },\n    { id: 4, type: 'RFF_ID', typeID: 'RFF_ID', name: 'Source Transaction hash' },\n    {\n        id: 5,\n        type: 'DESTINATION_SWAP_BATCH_TX',\n        typeID: 'DESTINATION_SWAP_BATCH_TX',\n        name: 'Destination Transaction',\n    },\n    {\n        id: 6,\n        type: 'DESTINATION_SWAP_HASH',\n        typeID: 'DESTINATION_SWAP_HASH',\n        name: 'Destination Transaction hash',\n    },\n    {\n        id: 7,\n        type: 'CREATE_PERMIT_FOR_SOURCE_SWAP',\n        typeID: 'CREATE_PERMIT_FOR_SOURCE_SWAP',\n        name: 'Permit',\n    },\n    {\n        id: 8,\n        type: 'CREATE_PERMIT_EOA_TO_EPHEMERAL',\n        typeID: 'CREATE_PERMIT_EOA_TO_EPHEMERAL',\n        name: 'Permit Ephemeral',\n    },\n    { id: 9, type: 'SWAP_COMPLETE', typeID: 'SWAP_COMPLETE', name: 'Swap Complete' },\n];\nconst useListenTransaction = ({ sdk, activeTransaction, }) => {\n    const { type } = activeTransaction;\n    const DEFAULT_INITIAL_STEPS = 10;\n    const [processing, setProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => ({\n        currentStep: 0,\n        totalSteps: DEFAULT_INITIAL_STEPS,\n        steps: Array.from({ length: DEFAULT_INITIAL_STEPS }, (_, i) => ({\n            id: i,\n            completed: false,\n            progress: 0,\n        })),\n        statusText: 'Verifying Request',\n        animationProgress: 0,\n    }));\n    const [explorerURL, setExplorerURL] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [explorerURLs, setExplorerURLs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const resetProcessingState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        setProcessing({\n            currentStep: 0,\n            totalSteps: DEFAULT_INITIAL_STEPS,\n            steps: Array.from({ length: DEFAULT_INITIAL_STEPS }, (_, i) => ({\n                id: i,\n                completed: false,\n                progress: 0,\n            })),\n            statusText: 'Verifying Request',\n            animationProgress: 0,\n        });\n        setExplorerURL(null);\n        setExplorerURLs({});\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (!sdk)\n            return;\n        // Special handling for swap transactions\n        if (type === 'swap') {\n            // For swap, we create our own progress steps since no expected_steps are emitted\n            const initialSteps = swapSteps.map((step, index) => ({\n                id: index,\n                completed: false,\n                progress: 0,\n                stepData: step, // Step structure for swap mock data\n            }));\n            setProcessing({\n                currentStep: 0,\n                totalSteps: swapSteps.length,\n                steps: initialSteps,\n                statusText: 'Preparing Swap',\n                animationProgress: 0,\n            });\n            const handleSwapStepComplete = (stepData) => {\n                setProcessing((prev) => {\n                    // Find matching step by type\n                    const stepIndex = swapSteps.findIndex((s) => s.typeID === stepData.type);\n                    if (stepIndex === -1) {\n                        // Unknown step, just advance progress\n                        const nextStep = Math.min(prev.currentStep + 1, prev.totalSteps);\n                        return {\n                            ...prev,\n                            currentStep: nextStep,\n                            animationProgress: (nextStep / prev.totalSteps) * 100,\n                            statusText: getTextFromSwapStep(stepData),\n                        };\n                    }\n                    const newSteps = [...prev.steps];\n                    // Mark all steps up to and including current as completed\n                    for (let i = 0; i <= stepIndex && i < newSteps.length; i++) {\n                        newSteps[i] = {\n                            ...newSteps[i],\n                            completed: true,\n                            progress: 100,\n                            stepData: i === stepIndex ? stepData : newSteps[i].stepData,\n                        };\n                    }\n                    const nextStep = Math.min(stepIndex + 1, prev.totalSteps);\n                    const animationProgress = ((stepIndex + 1) / prev.totalSteps) * 100;\n                    return {\n                        ...prev,\n                        currentStep: nextStep,\n                        steps: newSteps,\n                        animationProgress: Math.min(animationProgress, 100),\n                        statusText: getTextFromSwapStep(stepData),\n                    };\n                });\n                // Handle explorer URL extraction for swap\n                if (stepData.type === 'SOURCE_SWAP_HASH' && 'explorerURL' in stepData) {\n                    setExplorerURLs((prev) => ({ ...prev, source: stepData.explorerURL }));\n                    setExplorerURL(stepData.explorerURL); // Keep for backward compatibility\n                }\n                else if (stepData.type === 'DESTINATION_SWAP_HASH' && 'explorerURL' in stepData) {\n                    setExplorerURLs((prev) => ({ ...prev, destination: stepData.explorerURL }));\n                    setExplorerURL(stepData.explorerURL); // Update to show latest\n                }\n            };\n            sdk?.nexusEvents?.on(NEXUS_EVENTS.SWAP_STEPS, handleSwapStepComplete);\n            return () => {\n                sdk.nexusEvents?.off(NEXUS_EVENTS.SWAP_STEPS, handleSwapStepComplete);\n            };\n        }\n        // Regular handling for non-swap transactions\n        // Flag to know when we have received the complete expected-steps list\n        let expectedReceived = false;\n        // Queue to store stepComplete events that arrive before expected steps\n        const pendingSteps = [];\n        const expectedEventType = type === 'bridgeAndExecute'\n            ? NEXUS_EVENTS.BRIDGE_EXECUTE_EXPECTED_STEPS\n            : NEXUS_EVENTS.EXPECTED_STEPS;\n        const completedEventType = type === 'bridgeAndExecute'\n            ? NEXUS_EVENTS.BRIDGE_EXECUTE_COMPLETED_STEPS\n            : NEXUS_EVENTS.STEP_COMPLETE;\n        const handleExpectedSteps = (expectedSteps) => {\n            expectedReceived = true;\n            const stepCount = Array.isArray(expectedSteps) ? expectedSteps.length : expectedSteps;\n            const steps = Array.isArray(expectedSteps) ? expectedSteps : [];\n            // Build initial step objects from expected steps array\n            const initialSteps = Array.from({ length: stepCount }, (_, i) => ({\n                id: i,\n                completed: false,\n                progress: 0,\n                stepData: steps[i] || null,\n            }));\n            // Preserve any steps that were already completed before this event arrived\n            setProcessing((prev) => {\n                const completedTypeIDs = prev.steps\n                    .filter((s) => s.completed)\n                    .map((s) => s.stepData?.typeID);\n                const mergedSteps = initialSteps.map((step) => {\n                    const typeID = step.stepData?.typeID;\n                    if (typeID && completedTypeIDs.includes(typeID)) {\n                        return { ...step, completed: true, progress: 100 };\n                    }\n                    return step;\n                });\n                const completedCount = mergedSteps.filter((s) => s.completed).length;\n                let newState = {\n                    ...prev,\n                    totalSteps: stepCount,\n                    steps: mergedSteps,\n                    currentStep: completedCount,\n                    animationProgress: (completedCount / stepCount) * 100,\n                    statusText: 'Verifying Request',\n                };\n                // Now process any queued steps that arrived before expected steps\n                if (pendingSteps.length > 0) {\n                    pendingSteps.forEach((queuedStep) => {\n                        newState = processStep(newState, queuedStep);\n                    });\n                    pendingSteps.length = 0; // clear queue\n                }\n                return newState;\n            });\n        };\n        // Helper to process a single step and return updated state (pure function)\n        const processStep = (prev, stepData) => {\n            const { type: stepType, typeID, data } = stepData;\n            let stepIndex = prev.steps.findIndex((s) => {\n                const id = s.stepData?.typeID;\n                return id === typeID;\n            });\n            if (stepIndex === -1) {\n                stepIndex = Math.min(prev.currentStep, prev.totalSteps - 1);\n            }\n            const newSteps = [...prev.steps];\n            for (let i = 0; i <= stepIndex && i < newSteps.length; i++) {\n                newSteps[i] = {\n                    ...newSteps[i],\n                    completed: true,\n                    progress: 100,\n                    stepData: i === stepIndex ? stepData : newSteps[i].stepData,\n                };\n            }\n            const nextStep = Math.min(stepIndex + 1, prev.totalSteps);\n            const animationProgress = ((stepIndex + 1) / prev.totalSteps) * 100;\n            let description = getStatusText(stepData, type || 'bridge');\n            if (stepType === 'INTENT_COLLECTION' && data) {\n                description = 'Collecting Confirmations';\n            }\n            return {\n                ...prev,\n                currentStep: nextStep,\n                steps: newSteps,\n                animationProgress: Math.min(animationProgress, 100),\n                statusText: description,\n            };\n        };\n        const handleStepComplete = (stepData) => {\n            const { typeID, data } = stepData;\n            // Always advance progress for better UX\n            setProcessing((prev) => processStep(prev, stepData));\n            // Queue until we have real mapping\n            if (!expectedReceived) {\n                pendingSteps.push(stepData);\n            }\n            if (typeID === 'IS' && data && 'explorerURL' in data) {\n                setExplorerURL(data?.explorerURL);\n            }\n        };\n        sdk?.nexusEvents?.on(expectedEventType, handleExpectedSteps);\n        sdk?.nexusEvents?.on(completedEventType, handleStepComplete);\n        return () => {\n            sdk.nexusEvents?.off(expectedEventType, handleExpectedSteps);\n            sdk.nexusEvents?.off(completedEventType, handleStepComplete);\n        };\n    }, [sdk, type]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (!sdk)\n            return;\n        const handleBeforeUnload = (e) => {\n            if (activeTransaction.status === 'processing' ||\n                activeTransaction.status === 'set_allowance') {\n                e.preventDefault();\n                e.returnValue = 'A transaction is currently in progress. Are you sure you want to leave?';\n            }\n            return 'A transaction is currently in progress. Are you sure you want to leave?';\n        };\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, [activeTransaction.status]);\n    return { processing, explorerURL, explorerURLs, resetProcessingState };\n};\n\nconst controllers = {\n    bridge: new BridgeController(),\n    transfer: new TransferController(),\n    bridgeAndExecute: new BridgeAndExecuteController(),\n};\n// Type guards\nconst NexusContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst initialState = {\n    type: null,\n    status: 'idle',\n    reviewStatus: 'gathering_input',\n    inputData: null,\n    prefillFields: {},\n    simulationResult: null,\n    executionResult: null,\n    error: null,\n};\n// Utility: extract chain identifier regardless of transaction type\nfunction getInputChainId(data) {\n    if (!data)\n        return undefined;\n    if ('chainId' in data && data.chainId !== undefined)\n        return data.chainId;\n    if ('toChainId' in data && data.toChainId !== undefined)\n        return data.toChainId;\n    return undefined;\n}\nfunction InternalNexusProvider({ config, children, disableCollapse, }) {\n    const [sdk] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => new _avail_project_nexus_core__WEBPACK_IMPORTED_MODULE_17__.NexusSDK({ network: config?.network ?? 'mainnet', debug: config?.debug ?? false }));\n    const [provider, setProvider] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const [isSdkInitialized, setIsSdkInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [activeTransaction, setActiveTransaction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialState);\n    const [unifiedBalance, setUnifiedBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [exchangeRates, setExchangeRates] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [isSimulating, setIsSimulating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [insufficientBalance, setInsufficientBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isTransactionCollapsed, setIsTransactionCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [timer, setTimer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [allowanceError, setAllowanceError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isSettingAllowance, setIsSettingAllowance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Swap-specific state\n    const swapAllowCallbackRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isSwapExecuting, setIsSwapExecuting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const timerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const debounceTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Keep a live ref of SDK initialized state to avoid stale closures in callbacks\n    const isSdkInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        isSdkInitializedRef.current = isSdkInitialized;\n    }, [isSdkInitialized]);\n    const activeController = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (!activeTransaction.type)\n            return null;\n        if (activeTransaction.type === 'swap')\n            return null; // Swaps handled directly in provider\n        return controllers[activeTransaction.type];\n    }, [activeTransaction.type]);\n    const { processing, explorerURL, explorerURLs, resetProcessingState } = useListenTransaction({\n        sdk,\n        activeTransaction,\n    });\n    const fetchExchangeRates = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {\n        try {\n            const response = await fetch('https://api.coinbase.com/v2/exchange-rates?currency=USD');\n            const data = await response.json();\n            const rates = (data?.data?.rates ?? {});\n            logger.info('all rates', rates);\n            // Convert from \"units per USD\" to \"USD per unit\" for easier UI multiplication\n            const usdPerUnit = {};\n            for (const [symbol, value] of Object.entries(rates)) {\n                const unitsPerUsd = parseFloat(value);\n                if (Number.isFinite(unitsPerUsd) && unitsPerUsd > 0) {\n                    usdPerUnit[symbol] = 1 / unitsPerUsd;\n                }\n            }\n            // Ensure common stablecoins have a sane fallback\n            ['USD', 'USDC', 'USDT'].forEach((stable) => {\n                if (usdPerUnit[stable] === undefined)\n                    usdPerUnit[stable] = 1;\n            });\n            logger.info('exchange rates', usdPerUnit);\n            setExchangeRates(usdPerUnit);\n        }\n        catch (error) {\n            logger.error('Error fetching exchange rates:', error);\n        }\n    }, []);\n    const fetchBalances = async () => {\n        const unifiedBalance = await sdk.getUnifiedBalances();\n        logger.debug('Unified balance', { unifiedBalance });\n        setUnifiedBalance(unifiedBalance);\n    };\n    const initializeSdk = async (ethProvider) => {\n        if (isSdkInitialized)\n            return true;\n        const eipProvider = ethProvider ?? provider;\n        if (!eipProvider) {\n            setActiveTransaction((prev) => ({\n                ...prev,\n                status: 'simulation_error',\n                error: new Error('Wallet provider not connected.'),\n            }));\n            return false;\n        }\n        if (!provider && eipProvider) {\n            setProvider(ethProvider);\n        }\n        try {\n            setActiveTransaction((prev) => ({ ...prev, status: 'initializing' }));\n            await sdk.initialize(eipProvider);\n            await fetchExchangeRates();\n            await fetchBalances();\n            setIsSdkInitialized(sdk.isInitialized());\n            isSdkInitializedRef.current = sdk.isInitialized();\n            setActiveTransaction((prev) => ({ ...prev, status: 'review' }));\n            return true;\n        }\n        catch (err) {\n            logger.error('SDK initialization failed:', err);\n            const error = err instanceof Error ? err : new Error('SDK Initialization failed.');\n            setActiveTransaction((prev) => ({ ...prev, status: 'simulation_error', error }));\n            return false;\n        }\n    };\n    const deinitializeSdk = async () => {\n        if (!isSdkInitialized)\n            return;\n        try {\n            await sdk?.deinit();\n            reset();\n        }\n        catch (e) {\n            logger.error('Error deinitializing SDK', e);\n        }\n    };\n    const reset = () => {\n        setProvider(undefined);\n        setIsSdkInitialized(false);\n        isSdkInitializedRef.current = false;\n        setActiveTransaction(initialState);\n        setUnifiedBalance([]);\n        setIsSimulating(false);\n        setInsufficientBalance(false);\n        setIsTransactionCollapsed(true);\n        setTimer(0);\n        setAllowanceError(null);\n        setIsSettingAllowance(false);\n    };\n    const startTransaction = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((type, prefillData = {}) => {\n        // Track which fields were prefilled\n        const prefillFields = {};\n        if (prefillData) {\n            if ('chainId' in prefillData && prefillData.chainId !== undefined) {\n                prefillFields.chainId = true;\n                if (type === 'bridgeAndExecute') {\n                    prefillFields.toChainId = true;\n                }\n            }\n            if (type === 'bridgeAndExecute' &&\n                'toChainId' in prefillData &&\n                prefillData.toChainId !== undefined) {\n                prefillFields.toChainId = true;\n            }\n            if ('token' in prefillData && prefillData.token !== undefined) {\n                prefillFields.token = true;\n            }\n            if ('amount' in prefillData && prefillData.amount !== undefined) {\n                prefillFields.amount = true;\n            }\n            if ('recipient' in prefillData && prefillData.recipient !== undefined) {\n                prefillFields.recipient = true;\n            }\n            // Handle swap-specific fields\n            if ('fromChainID' in prefillData && prefillData.fromChainID !== undefined) {\n                prefillFields.fromChainID = true;\n            }\n            if ('toChainID' in prefillData && prefillData.toChainID !== undefined) {\n                prefillFields.toChainID = true;\n            }\n            if ('fromTokenAddress' in prefillData && prefillData.fromTokenAddress !== undefined) {\n                prefillFields.fromTokenAddress = true;\n            }\n            if ('toTokenAddress' in prefillData && prefillData.toTokenAddress !== undefined) {\n                prefillFields.toTokenAddress = true;\n            }\n            if ('fromAmount' in prefillData && prefillData.fromAmount !== undefined) {\n                prefillFields.fromAmount = true;\n            }\n            if ('toAmount' in prefillData && prefillData.toAmount !== undefined) {\n                prefillFields.toAmount = true;\n            }\n        }\n        const normalizedPrefillData = type === 'bridgeAndExecute' &&\n            'toChainId' in prefillData &&\n            prefillData.toChainId !== undefined\n            ? { ...prefillData, chainId: prefillData.toChainId }\n            : prefillData;\n        setActiveTransaction({\n            ...initialState,\n            type,\n            status: isSdkInitializedRef.current ? 'review' : 'initializing',\n            inputData: normalizedPrefillData,\n            prefillFields,\n        });\n    }, [isSdkInitialized]);\n    const cancelTransaction = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {\n        setIsSimulating(false);\n        setInsufficientBalance(false);\n        setIsTransactionCollapsed(true);\n        setTimer(0);\n        setActiveTransaction(initialState);\n        resetProcessingState();\n        if (isSdkInitialized && sdk) {\n            try {\n                const updatedBalance = await sdk.getUnifiedBalances();\n                setUnifiedBalance(updatedBalance);\n            }\n            catch (err) {\n                logger.warn('Failed to refetch unified balance after transaction completion:', err);\n            }\n        }\n    }, [isSdkInitialized, sdk, resetProcessingState]);\n    const toggleTransactionCollapse = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        setIsTransactionCollapsed((prev) => !prev);\n    }, []);\n    const updateInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((data) => {\n        setActiveTransaction((prev) => ({\n            ...prev,\n            inputData: { ...prev.inputData, ...data },\n            reviewStatus: 'gathering_input',\n            status: prev.status === 'simulation_error' ? 'review' : prev.status,\n            error: prev.status === 'simulation_error' ? null : prev.error,\n        }));\n        setIsSimulating(false);\n        setInsufficientBalance(false);\n    }, []);\n    const checkInsufficientBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((inputData) => {\n        const token = getTokenFromInputData(inputData);\n        const amount = getAmountFromInputData(inputData);\n        if (!token || !amount || !unifiedBalance.length) {\n            return false;\n        }\n        const tokenBalance = unifiedBalance.find((asset) => asset.symbol === token);\n        if (!tokenBalance) {\n            logger.warn('Token not found in unified balance:', {\n                requestedToken: token,\n                availableTokens: unifiedBalance.map((asset) => asset.symbol),\n            });\n            return true; // Consider it insufficient if token not found\n        }\n        const requestedAmount = parseFloat(amount.toString());\n        const availableBalance = parseFloat(tokenBalance.balance);\n        const isInsufficient = requestedAmount > availableBalance;\n        if (isInsufficient) {\n            logger.warn('Insufficient balance detected:', {\n                token: token,\n                requested: requestedAmount,\n                available: availableBalance,\n                deficit: requestedAmount - availableBalance,\n            });\n        }\n        return isInsufficient;\n    }, [unifiedBalance]);\n    const retrySimulation = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        setIsSimulating(false);\n        setActiveTransaction((prev) => ({\n            ...prev,\n            status: 'review',\n            error: null,\n            reviewStatus: 'gathering_input',\n        }));\n    }, []);\n    const triggerSimulation = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {\n        if (debounceTimeoutRef.current) {\n            clearTimeout(debounceTimeoutRef.current);\n            debounceTimeoutRef.current = null;\n        }\n        const conditions = {\n            isSdkInitialized,\n            statusOk: activeTransaction.status === 'review' || activeTransaction.status === 'simulation_error',\n            reviewStatusOk: activeTransaction.reviewStatus === 'gathering_input',\n            hasSufficientInput: activeTransaction.inputData\n                ? (() => {\n                    if (activeTransaction.type === 'swap') {\n                        // For swaps, check if we have sufficient input directly\n                        const data = activeTransaction.inputData;\n                        return !!(data.fromChainID &&\n                            data.toChainID &&\n                            data.fromTokenAddress &&\n                            data.toTokenAddress &&\n                            data.fromAmount &&\n                            parseFloat(data.fromAmount?.toString() || '0') > 0);\n                    }\n                    else if (activeController) {\n                        return activeController.hasSufficientInput(activeTransaction.inputData);\n                    }\n                    return false;\n                })()\n                : false,\n            notSimulating: !isSimulating,\n        };\n        if (activeTransaction.inputData &&\n            conditions.isSdkInitialized &&\n            conditions.statusOk &&\n            conditions.reviewStatusOk &&\n            (activeController || activeTransaction.type === 'swap') && // Swaps don't use controller\n            conditions.hasSufficientInput &&\n            conditions.notSimulating) {\n            const { inputData } = activeTransaction;\n            const hasInsufficientBalance = checkInsufficientBalance(inputData);\n            setInsufficientBalance(hasInsufficientBalance);\n            if (hasInsufficientBalance) {\n                // Clear simulation result and ensure we stay in review mode for insufficient balance\n                setActiveTransaction((prev) => ({\n                    ...prev,\n                    simulationResult: null,\n                    reviewStatus: 'gathering_input',\n                    status: 'review', // Explicitly ensure we stay in review mode\n                }));\n                setIsSimulating(false); // Ensure simulation state is cleared\n                return;\n            }\n            setIsSimulating(true);\n            debounceTimeoutRef.current = setTimeout(async () => {\n                // Check if input has changed since this timeout was set (simple cancellation)\n                const currentInputData = activeTransaction.inputData;\n                if (getAmountFromInputData(currentInputData) !==\n                    getAmountFromInputData(inputData) ||\n                    getTokenFromInputData(currentInputData) !==\n                        getTokenFromInputData(inputData) ||\n                    getInputChainId(currentInputData) !== getInputChainId(inputData)) {\n                    setIsSimulating(false); // Reset simulation state\n                    return;\n                }\n                // Clear previous simulation result when starting new simulation\n                setActiveTransaction((prev) => ({\n                    ...prev,\n                    simulationResult: null,\n                    reviewStatus: 'simulating',\n                    status: 'review', // Explicitly maintain review status\n                }));\n                try {\n                    let simulationResult;\n                    if (activeTransaction.type === 'swap') {\n                        // For swaps, we skip simulation here since it's handled by initiateSwap\n                        // This code path should not be reached for swaps anymore\n                        await initiateSwap(inputData);\n                        return;\n                    }\n                    else if (activeController) {\n                        // Handle regular transaction controllers\n                        simulationResult = await activeController.runReview(sdk, inputData);\n                    }\n                    else {\n                        throw new Error('No controller available for transaction type');\n                    }\n                    // Final check before applying results - ensure input hasn't changed\n                    const finalInputData = activeTransaction.inputData;\n                    if (getAmountFromInputData(finalInputData) !==\n                        getAmountFromInputData(inputData) ||\n                        getTokenFromInputData(finalInputData) !==\n                            getTokenFromInputData(inputData) ||\n                        getInputChainId(finalInputData) !== getInputChainId(inputData)) {\n                        setIsSimulating(false);\n                        return;\n                    }\n                    // Check if simulation failed\n                    if (simulationResult &&\n                        (('success' in simulationResult && !simulationResult.success) ||\n                            ('error' in simulationResult && simulationResult.error) ||\n                            // For bridge simulation within BridgeAndExecuteSimulationResult\n                            // Only consider null bridgeSimulation a failure if bridge wasn't intentionally skipped\n                            ('bridgeSimulation' in simulationResult &&\n                                simulationResult.bridgeSimulation === null &&\n                                !simulationResult?.metadata?.bridgeSkipped))) {\n                        setActiveTransaction((prev) => ({\n                            ...prev,\n                            simulationResult,\n                            status: 'simulation_error',\n                            error: new Error('error' in simulationResult\n                                ? simulationResult.error || 'Simulation failed'\n                                : 'Simulation failed'),\n                            reviewStatus: 'gathering_input',\n                        }));\n                        return;\n                    }\n                    setActiveTransaction((prev) => ({\n                        ...prev,\n                        simulationResult,\n                        reviewStatus: simulationResult?.allowance?.needsApproval ? 'needs_allowance' : 'ready',\n                        status: 'review',\n                    }));\n                }\n                catch (err) {\n                    logger.error('Simulation failed:', err);\n                    const error = err instanceof Error ? err : new Error('Simulation failed.');\n                    setActiveTransaction((prev) => ({\n                        ...prev,\n                        status: 'simulation_error',\n                        error,\n                        reviewStatus: 'gathering_input',\n                    }));\n                }\n                finally {\n                    setIsSimulating(false);\n                }\n            }, 2000);\n        }\n    }, [\n        activeTransaction.status,\n        activeTransaction.reviewStatus,\n        activeTransaction.inputData,\n        activeController,\n        sdk,\n        isSdkInitialized,\n        checkInsufficientBalance,\n    ]);\n    const confirmAndProceed = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {\n        if (!activeController || !activeTransaction.inputData || !activeTransaction.simulationResult)\n            return;\n        if (insufficientBalance) {\n            logger.warn('Attempted to process transaction with insufficient balance');\n            return;\n        }\n        if (isSimulating) {\n            logger.warn('Attempted to process transaction while simulation is running');\n            return;\n        }\n        if (activeTransaction.status !== 'review') {\n            logger.warn('Attempted to process transaction from invalid status:', activeTransaction.status);\n            return;\n        }\n        if (activeTransaction.reviewStatus !== 'ready' &&\n            activeTransaction.reviewStatus !== 'needs_allowance') {\n            logger.warn('Attempted to process transaction with invalid review status:', activeTransaction.reviewStatus);\n            return;\n        }\n        if (activeTransaction.type === 'swap') {\n            // Swaps should not use confirmAndProceed - they use proceedWithSwap instead\n            logger.error('confirmAndProceed should not be called for swaps - use proceedWithSwap instead');\n            throw new Error('confirmAndProceed should not be called for swaps - use proceedWithSwap instead');\n        }\n        if (!activeController) {\n            throw new Error('No controller available for transaction type');\n        }\n        setActiveTransaction((prev) => ({ ...prev, status: 'processing' }));\n        try {\n            // Handle regular transaction controllers\n            const executionResult = await activeController.confirmAndProceed(sdk, activeTransaction.inputData, activeTransaction.simulationResult);\n            // For non-swap transactions, use the traditional success/error handling\n            setActiveTransaction((prev) => ({\n                ...prev,\n                status: executionResult?.success ? 'success' : 'error',\n                error: executionResult?.error ? new Error(executionResult.error) : null,\n                executionResult,\n            }));\n        }\n        catch (err) {\n            logger.error('Transaction failed.', err);\n            const error = err instanceof Error ? err : new Error('Transaction failed.');\n            setActiveTransaction((prev) => ({ ...prev, status: 'error', error }));\n        }\n    }, [\n        activeController,\n        sdk,\n        activeTransaction.inputData,\n        activeTransaction.simulationResult,\n        insufficientBalance,\n        isSimulating,\n        activeTransaction.status,\n        activeTransaction.reviewStatus,\n    ]);\n    // Single function to handle entire swap flow\n    const initiateSwap = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (inputData) => {\n        try {\n            logger.info('Swap Provider: Starting swap process', inputData);\n            // Validate required fields\n            if (!inputData?.fromChainID ||\n                !inputData?.toChainID ||\n                !inputData?.toTokenAddress ||\n                !inputData?.fromAmount ||\n                !inputData?.fromTokenAddress) {\n                throw new Error('Missing required fields for swap');\n            }\n            // Convert SwapInputData to SwapInput format for SDK\n            const fromAmountStr = inputData.fromAmount ?? '0';\n            const fromAmountNumber = parseFloat(fromAmountStr.toString());\n            if (isNaN(fromAmountNumber) || fromAmountNumber <= 0) {\n                throw new Error('Invalid amount provided for swap');\n            }\n            const actualFromTokenAddress = getTokenAddress(inputData.fromTokenAddress, inputData.fromChainID, 'swap');\n            const actualToTokenAddress = getTokenAddress(inputData.toTokenAddress, inputData.toChainID, 'swap');\n            const swapInput = {\n                from: [\n                    {\n                        chainId: inputData.fromChainID,\n                        amount: parseUnits(fromAmountStr.toString(), TOKEN_METADATA[inputData?.fromTokenAddress]?.decimals),\n                        tokenAddress: actualFromTokenAddress,\n                    },\n                ],\n                toChainId: inputData.toChainID,\n                toTokenAddress: actualToTokenAddress,\n            };\n            logger.info('Swap Provider: Prepared swap input', swapInput);\n            // Start the swap process\n            sdk\n                .swapWithExactIn(swapInput, {\n                swapIntentHook: async (data) => {\n                    swapAllowCallbackRef.current = data.allow;\n                    // Update UI with captured intent (simulation result)\n                    setActiveTransaction((prev) => ({\n                        ...prev,\n                        simulationResult: {\n                            success: true,\n                            intent: data.intent,\n                            swapMetadata: {\n                                type: 'swap',\n                                inputToken: actualFromTokenAddress,\n                                outputToken: swapInput.toTokenAddress,\n                                fromChainId: inputData?.fromChainID,\n                                toChainId: inputData.toChainID,\n                                inputAmount: inputData?.fromAmount ?? '',\n                                outputAmount: data.intent.destination?.amount?.toString() ?? '0',\n                            },\n                            allowance: {\n                                needsApproval: false,\n                                chainDetails: [],\n                            },\n                        },\n                        reviewStatus: 'ready',\n                        status: 'review',\n                    }));\n                },\n            })\n                .then((result) => {\n                if (result.success) {\n                    // Swap succeeded - let useListenTransaction handle the success state\n                    logger.info('Swap Provider: Swap execution succeeded');\n                    setActiveTransaction((prev) => ({\n                        ...prev,\n                        status: 'success',\n                    }));\n                }\n                else {\n                    // Swap failed - this captures your error!\n                    logger.error('Swap Provider: Swap execution failed:', result.error);\n                    // Set a flag to prevent success callbacks from overriding this error\n                    setActiveTransaction((prev) => ({\n                        ...prev,\n                        status: 'simulation_error',\n                        reviewStatus: 'gathering_input', // Reset reviewStatus to stop loading state\n                        error: new Error(result?.error ?? 'Swap execution failed'),\n                        executionResult: result,\n                    }));\n                    // Clear the allow callback to prevent further execution\n                    swapAllowCallbackRef.current = null;\n                }\n            })\n                .catch((error) => {\n                // Network/SDK errors\n                logger.error('Swap Provider: Swap SDK error:', error);\n                const errorMessage = formatSwapError(error);\n                setActiveTransaction((prev) => ({\n                    ...prev,\n                    status: 'simulation_error',\n                    reviewStatus: 'gathering_input', // Reset reviewStatus to stop loading state\n                    error: new Error(errorMessage),\n                }));\n            })\n                .finally(() => {\n                setIsSwapExecuting(false);\n                swapAllowCallbackRef.current = null;\n            });\n        }\n        catch (error) {\n            logger.error('Swap Provider: Swap initiation failed:', error);\n            const errorMessage = formatSwapError(error);\n            setActiveTransaction((prev) => ({\n                ...prev,\n                status: 'simulation_error',\n                error: new Error(errorMessage),\n            }));\n        }\n    }, [sdk]);\n    // Function called when user clicks \"Swap\" button\n    const proceedWithSwap = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        if (swapAllowCallbackRef.current && !isSwapExecuting) {\n            logger.info('Swap Provider: User confirmed swap - executing');\n            setIsSwapExecuting(true);\n            setActiveTransaction((prev) => ({ ...prev, status: 'processing' }));\n            // This triggers the .then() block above\n            swapAllowCallbackRef.current();\n        }\n        else {\n            logger.warn('Swap Provider: No allow callback available or already executing', {\n                hasCallback: !!swapAllowCallbackRef.current,\n                isExecuting: isSwapExecuting,\n            });\n        }\n    }, [isSwapExecuting]);\n    const approveAllowance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (amount, isMinimum) => {\n        if (!activeController ||\n            !activeTransaction.inputData ||\n            !activeTransaction.simulationResult) {\n            return;\n        }\n        if (activeTransaction.status !== 'set_allowance') {\n            logger.warn('Attempted to approve allowance from invalid status:', activeTransaction.status);\n            return;\n        }\n        setIsSettingAllowance(true);\n        setAllowanceError(null);\n        try {\n            // For each source chain that needs allowance, set it\n            const { inputData, simulationResult } = activeTransaction;\n            // Use chain-specific allowance details if available\n            const chainDetails = simulationResult?.allowance?.chainDetails;\n            if (chainDetails && chainDetails.length > 0) {\n                // Use the new chain-specific approach\n                for (const chainDetail of chainDetails) {\n                    if (chainDetail.needsApproval) {\n                        const token = getTokenFromInputData(inputData);\n                        if (!token)\n                            continue;\n                        const tokenMeta = sdk.utils.getTokenMetadata(token);\n                        const amountToApprove = isMinimum\n                            ? sdk.utils.parseUnits(amount, tokenMeta?.decimals ?? 18)\n                            : sdk.utils.parseUnits(amount, tokenMeta?.decimals ?? 18);\n                        await sdk.setAllowance(chainDetail.chainId, [token], amountToApprove);\n                    }\n                }\n            }\n            else {\n                // Fallback to original approach for backward compatibility\n                let sourcesData = simulationResult?.intent?.sources || [];\n                // If bridge & execute simulation, sources are inside bridgeSimulation\n                if (sourcesData.length === 0 && 'bridgeSimulation' in simulationResult) {\n                    const bridgeSim = simulationResult.bridgeSimulation;\n                    sourcesData = bridgeSim?.intent?.sources || [];\n                }\n                for (const source of sourcesData) {\n                    const token = getTokenFromInputData(inputData);\n                    if (!token)\n                        continue;\n                    const tokenMeta = sdk.utils.getTokenMetadata(token);\n                    const amountToApprove = isMinimum\n                        ? sdk.utils.parseUnits(amount, tokenMeta?.decimals ?? 18)\n                        : sdk.utils.parseUnits(amount, tokenMeta?.decimals ?? 18);\n                    await sdk.setAllowance(source.chainID, [token], amountToApprove);\n                }\n            }\n            // After successful allowance setting, proceed directly to transaction\n            setActiveTransaction((prev) => ({ ...prev, status: 'processing' }));\n            try {\n                const executionResult = await activeController.confirmAndProceed(sdk, inputData, simulationResult);\n                setActiveTransaction((prev) => ({\n                    ...prev,\n                    status: executionResult?.success ? 'success' : 'error',\n                    error: executionResult?.error ? new Error(executionResult.error) : null,\n                    executionResult,\n                }));\n            }\n            catch (execErr) {\n                logger.error('Transaction failed after allowance approval.', execErr);\n                const error = execErr instanceof Error ? execErr : new Error('Transaction failed.');\n                setActiveTransaction((prev) => ({ ...prev, status: 'error', error }));\n            }\n        }\n        catch (err) {\n            logger.error('Allowance setting failed:', err);\n            const error = err instanceof Error ? err : new Error('Failed to set allowance.');\n            setAllowanceError(error.message);\n        }\n        finally {\n            setIsSettingAllowance(false);\n        }\n    }, [\n        activeController,\n        sdk,\n        activeTransaction.inputData,\n        activeTransaction.simulationResult,\n        activeTransaction.status,\n    ]);\n    const denyAllowance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        setActiveTransaction((prev) => ({\n            ...prev,\n            status: 'review',\n            reviewStatus: 'needs_allowance',\n        }));\n        setAllowanceError(null);\n    }, []);\n    const startAllowanceFlow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        if (activeTransaction.status !== 'review' ||\n            activeTransaction.reviewStatus !== 'needs_allowance') {\n            logger.warn('Attempted to start allowance flow from invalid state:', {\n                status: activeTransaction.status,\n                reviewStatus: activeTransaction.reviewStatus,\n            });\n            return;\n        }\n        setActiveTransaction((prev) => ({\n            ...prev,\n            status: 'set_allowance',\n        }));\n        setAllowanceError(null);\n    }, [activeTransaction.status, activeTransaction.reviewStatus]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (activeTransaction.status === 'review' &&\n            activeTransaction.reviewStatus === 'gathering_input' &&\n            activeTransaction.inputData) {\n            triggerSimulation();\n        }\n    }, [\n        getAmountFromInputData(activeTransaction.inputData),\n        getTokenFromInputData(activeTransaction.inputData),\n        getInputChainId(activeTransaction.inputData),\n        activeTransaction.status,\n        activeTransaction.reviewStatus,\n        activeTransaction.type,\n        triggerSimulation,\n        initiateSwap,\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        return () => {\n            if (debounceTimeoutRef.current) {\n                clearTimeout(debounceTimeoutRef.current);\n                debounceTimeoutRef.current = null;\n            }\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (activeTransaction.status === 'processing') {\n            timerRef.current = setInterval(() => {\n                setTimer((prev) => prev + 0.1);\n            }, 100);\n        }\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n                timerRef.current = null;\n            }\n        };\n    }, [activeTransaction.status]);\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({\n        // State\n        sdk,\n        activeTransaction,\n        isSdkInitialized,\n        activeController,\n        disableCollapse,\n        config,\n        provider,\n        unifiedBalance,\n        exchangeRates,\n        isSimulating,\n        insufficientBalance,\n        isTransactionCollapsed,\n        timer,\n        allowanceError,\n        isSettingAllowance,\n        // Transaction processing state\n        processing,\n        explorerURL,\n        explorerURLs,\n        // Actions\n        setProvider,\n        startTransaction,\n        updateInput,\n        confirmAndProceed,\n        cancelTransaction,\n        initializeSdk,\n        deinitializeSdk,\n        triggerSimulation,\n        retrySimulation,\n        toggleTransactionCollapse,\n        approveAllowance,\n        denyAllowance,\n        startAllowanceFlow,\n        // Swap-specific functions\n        initiateSwap,\n        proceedWithSwap,\n    }), [\n        sdk,\n        activeTransaction,\n        isSdkInitialized,\n        activeController,\n        config,\n        provider,\n        setProvider,\n        startTransaction,\n        updateInput,\n        confirmAndProceed,\n        cancelTransaction,\n        initializeSdk,\n        deinitializeSdk,\n        triggerSimulation,\n        retrySimulation,\n        unifiedBalance,\n        exchangeRates,\n        isSimulating,\n        insufficientBalance,\n        isTransactionCollapsed,\n        toggleTransactionCollapse,\n        timer,\n        allowanceError,\n        isSettingAllowance,\n        processing,\n        explorerURL,\n        explorerURLs,\n        approveAllowance,\n        denyAllowance,\n        startAllowanceFlow,\n        initiateSwap,\n        proceedWithSwap,\n    ]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(NexusContext.Provider, { value: value, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DragConstraintsProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(motion_react__WEBPACK_IMPORTED_MODULE_18__.LayoutGroup, { id: \"tx-processor-layout-group\", children: [children, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TransactionProcessorShell$1, { disableCollapse: disableCollapse })] }) }) }));\n}\nfunction useInternalNexus() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NexusContext);\n    if (!context) {\n        throw new Error('useInternalNexus must be used within a NexusProvider');\n    }\n    return context;\n}\n\nconst NexusProvider = ({ config, children, }) => {\n    logger.debug('NexusProvider', { config });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InternalNexusProvider, { config: config, disableCollapse: false, children: children }));\n};\n\nconst useNexus = () => {\n    const { setProvider, sdk, isSdkInitialized, provider, initializeSdk, deinitializeSdk } = useInternalNexus();\n    return {\n        setProvider,\n        sdk,\n        isSdkInitialized,\n        provider,\n        initializeSdk,\n        deinitializeSdk,\n    };\n};\n\nconst DialogContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext(null);\nfunction useDialog() {\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DialogContext);\n    if (!context) {\n        throw new Error('Dialog components must be used within a Dialog');\n    }\n    return context;\n}\nfunction Dialog({ open = false, onOpenChange, children }) {\n    const handleOpenChange = react__WEBPACK_IMPORTED_MODULE_1__.useCallback((newOpen) => {\n        onOpenChange?.(newOpen);\n    }, [onOpenChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogContext.Provider, { value: { open, onOpenChange: handleOpenChange }, children: children }));\n}\nfunction DialogPortal({ children, container }) {\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n        setMounted(true);\n    }, []);\n    if (!mounted)\n        return null;\n    return (0,react_dom__WEBPACK_IMPORTED_MODULE_4__.createPortal)(children, container || document.body);\n}\nconst DialogOverlay = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref) => {\n    const { onOpenChange } = useDialog();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { ref: ref, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: { duration: 0.2 }, className: cn('fixed inset-0 z-50 bg-nexus-backdrop backdrop-blur-[4px] overflow-y-hidden', className), onClick: () => onOpenChange(false), ...props }));\n});\nDialogOverlay.displayName = 'DialogOverlay';\nconst DialogContent = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, children, onPointerDownOutside, onEscapeKeyDown, ...props }, ref) => {\n    const { open, onOpenChange } = useDialog();\n    // Handle escape key\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(() => {\n        const handleEscape = (e) => {\n            if (e.key === 'Escape') {\n                onEscapeKeyDown?.(e);\n                if (!e.defaultPrevented) {\n                    onOpenChange(false);\n                }\n            }\n        };\n        if (open) {\n            document.addEventListener('keydown', handleEscape);\n        }\n        return () => {\n            document.removeEventListener('keydown', handleEscape);\n        };\n    }, [open, onEscapeKeyDown, onOpenChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_16__.AnimatePresence, { children: open && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DialogPortal, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: ref, role: \"dialog\", \"data-state\": open ? 'open' : 'closed', className: cn('fixed left-[50%] top-[50%] z-50 max-w-lg translate-x-[-50%] translate-y-[-50%] shadow-lg duration-200', 'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0', 'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95', 'data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]', 'data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]', className), tabIndex: -1, style: { pointerEvents: 'auto' }, onClick: (e) => e.stopPropagation(), ...props, children: children })] })) }));\n});\nDialogContent.displayName = 'DialogContent';\nconst DialogHeader = ({ className, ...props }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('flex flex-col space-y-1.5 text-left', className), ...props }));\nDialogHeader.displayName = 'DialogHeader';\nconst DialogFooter = ({ className, ...props }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className), ...props }));\nDialogFooter.displayName = 'DialogFooter';\nconst DialogTitle = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", { ref: ref, className: cn('text-2xl font-semibold leading-none tracking-tight font-nexus-primary', className), ...props })));\nDialogTitle.displayName = 'DialogTitle';\nconst DialogDescription = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { ref: ref, className: cn('text-sm text-nexus-muted-foreground', className), ...props })));\nDialogDescription.displayName = 'DialogDescription';\n\nfunction BaseModal({ isOpen, onClose, children, className }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Dialog, { open: isOpen, onOpenChange: onClose, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogContent, { className: cn('p-0 bg-nexus-ring-offset text-foreground rounded-nexus-xl shadow-card w-[480px] min-h-[500px] text-nexus-foreground', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { layoutId: \"tx-processor\", layout: \"position\", className: \"relative flex flex-col h-full w-full min-h-[500px] overflow-hidden text-nexus-foreground\", children: children }) }) }));\n}\n\nconst Clock = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M12 3C9.61305 3 7.32387 3.94821 5.63604 5.63604C3.94821 7.32387 3 9.61305 3 12C3 14.3869 3.94821 16.6761 5.63604 18.364C7.32387 20.0518 9.61305 21 12 21C14.3869 21 16.6761 20.0518 18.364 18.364C20.0518 16.6761 21 14.3869 21 12C21 9.61305 20.0518 7.32387 18.364 5.63604C16.6761 3.94821 14.3869 3 12 3ZM4.29096 12C4.29096 9.95543 5.10316 7.99461 6.54888 6.54888C7.99461 5.10316 9.95543 4.29096 12 4.29096C14.0446 4.29096 16.0054 5.10316 17.4511 6.54888C18.8968 7.99461 19.709 9.95543 19.709 12C19.709 14.0446 18.8968 16.0054 17.4511 17.4511C16.0054 18.8968 14.0446 19.709 12 19.709C9.95543 19.709 7.99461 18.8968 6.54888 17.4511C5.10316 16.0054 4.29096 14.0446 4.29096 12ZM12.6795 7.9233C12.6795 7.7431 12.6079 7.57028 12.4804 7.44285C12.353 7.31543 12.1802 7.24385 12 7.24385C11.8198 7.24385 11.647 7.31543 11.5196 7.44285C11.3921 7.57028 11.3205 7.7431 11.3205 7.9233V12C11.3204 12.0893 11.3378 12.1777 11.3719 12.2603C11.4059 12.3428 11.4559 12.4178 11.5189 12.4811L14.2368 15.1989C14.3643 15.3264 14.5374 15.3981 14.7178 15.3981C14.8982 15.3981 15.0713 15.3264 15.1989 15.1989C15.3264 15.0713 15.3981 14.8982 15.3981 14.7178C15.3981 14.5374 15.3264 14.3643 15.1989 14.2368L12.6795 11.7187V7.9233Z\", fill: \"#787A7B\" }) }));\n};\n\nconst TwoCircles = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M13.1652 20.969C11.7519 21.8081 10.0993 22.1525 8.46843 21.9479C6.83756 21.7433 5.32128 21.0013 4.15899 19.8391C2.99669 18.6769 2.25458 17.1607 2.04982 15.5299C1.84506 13.899 2.18931 12.2464 3.02823 10.833M13.9982 18C16.12 18 18.1548 17.1571 19.6551 15.6569C21.1554 14.1566 21.9982 12.1217 21.9982 10C21.9982 7.87827 21.1554 5.84344 19.6551 4.34315C18.1548 2.84285 16.12 2 13.9982 2C11.8765 2 9.84166 2.84285 8.34137 4.34315C6.84108 5.84344 5.99823 7.87827 5.99823 10C5.99823 12.1217 6.84108 14.1566 8.34137 15.6569C9.84166 17.1571 11.8765 18 13.9982 18Z\", stroke: \"#787A7B\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }) }));\n};\n\nconst MoneyCircles = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M3.15507 11C2.2616 12.3668 1.86572 13.9994 2.03394 15.6236C2.20217 17.2478 2.92424 18.7646 4.07887 19.9192C5.23349 21.0738 6.75031 21.7959 8.37451 21.9641C9.99871 22.1324 11.6313 21.7365 12.9981 20.843M13.9981 18C16.1198 18 18.1546 17.1571 19.6549 15.6569C21.1552 14.1566 21.9981 12.1217 21.9981 10C21.9981 7.87827 21.1552 5.84344 19.6549 4.34315C18.1546 2.84285 16.1198 2 13.9981 2C11.8763 2 9.84151 2.84285 8.34122 4.34315C6.84093 5.84344 5.99807 7.87827 5.99807 10C5.99807 12.1217 6.84093 14.1566 8.34122 15.6569C9.84151 17.1571 11.8763 18 13.9981 18Z\", stroke: \"#787A7B\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M15.769 8.20491C15.553 7.29291 14.453 6.46991 13.132 7.08491C11.811 7.70091 11.601 9.68291 13.599 9.89291C14.502 9.98791 15.091 9.78291 15.629 10.3639C16.169 10.9449 16.269 12.5619 14.891 12.9979C13.513 13.4339 12.149 12.7529 12 11.7859M13.984 6.00391V6.87391M13.984 13.1319V14.0039\", stroke: \"#787A7B\", strokeWidth: \"1.5\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })] }));\n};\n\nfunction TransactionDetailsDrawer({ simulationResult, inputData, callback, triggerClassname = '', type, status, reviewStatus, }) {\n    const { exchangeRates } = useInternalNexus();\n    const getSimulationData = () => {\n        if (!simulationResult)\n            return null;\n        // Handle swap simulation result\n        if ('swapMetadata' in simulationResult) {\n            const swapSim = simulationResult;\n            const intent = swapSim.intent;\n            if (!intent)\n                return null;\n            const destinationChain = CHAIN_METADATA[intent?.destination?.chain.id];\n            const sources = intent.sources.map((source) => {\n                const sourceChain = CHAIN_METADATA[source.chain.id];\n                return {\n                    chainID: sourceChain?.id,\n                    chainName: sourceChain?.name || 'Unknown',\n                    chainLogo: sourceChain?.logo,\n                    amount: source.amount,\n                };\n            });\n            return {\n                destination: {\n                    chainID: destinationChain?.id,\n                    chainName: destinationChain?.name || 'Unknown',\n                    chainLogo: destinationChain?.logo,\n                    amount: swapSim?.intent?.destination?.amount,\n                },\n                sources,\n                fees: {\n                    total: '0', // Swap fees are typically handled differently\n                    caGas: '0',\n                    gasSupplied: '0',\n                    protocol: '0',\n                    solver: '0',\n                },\n                token: {\n                    symbol: intent?.sources?.[0]?.token?.symbol || 'Unknown',\n                    name: intent?.sources?.[0]?.token?.symbol,\n                    decimals: intent?.sources?.[0]?.token?.decimals,\n                },\n                sourcesTotal: intent.sources?.[0]?.amount || '0',\n            };\n        }\n        // Check if bridge was skipped in bridge & execute flow\n        if ('metadata' in simulationResult &&\n            simulationResult?.metadata?.bridgeSkipped) {\n            const simulation = simulationResult;\n            const metadata = simulation?.metadata;\n            if (!metadata)\n                return null;\n            return {\n                contractAddress: metadata?.contractAddress ?? '',\n                functionName: metadata?.functionName ?? '',\n                destination: {\n                    chainID: metadata?.targetChain,\n                    chainName: CHAIN_METADATA[metadata?.targetChain]?.name || 'Unknown',\n                    chainLogo: CHAIN_METADATA[metadata?.targetChain]?.logo,\n                    amount: metadata?.inputAmount,\n                },\n                sources: [\n                    {\n                        chainName: CHAIN_METADATA[metadata?.targetChain]?.name,\n                        chainID: metadata?.targetChain,\n                        chainLogo: CHAIN_METADATA[metadata?.targetChain]?.logo,\n                        amount: metadata?.inputAmount,\n                    },\n                ],\n                fees: {\n                    total: simulation?.executeSimulation?.gasUsed ?? '0',\n                    bridge: '0',\n                    caGas: '0',\n                    gasSupplied: '0',\n                    protocol: '0',\n                    solver: '0',\n                },\n                token: { name: simulationResult?.metadata?.token || 'Unknown' },\n                sourcesTotal: metadata?.inputAmount || '0',\n            };\n        }\n        // Handle bridge & execute result where intent is nested\n        let intent = undefined;\n        if ('intent' in simulationResult) {\n            intent = simulationResult?.intent;\n        }\n        else if ('bridgeSimulation' in simulationResult && simulationResult?.bridgeSimulation) {\n            const simulation = simulationResult;\n            intent = simulation?.bridgeSimulation?.intent;\n            const fees = {\n                total: simulation?.totalEstimatedCost?.total ?? '0',\n                ...simulation?.bridgeSimulation?.intent?.fees,\n            };\n            return {\n                contractAddress: simulation?.executeSimulation?.contractAddress ?? '',\n                functionName: simulation?.executeSimulation?.functionName ?? '',\n                destination: intent?.destination,\n                sources: (intent?.sources || []),\n                fees: fees,\n                token: intent?.token,\n                sourcesTotal: intent?.sourcesTotal,\n            };\n        }\n        if (!intent)\n            return null;\n        return {\n            destination: intent?.destination,\n            sources: (intent?.sources || []),\n            fees: intent?.fees,\n            token: intent?.token,\n            sourcesTotal: intent?.sourcesTotal,\n        };\n    };\n    const data = getSimulationData();\n    const getDestinationChain = () => {\n        if (inputData?.toChainId)\n            return inputData.toChainId;\n        if (inputData?.chainId)\n            return inputData.chainId;\n        return data?.destination?.chainID;\n    };\n    const destinationChainId = getDestinationChain();\n    const destinationChain = destinationChainId ? CHAIN_METADATA[destinationChainId] : null;\n    if (!data)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Drawer, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTrigger, { className: cn('text-sm font-nexus-primary font-semibold text-nexus-muted-foreground underline underline-offset-3 hover:text-nexus-foreground transition-colors cursor-pointer', triggerClassname), children: \"View Full Transaction Details\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DrawerContent, { className: \"no-scrollbar\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DrawerHeader, { className: \"flex-row items-center justify-between px-4 py-6\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTitle, { children: \"Transaction Details\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerClose, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CircleX, { className: \"w-6 h-6 text-nexus-black hover:text-zinc-700 transition-colors\" }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"space-y-2 px-4\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Clock, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary text-sm font-semibold font-nexus-primary\", children: \"Estimated Transaction time\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { className: \"text-nexus-black text-sm font-semibold font-nexus-primary\", children: [\"~\", type === 'bridgeAndExecute' ? '1.5 mins' : '30 seconds'] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TwoCircles, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary text-sm font-semibold font-nexus-primary\", children: \"Total Fees\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { className: \"text-nexus-black text-sm font-semibold font-nexus-primary\", children: [formatCost(data.fees.total), \" \", inputData?.token || data.token.symbol] })] }), data?.contractAddress && data?.functionName && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TwoCircles, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-muted-secondary text-sm font-semibold font-nexus-primary capitalize\", children: [data?.functionName, \" to\"] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-nexus-black text-sm font-semibold font-nexus-primary\", children: truncateAddress(data?.contractAddress, 4, 4) })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between pb-1 border-b border-nexus-muted-secondary/20\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MoneyCircles, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary text-sm font-semibold font-nexus-primary\", children: \"Sending\" })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-end\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-base font-semibold text-nexus-foreground font-nexus-primary\", children: [inputData?.amount || data.sourcesTotal, \" \", inputData?.token || data.token.symbol] }), inputData?.token && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-accent-green font-semibold font-nexus-primary text-xs\", children: getFiatValue(data.sourcesTotal, inputData?.token, exchangeRates) }))] }), destinationChain && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary font-semibold text-sm\", children: \"on\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: destinationChain.logo, alt: destinationChain.name, className: cn('w-5 h-5', destinationChainId !== SUPPORTED_CHAINS.BASE &&\n                                                            destinationChainId !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                                            ? 'rounded-full'\n                                                            : '') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-nexus-foreground font-semibold text-sm uppercase\", children: destinationChain.name })] }))] })] }), data.sources.length > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", { className: \"text-sm font-semibold text-nexus-black mb-2.5\", children: \"From\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"space-y-2.5\", children: data.sources.map((source, index) => {\n                                            const chainMeta = CHAIN_METADATA[source.chainID];\n                                            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: chainMeta?.logo, alt: chainMeta?.name || 'Chain', className: cn('', source.chainID !== SUPPORTED_CHAINS.BASE &&\n                                                                    source.chainID !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                                                    ? 'rounded-full w-8 h-8'\n                                                                    : 'w-6 h-6') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start gap-y-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"text-sm text-nexus-muted-foreground font-semibold uppercase\", children: inputData?.token || data.token.symbol }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"text-xs text-nexus-muted-foreground font-semibold\", children: [\"on \", chainMeta?.name || 'Unknown Chain'] })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col gap-y-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"text-nexus-foreground font-nexus-primary text-sm font-semibold text-right\", children: source.amount }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"text-xs font-semibold text-nexus-muted-secondary text-right\", children: inputData?.token &&\n                                                                    getFiatValue(source.amount, inputData?.token, exchangeRates) })] })] }, index));\n                                        }) })] }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerFooter, { className: \"border-t border-nexus-muted-secondary/20 px-4 py-2 mt-6\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerClose, { className: \"w-full\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { onClick: callback, className: \"px-4 w-full font-nexus-primary min-h-12\", children: getPrimaryButtonText(status, reviewStatus) }) }) })] })] }));\n}\n\nconst TextLoader = ({ text }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"text-sm font-nexus-primary font-semibold [--shadow-color:var(--color-neutral-500)] dark:[--shadow-color:var(--color-neutral-100)]\", children: text.split('').map((char, i) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.span, { className: \"inline-block\", initial: { scale: 1, opacity: 0.5 }, animate: {\n                scale: [1, 1.1, 1],\n                textShadow: [\n                    '0 0 0 var(--shadow-color)',\n                    '0 0 1px var(--shadow-color)',\n                    '0 0 0 var(--shadow-color)',\n                ],\n                opacity: [0.5, 1, 0.5],\n            }, transition: {\n                duration: 0.5,\n                repeat: Infinity,\n                repeatType: 'loop',\n                delay: i * 0.05,\n                ease: 'easeInOut',\n                repeatDelay: 2,\n            }, children: char === ' ' ? '\\u00A0' : char }, i))) }));\n};\n\nfunction TransactionSimulation({ isLoading, simulationResult, inputData, type, callback, status, reviewStatus, }) {\n    if (isLoading) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-start w-full py-3 px-6\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TextLoader, { text: \"Loading transaction details...\" }) }));\n    }\n    if (!simulationResult) {\n        return null;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col gap-y-4 w-full items-start\", children: [simulationResult?.allowance?.needsApproval && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center w-full justify-center px-6\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoMessage, { variant: \"warning\", className: \"px-0 w-full\", children: \"You need to set allowance in your wallet first to continue.\" }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex justify-center py-2\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TransactionDetailsDrawer, { simulationResult: simulationResult, inputData: inputData, callback: callback, triggerClassname: \"px-6\", type: type, status: status, reviewStatus: reviewStatus }) })] }));\n}\n\nconst SolarWallet = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M19 12C19 12.2652 18.8946 12.5196 18.7071 12.7071C18.5196 12.8946 18.2652 13 18 13C17.7348 13 17.4804 12.8946 17.2929 12.7071C17.1054 12.5196 17 12.2652 17 12C17 11.7348 17.1054 11.4804 17.2929 11.2929C17.4804 11.1054 17.7348 11 18 11C18.2652 11 18.5196 11.1054 18.7071 11.2929C18.8946 11.4804 19 11.7348 19 12Z\", fill: \"#787A7B\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M9.944 3.25H13.056C14.894 3.25 16.35 3.25 17.489 3.403C18.661 3.561 19.61 3.893 20.359 4.641C21.283 5.566 21.578 6.804 21.685 8.411C22.262 8.664 22.698 9.201 22.745 9.881C22.75 9.942 22.75 10.007 22.75 10.067V13.933C22.75 13.993 22.75 14.058 22.746 14.118C22.698 14.798 22.262 15.336 21.685 15.59C21.578 17.196 21.283 18.434 20.359 19.359C19.61 20.107 18.661 20.439 17.489 20.597C16.349 20.75 14.894 20.75 13.056 20.75H9.944C8.106 20.75 6.65 20.75 5.511 20.597C4.339 20.439 3.39 20.107 2.641 19.359C1.893 18.61 1.561 17.661 1.403 16.489C1.25 15.349 1.25 13.894 1.25 12.056V11.944C1.25 10.106 1.25 8.65 1.403 7.511C1.561 6.339 1.893 5.39 2.641 4.641C3.39 3.893 4.339 3.561 5.511 3.403C6.651 3.25 8.106 3.25 9.944 3.25ZM20.168 15.75H18.23C16.085 15.75 14.249 14.122 14.249 12C14.249 9.878 16.085 8.25 18.229 8.25H20.167C20.053 6.909 19.796 6.2 19.297 5.702C18.874 5.279 18.294 5.025 17.288 4.89C16.261 4.752 14.906 4.75 12.999 4.75H9.999C8.092 4.75 6.738 4.752 5.709 4.89C4.704 5.025 4.124 5.279 3.701 5.702C3.278 6.125 3.025 6.705 2.89 7.71C2.752 8.738 2.75 10.092 2.75 11.999C2.75 13.906 2.752 15.261 2.89 16.289C3.025 17.294 3.279 17.874 3.702 18.297C4.125 18.72 4.705 18.974 5.711 19.109C6.739 19.247 8.093 19.249 10 19.249H13C14.907 19.249 16.262 19.247 17.29 19.109C18.295 18.974 18.875 18.72 19.298 18.297C19.797 17.799 20.054 17.091 20.168 15.749M5.25 8C5.25 7.80109 5.32902 7.61032 5.46967 7.46967C5.61032 7.32902 5.80109 7.25 6 7.25H10C10.1989 7.25 10.3897 7.32902 10.5303 7.46967C10.671 7.61032 10.75 7.80109 10.75 8C10.75 8.19891 10.671 8.38968 10.5303 8.53033C10.3897 8.67098 10.1989 8.75 10 8.75H6C5.80109 8.75 5.61032 8.67098 5.46967 8.53033C5.32902 8.38968 5.25 8.19891 5.25 8ZM20.924 9.75H18.23C16.806 9.75 15.749 10.809 15.749 12C15.749 13.191 16.806 14.25 18.229 14.25H20.947C21.153 14.237 21.242 14.098 21.249 14.014V9.986C21.242 9.902 21.153 9.763 20.947 9.751L20.924 9.75Z\", fill: \"#787A7B\" })] }));\n};\n\nconst BalanceTrigger = ({ balance, token }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"px-2 py-3 rounded-nexus-md border border-nexus-muted-secondary/20 bg-nexus-gray backdrop-blur-2xl h-14 flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-start gap-x-2 text-nexus-muted-secondary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SolarWallet, {}), balance && token ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-semibold font-nexus-primary\", children: [\"Total \", token] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-semibold font-nexus-primary\", children: [\"accross \", balance?.breakdown?.length, \" chains\"] })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { children: \"Select token to view cross chain balance\" }))] }), balance && token && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-start gap-x-2 \", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-base font-semibold font-nexus-primary text-nexus-black\", children: [parseFloat(balance?.balance).toFixed(6), \" \", token] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-accent-green font-semibold text-xs font-nexus-primary w-full text-right\", children: [\"\\u2248 $\", balance?.balanceInFiat] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDownIcon, { size: 24, className: \"text-nexus-foreground\" })] }))] }));\n};\nconst AllBalancesTrigger = ({ balances }) => {\n    const totalFiat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        return balances?.reduce((sum, asset) => sum + (asset?.balanceInFiat || 0), 0) || 0;\n    }, [balances]);\n    const { tokenCount, uniqueChainCount } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        const chains = new Set();\n        balances?.forEach((asset) => {\n            asset?.breakdown?.forEach((b) => {\n                if (b?.chain?.id != null)\n                    chains.add(b.chain.id);\n            });\n        });\n        return { tokenCount: balances?.length || 0, uniqueChainCount: chains.size };\n    }, [balances]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"px-2 py-3 rounded-nexus-md border border-nexus-muted-secondary/20 bg-nexus-gray backdrop-blur-2xl h-14 flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-start gap-x-2 text-nexus-muted-secondary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SolarWallet, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-semibold font-nexus-primary\", children: \"Unified Balance\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-semibold font-nexus-primary\", children: [\"across \", tokenCount, \" tokens \\u2022 \", uniqueChainCount, \" chains\"] })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-start gap-x-2 \", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex flex-col items-end\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-accent-green font-semibold text-lg font-nexus-primary w-full text-right\", children: [\"\\u2248 $\", totalFiat.toFixed(2)] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDownIcon, { size: 24, className: \"text-nexus-foreground\" })] })] }));\n};\nconst ChainBalance = ({ balance, symbol, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-3\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: CHAIN_METADATA[balance.chain.id]?.logo, alt: CHAIN_METADATA[balance.chain.id]?.name, className: cn('', balance.chain.id !== SUPPORTED_CHAINS.BASE &&\n                            balance?.chain?.id !== SUPPORTED_CHAINS?.BASE_SEPOLIA\n                            ? 'rounded-full w-6 h-6'\n                            : 'w-5 h-5') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-semibold text-nexus-muted-foreground font-nexus-primary\", children: symbol }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-xs font-semibold text-nexus-muted-foreground font-nexus-primary\", children: [\"on \", balance.chain?.name || `Chain ${balance.chain?.id}`] })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-end\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-sm font-semibold text-nexus-black font-nexus-primary\", children: parseFloat(balance.balance).toFixed(2) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm text-nexus-muted-foreground font-nexus-primary\", children: [\"$\", balance.balanceInFiat] })] })] }));\n};\nconst UnifiedBalance = () => {\n    const { unifiedBalance, activeTransaction } = useInternalNexus();\n    const { inputData } = activeTransaction;\n    const tokenSymbol = getTokenFromInputData(inputData);\n    const relevantBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (!unifiedBalance || !tokenSymbol)\n            return [];\n        return unifiedBalance.filter((balance) => balance?.symbol === tokenSymbol);\n    }, [tokenSymbol, unifiedBalance]);\n    const tokenBalance = relevantBalance[0];\n    if (!unifiedBalance)\n        return null;\n    if (!tokenSymbol)\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Drawer, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTrigger, { className: \"px-6 font-nexus-primary w-full my-6 text-nexus-foreground\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AllBalancesTrigger, { balances: unifiedBalance }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DrawerContent, { className: \"font-nexus-primary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerHeader, { className: \"px-4 pt-4 pb-0\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between mb-4 \", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTitle, { className: \"font-nexus-primary\", children: \"Balances Across Tokens\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerClose, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CircleX, { className: \"w-6 h-6 text-nexus-black hover:text-zinc-700 transition-colors\" }) })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"px-4 pb-4 no-scrollbar space-y-4\", children: unifiedBalance.map((asset) => {\n                                const symbol = asset.symbol;\n                                const icon = TOKEN_IMAGE_MAP[symbol] || asset?.icon;\n                                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"border-b border-gray-200 pb-3 last:border-none last:pb-0\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"py-4 w-full flex items-center justify-between\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-3\", children: [icon ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: icon, alt: symbol, className: \"w-6 h-6 border border-nexus-border-secondary/10 rounded-full\" })) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-semibold text-nexus-muted-secondary leading-[18px] font-nexus-primary\", children: [\"Total \", symbol] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-end gap-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-base font-semibold text-nexus-foreground font-nexus-primary\", children: [parseFloat(asset.balance) > 0\n                                                                    ? parseFloat(asset.balance).toFixed(2)\n                                                                    : '0.00', ' ', symbol] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-accent-green font-semibold font-nexus-primary text-sm leading-0\", children: [\"\\u2248 $\", asset.balanceInFiat] })] })] }), parseFloat(asset.balance) > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"space-y-2.5 mt-2.5\", children: asset.breakdown?.map((breakdownBalance, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChainBalance, { balance: breakdownBalance, symbol: symbol || '' }, `${breakdownBalance.chain?.id}-${index}-${symbol}`))) }))] }, symbol));\n                            }) })] })] }));\n    if (!tokenBalance)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Drawer, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTrigger, { className: \"px-6 font-nexus-primary w-full my-6\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BalanceTrigger, { balance: tokenBalance, token: getTokenFromInputData(inputData) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DrawerContent, { className: \"font-nexus-primary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerHeader, { className: \"px-4 pt-4 pb-0\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between mb-4 \", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerTitle, { className: \"font-nexus-primary\", children: \"Balance Across Chains\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DrawerClose, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CircleX, { className: \"w-6 h-6 text-nexus-black hover:text-zinc-700 transition-colors\" }) })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"px-4 pb-4 no-scrollbar\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"py-4 mb-0.5 w-full flex items-center justify-between border-b border-gray-200\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-3\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: TOKEN_IMAGE_MAP[tokenSymbol], alt: TOKEN_METADATA[tokenSymbol]?.name, className: \"w-6 h-6 border border-nexus-border-secondary/10 rounded-full\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm font-semibold text-nexus-muted-secondary leading-[18px] font-nexus-primary\", children: [\"Total \", tokenSymbol] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-end gap-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-base font-semibold text-nexus-foreground font-nexus-primary\", children: [parseFloat(tokenBalance.balance).toFixed(6), \" \", tokenSymbol] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-accent-green font-semibold font-nexus-primary text-xs leading-0\", children: [\"\\u2248 $\", tokenBalance.balanceInFiat] })] })] }), parseFloat(tokenBalance.balance) > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"space-y-2.5 mt-2.5\", children: tokenBalance.breakdown?.map((breakdownBalance, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChainBalance, { balance: breakdownBalance, symbol: tokenSymbol || '' }, `${breakdownBalance.chain?.id}-${index}`))) }))] })] })] }));\n};\n\nfunction AllowanceForm({ token, minimumAmount, inputAmount, sourceChains, onApprove, onCancel: _onCancel, isLoading = false, error = null, onFormStateChange, }) {\n    const [currentAllowance, setCurrentAllowance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedType, setSelectedType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('minimum');\n    const [customAmount, setCustomAmount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const { sdk } = useInternalNexus();\n    // Keep latest form values in refs to avoid stale closures when parent stores handler\n    const latestValuesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({ selectedType, customAmount, minimumAmount });\n    latestValuesRef.current.selectedType = selectedType;\n    latestValuesRef.current.customAmount = customAmount;\n    latestValuesRef.current.minimumAmount = minimumAmount;\n    const tokenMetadata = TOKEN_METADATA[token];\n    // Stable handler that reads latest values from refs, so parent always has a fresh handler\n    const stableApproveHandler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n        const { selectedType, customAmount, minimumAmount } = latestValuesRef.current;\n        if (selectedType === 'minimum') {\n            onApprove(minimumAmount, true);\n        }\n        else {\n            onApprove(customAmount, false);\n        }\n    }, [onApprove]);\n    const validateCustomAmount = (amount) => {\n        if (!amount)\n            return false;\n        const numAmount = parseFloat(amount);\n        const numInputAmount = parseFloat(inputAmount);\n        return !isNaN(numAmount) && numAmount > 0 && numAmount >= numInputAmount;\n    };\n    const getCurrentAllowance = async () => {\n        // Find the first chain that actually needs allowance\n        const chainThatNeedsAllowance = sourceChains.find((chain) => chain.needsApproval === true);\n        if (!chainThatNeedsAllowance) {\n            // If no chain needs approval, show allowance from first chain or 0\n            const firstChain = sourceChains[0];\n            if (firstChain) {\n                const allowance = await sdk.getAllowance(firstChain.chainId, [token]);\n                const decimals = Number(TOKEN_METADATA[token].decimals);\n                const formattedAllowance = formatUnits(allowance[0]?.allowance ?? 0n, decimals);\n                setCurrentAllowance(formattedAllowance);\n            }\n            else {\n                setCurrentAllowance('0');\n            }\n            return;\n        }\n        // Get allowance from the chain that needs approval\n        const allowance = await sdk.getAllowance(chainThatNeedsAllowance.chainId, [token]);\n        const decimals = Number(TOKEN_METADATA[token].decimals);\n        const formattedAllowance = formatUnits(allowance[0]?.allowance ?? 0n, decimals);\n        setCurrentAllowance(formattedAllowance);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (!currentAllowance) {\n            getCurrentAllowance();\n        }\n    }, [sourceChains, token]);\n    const isCustomValid = selectedType === 'custom' ? validateCustomAmount(customAmount) : true;\n    const isFormValid = selectedType === 'minimum' || isCustomValid;\n    // Notify parent of form state changes; avoid depending on onFormStateChange to prevent loops\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (onFormStateChange) {\n            onFormStateChange(isFormValid, stableApproveHandler);\n        }\n    }, [isFormValid]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex flex-col h-full w-full overflow-y-auto\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex-1 w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"my-4 text-left px-6\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-xs text-nexus-muted-secondary font-semibold font-nexus-primary\", children: [\"Allow access to \", formatCost(minimumAmount), \" \", token, \" to complete your transaction.\"] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"mb-6 px-6\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between border-b border-nexus-input py-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-xs font-semibold text-nexus-muted font-nexus-primary\", children: \"Token\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-2 w-fit\", children: [tokenMetadata?.icon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: tokenMetadata?.icon, alt: token, className: \"w-6 h-6 rounded-nexus-full\" }, tokenMetadata?.name)), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { className: \"font-semibold font-nexus-primary text-nexus-black text-base\", children: [token, \" on\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [sourceChains\n                                                    .filter((chain) => chain.needsApproval !== false) // Show chains that need approval or are undefined\n                                                    .map((source, index, filteredChains) => {\n                                                    const chainMeta = CHAIN_METADATA[source?.chainId];\n                                                    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: chainMeta?.logo ?? '', alt: chainMeta?.name, className: cn('w-6 h-6', index > 0 ? '-ml-5' : '', chainMeta?.id !== SUPPORTED_CHAINS.BASE &&\n                                                                chainMeta?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                                                ? 'rounded-nexus-full '\n                                                                : ''), style: { zIndex: filteredChains.length - index }, title: chainMeta?.name }) }, source?.chainId));\n                                                }), sourceChains.filter((chain) => chain.needsApproval !== false).length > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { className: \"font-semibold font-nexus-primary text-base text-nexus-black\", children: [\"+\", sourceChains.filter((chain) => chain.needsApproval !== false).length, \" chains\"] }))] })] })] }), currentAllowance && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"mt-1 py-2 border-b border-nexus-input\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between text-sm font-nexus-primary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-xs font-semibold text-nexus-muted font-nexus-primary\", children: \"Current Allowance\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"font-semibold font-nexus-primary text-nexus-black text-base\", children: currentAllowance })] }) }))] }), error ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EnhancedInfoMessage, { error: error, context: \"allowance\", className: \"mb-4 px-6\" })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"mb-6 space-y-3 px-6\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \" flex items-center justify-between gap-x-5\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('px-4 pt-4 rounded-nexus-md border-2 cursor-pointer transition-all relative h-16 w-full', selectedType === 'minimum'\n                                        ? 'border-nexus-blue bg-[#0375D81A]'\n                                        : 'border-nexus-input hover:border-nexus-primary'), onClick: () => setSelectedType('minimum'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-between overflow-clip pt-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-3 font-nexus-primary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", { type: \"radio\", checked: selectedType === 'minimum', onChange: () => setSelectedType('minimum'), className: \"text-blue-600\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"font-nexus-primary\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-sm font-bold text-nexus-muted-secondary\", children: \"Min:\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-base font-bold text-nexus-black ml-2\", children: formatCost(minimumAmount) })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"bg-nexus-blue font-nexus-primary text-white text-[10px] px-2 py-0.5 font-medium absolute top-0 left-0\", children: \"RECOMMENDED\" })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('px-4 pt-4  rounded-nexus-md border-2 cursor-pointer transition-all font-nexus-primary h-16 w-full', selectedType === 'custom'\n                                        ? 'border-nexus-blue bg-[#0375D81A]'\n                                        : 'border-nexus-input hover:border-nexus-primary'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-3 pt-1\", onClick: () => setSelectedType('custom'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", { type: \"radio\", checked: selectedType === 'custom', onChange: () => setSelectedType('custom'), className: \"text-blue-600\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"font-semibold font-nexus-primary text-base text-nexus-black\", children: \"Custom\" })] }) })] }), selectedType === 'custom' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"mt-3\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormField, { label: \"Amount\", helperText: customAmount && !isCustomValid ? `Amount must be ≥ ${inputAmount}` : undefined, className: \"font-nexus-primary\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Input, { placeholder: `Enter amount ≥ ${inputAmount}`, type: \"string\", value: customAmount, disabled: isLoading, onChange: (e) => setCustomAmount(e.target.value), className: cn('text-nexus-black text-base font-semibold font-nexus-primary leading-normal px-4 py-2 border border-nexus-input rounded-nexus-md', customAmount && !isCustomValid ? 'border-red-500 focus:border-red-500' : '') }) }) }))] }))] }) }));\n}\n\nconst SlideTransition = ({ contentKey, direction = 'horizontal', distance = 50, timing = { stiffness: 350, damping: 40, mass: 1 }, children, className = '', }) => {\n    const getSlideDirections = () => {\n        if (direction === 'vertical') {\n            return {\n                initial: { y: distance, opacity: 0 },\n                animate: { y: 0, opacity: 1 },\n                exit: { y: -distance, opacity: 0 },\n            };\n        }\n        return {\n            initial: { x: distance, opacity: 0 },\n            animate: { x: 0, opacity: 1 },\n            exit: { x: -distance, opacity: 0 },\n        };\n    };\n    const slideProps = getSlideDirections();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: `w-full h-full overflow-hidden ${className}`, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_16__.AnimatePresence, { mode: \"wait\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(motion_react__WEBPACK_IMPORTED_MODULE_15__.motion.div, { initial: slideProps.initial, animate: slideProps.animate, exit: slideProps.exit, transition: {\n                    type: 'spring',\n                    stiffness: timing.stiffness,\n                    damping: timing.damping,\n                    mass: timing.mass,\n                }, className: \"w-full h-full\", children: children }, contentKey) }) }));\n};\n\nfunction ActionButtons({ onCancel, onPrimary, primaryText = 'Continue', primaryLoading = false, primaryDisabled = false, className, }) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex flex-col items-center gap-y-2 w-full pt-2 rounded-b-nexus-xl bg-white !shadow-[0px_4.37px_24px_-17.479px_rgba(0,0,0,0.10)]', className), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex w-full gap-x-4 px-6 \", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { variant: \"outline\", className: cn('flex-1 px-4 py-3 h-auto', 'rounded-nexus-md', 'text-base font-semibold font-nexus-primary leading-normal !bg-transparent', 'border-zinc-400', 'text-nexus-black hover:text-nexus-muted-secondary', 'hover:bg-zinc-200'), onClick: onCancel, children: \"Cancel\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { className: cn('flex-1 items-center justify-center px-4 py-3 h-auto', 'bg-zinc-800 text-nexus-snow-white', 'rounded-nexus-md', 'text-base font-semibold font-nexus-primary leading-normal', 'hover:bg-zinc-700', 'disabled:opacity-50'), onClick: onPrimary, disabled: primaryDisabled || primaryLoading, children: primaryLoading ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingDots, { className: \"translate-x-1/3\" }) : primaryText })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center justify-center gap-x-1.5 text-xs h-8 bg-nexus-footer w-full rounded-b-nexus-xl\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: \"text-nexus-footer-text font-nexus-primary\", children: \"Powered By\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SmallAvailLogo, {})] })] }));\n}\n\nfunction UnifiedTransactionModal({ transactionType, modalTitle, FormComponent, getSimulationError, getMinimumAmount, getSourceChains, transformInputData, }) {\n    const { activeTransaction, activeController, updateInput, confirmAndProceed, cancelTransaction, initializeSdk, triggerSimulation, retrySimulation, isSdkInitialized, isSimulating, insufficientBalance, allowanceError, isSettingAllowance, approveAllowance, denyAllowance, startAllowanceFlow, initiateSwap, proceedWithSwap, } = useInternalNexus();\n    const { status, reviewStatus, inputData, simulationResult, type, prefillFields } = activeTransaction;\n    const [isInitializing, setIsInitializing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allowanceFormValid, setAllowanceFormValid] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allowanceApproveHandler, setAllowanceApproveHandler] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleAllowanceFormStateChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((isValid, handler) => {\n        setAllowanceFormValid(isValid);\n        setAllowanceApproveHandler(() => handler);\n    }, [setAllowanceFormValid, setAllowanceApproveHandler]);\n    // Helper function to check sufficient input for both regular transactions and swaps\n    const checkHasSufficientInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((inputData) => {\n        if (!inputData)\n            return false;\n        if (transactionType === 'swap') {\n            // For swaps, check input directly (since activeController is null)\n            const data = inputData;\n            return !!(data.fromChainID &&\n                data.toChainID &&\n                data.fromTokenAddress &&\n                data.toTokenAddress &&\n                data.fromAmount &&\n                parseFloat(data.fromAmount?.toString() || '0') > 0);\n        }\n        else {\n            // For regular transactions, use activeController\n            return activeController?.hasSufficientInput(inputData || {}) || false;\n        }\n    }, [transactionType, activeController]);\n    // Type guard - return null if wrong transaction type\n    if (type !== transactionType) {\n        return null;\n    }\n    const isOpen = status !== 'idle' && status !== 'processing' && status !== 'success' && status !== 'error';\n    const isBusy = status === 'processing' || reviewStatus === 'simulating';\n    const handleButtonClick = async () => {\n        if (status === 'initializing') {\n            try {\n                setIsInitializing(true);\n                await initializeSdk();\n            }\n            finally {\n                setIsInitializing(false);\n            }\n        }\n        else if (status === 'simulation_error') {\n            // Reset to review state and trigger simulation again\n            retrySimulation();\n        }\n        else if (status === 'review' &&\n            reviewStatus === 'gathering_input' &&\n            checkHasSufficientInput(inputData)) {\n            if (transactionType === 'swap') {\n                // For swaps, initiateSwap should be called automatically by useEffect\n                // But allow manual fallback in case of timing issues\n                await initiateSwap(inputData);\n            }\n            else {\n                triggerSimulation();\n            }\n        }\n        else if (status === 'review' && reviewStatus === 'ready') {\n            if (transactionType === 'swap') {\n                proceedWithSwap();\n            }\n            else {\n                confirmAndProceed();\n            }\n        }\n        else if (status === 'review' && reviewStatus === 'needs_allowance') {\n            startAllowanceFlow();\n        }\n        else if (status === 'set_allowance' && allowanceApproveHandler) {\n            allowanceApproveHandler();\n        }\n        else {\n            confirmAndProceed();\n        }\n    };\n    const debouncedClick = () => {\n        setTimeout(handleButtonClick, 500);\n    };\n    const hasSufficientInput = checkHasSufficientInput(inputData);\n    const shouldShowSimulation = isSdkInitialized && hasSufficientInput;\n    const transformedInputData = transformInputData ? transformInputData(inputData) : inputData;\n    const renderAllowanceContent = () => {\n        if (!simulationResult || !inputData)\n            return null;\n        // Get minimum amount and source chains using provided functions or defaults\n        const minimumAmount = getMinimumAmount ? getMinimumAmount(simulationResult) : '0';\n        const sourceChains = getSourceChains ? getSourceChains(simulationResult) : [];\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AllowanceForm, { token: getTokenFromInputData(inputData) || '', minimumAmount: minimumAmount, inputAmount: getAmountFromInputData(inputData)?.toString() || '0', sourceChains: sourceChains, onApprove: approveAllowance, onCancel: denyAllowance, isLoading: isSettingAllowance, error: allowanceError, onFormStateChange: handleAllowanceFormStateChange }));\n    };\n    const showFooterButtons = status !== 'processing' && status !== 'success' && status !== 'error';\n    const preventClose = status === 'processing' || reviewStatus === 'simulating';\n    const showHeader = activeTransaction?.status !== 'processing' &&\n        activeTransaction?.status !== 'success' &&\n        activeTransaction?.status !== 'error';\n    const isPrimaryLoading = isBusy || isInitializing || (status === 'set_allowance' && isSettingAllowance);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(BaseModal, { isOpen: isOpen, onClose: preventClose ? () => { } : cancelTransaction, hideCloseButton: true, children: [showHeader && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DialogHeader, { className: \"flex-shrink-0 flex flex-row items-center justify-between relative px-6 py-4 h-16 overflow-hidden w-full\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AvailLogo, { className: \"absolute top-0 left-1/2 -translate-x-1/2 opacity-10\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogTitle, { className: \"font-semibold text-nexus-black\", children: getModalTitle(status, modalTitle) })] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: cn('flex-1 flex flex-col overflow-hidden w-full', status !== 'set_allowance' && transactionType !== 'transfer' && transactionType !== 'swap'\n                    ? 'mt-14'\n                    : ''), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SlideTransition, { contentKey: getContentKey(status, [reviewStatus]), children: [(status === 'initializing' || status === 'review' || status === 'simulation_error') && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedBalance, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormComponent, { inputData: transformedInputData || {}, onUpdate: updateInput, disabled: !isSdkInitialized, prefillFields: prefillFields }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex-1 flex flex-col py-4 w-full overflow-y-auto\", children: [!isSdkInitialized && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoMessage, { variant: \"success\", className: \"mt-4\", children: \"Sign a quick message to turn on cross-chain transfers. Don't worry it's gasless & no funds will move yet.\" })), isSdkInitialized && insufficientBalance && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoMessage, { variant: \"error\", className: \"mt-4\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"space-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"font-semibold\", children: [\"Insufficient \", getTokenFromInputData(inputData), \" balance\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-sm\", children: [\"You don't have enough \", getTokenFromInputData(inputData), \" to complete this transaction.\", transactionType === 'bridgeAndExecute'\n                                                                ? ' Consider using a smaller amount or add more funds to your wallet.'\n                                                                : ' Please add more funds to your wallet or reduce the transaction amount.'] })] }) })), (activeTransaction?.error && status === 'simulation_error') ||\n                                            (simulationResult && getSimulationError && getSimulationError(simulationResult)) ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EnhancedInfoMessage, { error: activeTransaction?.error || new Error('Simulation failed'), context: \"simulation\", className: \"mt-4 w-full\" })) : (shouldShowSimulation &&\n                                            !insufficientBalance &&\n                                            status !== 'simulation_error' &&\n                                            type !== 'swap' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TransactionSimulation, { isLoading: isSimulating, simulationResult: simulationResult || undefined, inputData: transformedInputData, callback: debouncedClick, type: transactionType, status: status, reviewStatus: reviewStatus })))] })] })), status === 'set_allowance' && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: renderAllowanceContent() })] }) }), showFooterButtons && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogFooter, { className: \"flex-shrink-0 w-full mt-auto\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ActionButtons, { primaryText: getPrimaryButtonText(status, reviewStatus), onPrimary: handleButtonClick, onCancel: cancelTransaction, primaryLoading: isPrimaryLoading, primaryDisabled: isPrimaryLoading ||\n                        insufficientBalance ||\n                        isSimulating ||\n                        (status === 'set_allowance' && !allowanceFormValid) ||\n                        (status === 'review' &&\n                            reviewStatus === 'gathering_input' &&\n                            !checkHasSufficientInput(inputData)) ||\n                        (status === 'review' &&\n                            reviewStatus !== 'ready' &&\n                            reviewStatus !== 'needs_allowance' &&\n                            reviewStatus !== 'gathering_input') ||\n                        (status === 'simulation_error' && !checkHasSufficientInput(inputData)), className: \"border-t border-zinc-400/40 bg-gray-100\" }) }))] }));\n}\n\nconst PrefilledInputs = ({ inputData, className = '' }) => {\n    const { exchangeRates } = useInternalNexus();\n    const destinationChain = CHAIN_METADATA[inputData?.chainId ?? inputData?.toChainId ?? SUPPORTED_CHAINS.ETHEREUM];\n    const destinationToken = TOKEN_METADATA[inputData?.token ?? 'ETH'];\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex items-start flex-col gap-y-4 px-6', className), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start gap-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary font-semibold text-sm leading-[18px]\", children: \"Sending\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: destinationToken?.icon, alt: destinationToken?.name, className: \"w-6 h-6 border border-nexus-border-secondary rounded-full\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-black text-[32px] font-semibold leading-0 uppercase font-nexus-primary text-ellipsis\", children: [inputData?.amount, \" \", inputData?.token] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground text-base font-semibold font-nexus-primary\", children: \"To\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: destinationChain?.logo, alt: destinationChain?.shortName, className: cn('w-6 h-6', destinationChain?.id !== SUPPORTED_CHAINS.BASE &&\n                                            destinationChain?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                            ? 'rounded-full'\n                                            : '') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground text-base font-semibold uppercase font-nexus-primary\", children: destinationChain?.name })] })] })] }), inputData?.amount && inputData?.token && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-accent-green font-semibold leading-6 text-lg font-nexus-primary\", children: getFiatValue(inputData?.amount, inputData?.token, exchangeRates) })), inputData?.recipient && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-start flex-col gap-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary text-sm font-semibold font-nexus-primary\", children: \"To\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground text-xl font-semibold font-nexus-primary\", children: truncateAddress(inputData?.recipient, 4, 4) })] }))] }));\n};\n\nfunction BridgeFormSection({ inputData, onUpdate, disabled = false, className, prefillFields = {}, }) {\n    const { activeController } = useInternalNexus();\n    if (!activeController)\n        return null;\n    const requiredFields = ['chainId', 'token', 'amount'];\n    const hasEnoughInputs = requiredFields.every((field) => prefillFields[field] === true);\n    if (hasEnoughInputs) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PrefilledInputs, { inputData: inputData });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionForm, { type: \"bridge\", inputData: inputData, onUpdate: onUpdate, disabled: disabled, className: className, prefillFields: prefillFields }));\n}\nfunction BridgeModal({ title = 'Nexus Widget' }) {\n    const getSimulationError = (simulationResult) => {\n        return (simulationResult &&\n            'bridgeSimulation' in simulationResult &&\n            !simulationResult.bridgeSimulation);\n    };\n    const getMinimumAmount = (simulationResult) => {\n        return simulationResult?.intent?.sourcesTotal || '0';\n    };\n    const getSourceChains = (simulationResult) => {\n        // Use chainDetails from allowance if available (provides needsApproval info)\n        if (simulationResult?.allowance?.chainDetails) {\n            return simulationResult.allowance.chainDetails;\n        }\n        // Fallback to original sources mapping\n        return (simulationResult?.intent?.sources?.map((source) => ({\n            chainId: source.chainID,\n            amount: source.amount,\n        })) || []);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionModal, { transactionType: \"bridge\", modalTitle: title, FormComponent: BridgeFormSection, getSimulationError: getSimulationError, getMinimumAmount: getMinimumAmount, getSourceChains: getSourceChains }));\n}\n\nfunction BridgeButton({ prefill, children, className, title }) {\n    const { startTransaction, activeTransaction } = useInternalNexus();\n    const isLoading = activeTransaction.status === 'processing' || activeTransaction.reviewStatus === 'simulating';\n    const handleClick = () => {\n        startTransaction('bridge', prefill);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: className, children: children({ onClick: handleClick, isLoading }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BridgeModal, { title: title })] }));\n}\n\nfunction TransferFormSection({ inputData, onUpdate, disabled = false, prefillFields = {}, }) {\n    const { activeController } = useInternalNexus();\n    if (!activeController)\n        return null;\n    // Cast to UnifiedInputData since transfer operations only use this type\n    const transferInputData = inputData;\n    const requiredFields = ['chainId', 'token', 'amount', 'recipient'];\n    const hasEnoughInputs = requiredFields.every((field) => prefillFields[field] === true);\n    if (hasEnoughInputs) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PrefilledInputs, { inputData: transferInputData });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionForm, { type: \"transfer\", inputData: transferInputData, onUpdate: onUpdate, disabled: disabled, prefillFields: prefillFields }));\n}\nfunction TransferModal({ title = 'Nexus Widget' }) {\n    const getSimulationError = (simulationResult) => {\n        return simulationResult && !simulationResult.intent;\n    };\n    const getMinimumAmount = (simulationResult) => {\n        return simulationResult?.intent?.sourcesTotal || '0';\n    };\n    const getSourceChains = (simulationResult) => {\n        // Use chainDetails from allowance if available (provides needsApproval info)\n        if (simulationResult?.allowance?.chainDetails) {\n            return simulationResult.allowance.chainDetails;\n        }\n        // Fallback to original sources mapping\n        return (simulationResult?.intent?.sources?.map((source) => ({\n            chainId: source.chainID,\n            amount: source.amount,\n        })) || []);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionModal, { transactionType: \"transfer\", modalTitle: title, FormComponent: TransferFormSection, getSimulationError: getSimulationError, getMinimumAmount: getMinimumAmount, getSourceChains: getSourceChains }));\n}\n\nfunction TransferButton({ prefill, children, className, title }) {\n    const { startTransaction, activeTransaction } = useInternalNexus();\n    const isLoading = activeTransaction.status === 'processing' || activeTransaction.reviewStatus === 'simulating';\n    const handleClick = () => {\n        startTransaction('transfer', prefill);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: className, children: children({ onClick: handleClick, isLoading }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TransferModal, { title: title })] }));\n}\n\nfunction BridgeExecuteForm({ inputData, onUpdate, disabled, prefillFields = {}, }) {\n    const { activeController } = useInternalNexus();\n    if (!activeController)\n        return null;\n    const requiredFields = ['toChainId', 'token', 'amount'];\n    const hasEnoughInputs = requiredFields.every((field) => prefillFields[field] === true);\n    if (hasEnoughInputs) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PrefilledInputs, { inputData: inputData });\n    }\n    const handleUpdate = (data) => {\n        if (data.toChainId !== undefined) {\n            const updateData = { ...data, chainId: data.toChainId };\n            onUpdate(updateData);\n        }\n        else {\n            onUpdate(data);\n        }\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(activeController.InputForm, { prefill: inputData, onUpdate: handleUpdate, isBusy: disabled, prefillFields: prefillFields }));\n}\nfunction BridgeAndExecuteModal({ title = 'Nexus Widget' }) {\n    const getSimulationError = (simulationResult) => {\n        if (!simulationResult)\n            return true;\n        // Check if the overall simulation failed\n        if (simulationResult.success === false || simulationResult.error) {\n            return true;\n        }\n        const isBridgeSkipped = simulationResult.metadata?.bridgeSkipped;\n        if (!isBridgeSkipped) {\n            if (!simulationResult.bridgeSimulation || !simulationResult.bridgeSimulation.intent) {\n                return true;\n            }\n        }\n        if (simulationResult.executeSimulation && !simulationResult.executeSimulation.success) {\n            return true;\n        }\n        return false;\n    };\n    const getMinimumAmount = (simulationResult) => {\n        // If bridge was skipped, use the input amount instead of bridge simulation data\n        if (simulationResult?.metadata?.bridgeSkipped) {\n            return simulationResult.metadata.inputAmount || '0';\n        }\n        const bridgeSim = simulationResult?.bridgeSimulation;\n        return bridgeSim?.intent?.sourcesTotal || '0';\n    };\n    const getSourceChains = (simulationResult) => {\n        // Use chainDetails from allowance if available (provides needsApproval info)\n        if (simulationResult?.allowance?.chainDetails) {\n            return simulationResult.allowance.chainDetails;\n        }\n        // If bridge was skipped, return empty array since there's no bridge routing\n        if (simulationResult?.metadata?.bridgeSkipped) {\n            return [];\n        }\n        const bridgeSim = simulationResult?.bridgeSimulation;\n        return bridgeSim?.intent?.sources?.map((s) => ({ chainId: s.chainID, amount: s.amount })) || [];\n    };\n    const transformInputData = (inputData) => {\n        if (!inputData)\n            return {};\n        return {\n            ...inputData,\n            toChainId: inputData.toChainId,\n        };\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionModal, { transactionType: \"bridgeAndExecute\", modalTitle: title, FormComponent: BridgeExecuteForm, getSimulationError: getSimulationError, getMinimumAmount: getMinimumAmount, getSourceChains: getSourceChains, transformInputData: transformInputData }));\n}\n\nfunction BridgeAndExecuteButton({ contractAddress, contractAbi, functionName, buildFunctionParams, prefill, children, className, title, }) {\n    const { startTransaction, activeTransaction } = useInternalNexus();\n    const isLoading = activeTransaction?.status === 'processing' || activeTransaction?.reviewStatus === 'simulating';\n    if (!contractAddress || !contractAbi || !functionName || !buildFunctionParams) {\n        logger.warn('BridgeAndExecuteButton: Missing required contract props or builder');\n        return null;\n    }\n    const handleClick = () => {\n        const transactionData = {\n            ...(prefill || {}),\n            contractAddress,\n            contractAbi,\n            functionName,\n            buildFunctionParams,\n        };\n        startTransaction('bridgeAndExecute', transactionData);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: className, children: children({ onClick: handleClick, isLoading, disabled: false }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BridgeAndExecuteModal, { title: title })] }));\n}\n\nconst SwapPrefilledInputs = ({ inputData, className = '' }) => {\n    const { exchangeRates, activeTransaction } = useInternalNexus();\n    const sourceChain = CHAIN_METADATA[inputData?.fromChainID ?? SUPPORTED_CHAINS.ETHEREUM];\n    const destinationChain = CHAIN_METADATA[inputData?.toChainID ?? SUPPORTED_CHAINS.ETHEREUM];\n    const transactionIntent = activeTransaction?.simulationResult?.intent;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex items-start flex-col gap-y-4 px-6', className), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start gap-y-2\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center gap-x-2\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-muted-secondary font-semibold text-sm leading-[18px]\", children: \"Swapping\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex flex-col items-start gap-y-3\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"flex items-center gap-x-1\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TokenIcon, { tokenSymbol: inputData?.fromTokenAddress || 'ETH', className: \"w-6 h-6 border border-nexus-border-secondary rounded-full\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-black text-[32px] font-semibold leading-0 uppercase font-nexus-primary text-ellipsis\", children: [inputData?.fromAmount, \" \", inputData?.fromTokenAddress] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: sourceChain?.logo, alt: sourceChain?.shortName, className: cn('w-6 h-6', sourceChain?.id !== SUPPORTED_CHAINS.BASE &&\n                                            sourceChain?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                            ? 'rounded-full'\n                                            : '') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"flex items-center justify-center w-full\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-foreground text-base font-semibold font-nexus-primary\", children: \"\\u2193\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: cn('flex items-center gap-x-1'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TokenIcon, { tokenSymbol: inputData?.toTokenAddress || 'ETH', className: \"w-6 h-6 border border-nexus-border-secondary rounded-full\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", { className: \"text-nexus-black text-[32px] font-semibold leading-0 uppercase font-nexus-primary text-ellipsis\", children: [transactionIntent\n                                                ? formatBalance(transactionIntent?.destination?.amount, transactionIntent?.destination?.token?.decimals, 6)\n                                                : '...', ' ', inputData?.toTokenAddress] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"img\", { src: destinationChain?.logo, alt: destinationChain?.shortName, className: cn('w-6 h-6', destinationChain?.id !== SUPPORTED_CHAINS.BASE &&\n                                            destinationChain?.id !== SUPPORTED_CHAINS.BASE_SEPOLIA\n                                            ? 'rounded-full'\n                                            : '') })] })] })] }), inputData?.fromAmount && inputData?.fromTokenAddress && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { className: \"text-nexus-accent-green font-semibold leading-6 text-lg font-nexus-primary\", children: getFiatValue(inputData?.fromAmount, inputData?.fromTokenAddress, exchangeRates) }))] }));\n};\n\nfunction SwapFormSection({ inputData, onUpdate, disabled = false, prefillFields = {}, }) {\n    // Cast to SwapInputData since swap operations only use this type\n    const swapInputData = inputData;\n    const requiredFields = [\n        'fromChainID',\n        'toChainID',\n        'fromTokenAddress',\n        'toTokenAddress',\n        'fromAmount',\n    ];\n    // Check if fields are actually prefilled (boolean values in prefillFields indicate prefilled fields)\n    const hasPrefilledInputs = requiredFields.every((field) => prefillFields[field] === true);\n    if (hasPrefilledInputs) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SwapPrefilledInputs, { inputData: inputData });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SwapTransactionForm, { inputData: swapInputData, onUpdate: onUpdate, disabled: disabled, prefillFields: prefillFields }));\n}\nfunction SwapModal({ title = 'Nexus Widget' }) {\n    const getSimulationError = (simulationResult) => {\n        if (!simulationResult)\n            return true;\n        return (simulationResult.success === false ||\n            Boolean(simulationResult.error) ||\n            !simulationResult.intent);\n    };\n    const transformInputData = (inputData) => {\n        if (!inputData)\n            return {};\n        return inputData;\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnifiedTransactionModal, { transactionType: \"swap\", modalTitle: title, FormComponent: SwapFormSection, getSimulationError: getSimulationError, transformInputData: transformInputData }));\n}\n\nconst SwapButton = ({ prefill, children, className, title }) => {\n    const { startTransaction, activeTransaction, config } = useInternalNexus();\n    if (config?.network === 'testnet') {\n        throw new Error('Testnet is not supported');\n    }\n    const isLoading = activeTransaction.status === 'processing' || activeTransaction.reviewStatus === 'simulating';\n    const handleClick = () => {\n        startTransaction('swap', prefill);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: className, children: children({ onClick: handleClick, isLoading }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SwapModal, { title: title })] }));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/node_modules/decimal.js/decimal.mjs":
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/node_modules/decimal.js/decimal.mjs ***!
  \***********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decimal: () => (/* binding */ Decimal),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nvar Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Decimal);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@avail-project+nexus-widgets@0.1.11-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_reac_e4ef75473872d34d86bd5ee8941d6bec/node_modules/@avail-project/nexus-widgets/node_modules/decimal.js/decimal.mjs\n");

/***/ })

};
;