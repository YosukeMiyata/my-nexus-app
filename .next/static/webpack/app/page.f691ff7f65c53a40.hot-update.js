"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useNexusBalance.ts":
/*!**************************************!*\
  !*** ./src/hooks/useNexusBalance.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNexusBalance: () => (/* binding */ useNexusBalance)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.5.5_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/.pnpm/wagmi@2.18.0_@tanstack+query-core@5.90.3_@tanstack+react-query@5.90.3_react@19.2.0__@ty_e68084bb6772bb88120a89e86a8a9451/node_modules/wagmi/dist/esm/hooks/useAccount.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/.pnpm/wagmi@2.18.0_@tanstack+query-core@5.90.3_@tanstack+react-query@5.90.3_react@19.2.0__@ty_e68084bb6772bb88120a89e86a8a9451/node_modules/wagmi/dist/esm/hooks/useWalletClient.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/.pnpm/wagmi@2.18.0_@tanstack+query-core@5.90.3_@tanstack+react-query@5.90.3_react@19.2.0__@ty_e68084bb6772bb88120a89e86a8a9451/node_modules/wagmi/dist/esm/hooks/useBalance.js\");\n/* harmony import */ var _avail_project_nexus_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avail-project/nexus-core */ \"(app-pages-browser)/./node_modules/.pnpm/@avail-project+nexus-core@0.0.1-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_utf-8-va_56dd550c8b9e0639694cd9176377fa72/node_modules/@avail-project/nexus-core/dist/index.esm.js\");\n\n\n// Nexus SDKのインポート\n\n// Nexus SDKのインスタンスを作成\nconst nexusSDK = new _avail_project_nexus_core__WEBPACK_IMPORTED_MODULE_1__.NexusSDK({\n    // テストネット設定\n    network: 'testnet',\n    // デバッグモードを有効化\n    debug: true\n});\n// チェーン名のマッピング関数\nconst getChainName = (chainId)=>{\n    if (!chainId) return 'Unknown';\n    const chainMap = {\n        1: 'Ethereum',\n        11155111: 'Sepolia',\n        8453: 'Base',\n        84532: 'Base Sepolia',\n        42161: 'Arbitrum One',\n        421614: 'Arbitrum Sepolia',\n        10: 'Optimism',\n        11155420: 'Optimism Sepolia',\n        137: 'Polygon',\n        80002: 'Polygon Amoy'\n    };\n    return chainMap[chainId] || \"Chain \".concat(chainId);\n};\nconst useNexusBalance = ()=>{\n    const { address, isConnected, chainId } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useAccount)();\n    const { data: walletClient } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useWalletClient)();\n    const [unifiedBalance, setUnifiedBalance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [nexusInitialized, setNexusInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [lastConnectedAddress, setLastConnectedAddress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // 現在のチェーンの残高を取得\n    const { data: currentChainBalance } = (0,wagmi__WEBPACK_IMPORTED_MODULE_4__.useBalance)({\n        address: address,\n        chainId: chainId\n    });\n    const fetchUnifiedBalance = async ()=>{\n        if (!isConnected || !address || !walletClient) {\n            setUnifiedBalance(null);\n            setError('Please connect your wallet first');\n            setLoading(false);\n            return;\n        }\n        setLoading(true);\n        setError(null);\n        try {\n            console.log('Fetching unified balance for address:', address);\n            // Nexus SDKを初期化（まだ初期化されていない場合）\n            if (!nexusInitialized) {\n                console.log('Initializing Nexus SDK with wallet client...');\n                // WalletClientをEthereumProvider形式に変換\n                const ethereumProvider = {\n                    ...walletClient,\n                    on: (event, _callback)=>{\n                        // イベントリスナーの実装（必要に応じて）\n                        console.log('Event listener added:', event);\n                        return ethereumProvider;\n                    },\n                    removeListener: (event, _callback)=>{\n                        // イベントリスナーの削除（必要に応じて）\n                        console.log('Event listener removed:', event);\n                        return ethereumProvider;\n                    }\n                };\n                await nexusSDK.initialize(ethereumProvider);\n                setNexusInitialized(true);\n                console.log('Nexus SDK initialized successfully');\n            }\n            // Nexus SDKを使用して実際の残高を取得\n            // 複数のメソッドを試行して最適なデータを取得\n            let balances = null;\n            try {\n                // メソッド1: getUnifiedBalances() - 統合された残高\n                balances = await nexusSDK.getUnifiedBalances();\n                console.log('Nexus SDK getUnifiedBalances response:', balances);\n                console.log('Detailed analysis of each balance entry:');\n                balances.forEach((balance, index)=>{\n                    console.log(\"Balance \".concat(index + 1, \":\"), {\n                        symbol: balance.symbol,\n                        balance: balance.balance,\n                        balanceInFiat: balance.balanceInFiat,\n                        abstracted: balance.abstracted,\n                        breakdown: balance.breakdown,\n                        allKeys: Object.keys(balance)\n                    });\n                    // breakdown配列の詳細を確認\n                    if (balance.breakdown && Array.isArray(balance.breakdown)) {\n                        console.log(\"Breakdown for \".concat(balance.symbol, \":\"), balance.breakdown);\n                        balance.breakdown.forEach((item, breakdownIndex)=>{\n                            console.log(\"  Breakdown \".concat(breakdownIndex + 1, \":\"), {\n                                chain: item.chain,\n                                chainId: item.chainId,\n                                chainName: item.chainName,\n                                network: item.network,\n                                balance: item.balance,\n                                symbol: item.symbol,\n                                allKeys: Object.keys(item)\n                            });\n                            // chainオブジェクトの詳細を確認\n                            if (item.chain && typeof item.chain === 'object') {\n                                console.log(\"    Chain object details:\", {\n                                    chainId: item.chain.chainId,\n                                    name: item.chain.name,\n                                    id: item.chain.id,\n                                    network: item.chain.network,\n                                    allKeys: Object.keys(item.chain)\n                                });\n                            }\n                        });\n                    }\n                });\n            } catch (unifiedError) {\n                console.error('getUnifiedBalances failed:', unifiedError);\n                throw unifiedError;\n            }\n            // Nexus SDKのレスポンスを処理\n            // UserAsset[]形式のレスポンスを処理\n            if (balances && Array.isArray(balances) && balances.length > 0) {\n                console.log('Raw balances from Nexus SDK:', balances);\n                // breakdown配列から個別のチェーン別の残高を展開\n                const processedBalances = [];\n                balances.forEach((asset)=>{\n                    console.log('Processing asset:', asset.symbol);\n                    // breakdown配列がある場合は、各チェーンの残高を個別に処理\n                    if (asset.breakdown && Array.isArray(asset.breakdown)) {\n                        asset.breakdown.forEach((breakdownItem)=>{\n                            if (parseFloat(breakdownItem.balance) > 0) {\n                                const chainInfo = breakdownItem.chain;\n                                const chainId = (chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.id) || breakdownItem.chainId;\n                                const chainName = (chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.name) || breakdownItem.chainName || getChainName(chainId);\n                                processedBalances.push({\n                                    chain: chainName,\n                                    token: asset.symbol,\n                                    balance: breakdownItem.balance,\n                                    symbol: asset.symbol,\n                                    decimals: asset.decimals || 18,\n                                    usdValue: asset.balanceInFiat ? parseFloat(breakdownItem.balance) / parseFloat(asset.balance) * asset.balanceInFiat : 0,\n                                    chainId: chainId,\n                                    contractAddress: breakdownItem.contractAddress,\n                                    rawBalance: breakdownItem.rawBalance\n                                });\n                            }\n                        });\n                    } else {\n                        // breakdown配列がない場合は、統合された残高を処理\n                        const chainId = asset.chainId ? parseInt(asset.chainId.toString()) : undefined;\n                        processedBalances.push({\n                            chain: asset.chainName || asset.chain || asset.network || getChainName(chainId) || 'Unknown',\n                            token: asset.symbol || asset.token || 'Unknown',\n                            balance: asset.balance || asset.amount || asset.formattedBalance || '0',\n                            symbol: asset.symbol || 'Unknown',\n                            decimals: asset.decimals || 18,\n                            usdValue: asset.usdValue || asset.value || asset.priceUSD || asset.balanceInFiat || 0,\n                            chainId: chainId,\n                            contractAddress: asset.contractAddress,\n                            rawBalance: asset.rawBalance\n                        });\n                    }\n                });\n                // 総USD価値を計算\n                const totalUSD = processedBalances.reduce((sum, balance)=>{\n                    return sum + (balance.usdValue || 0);\n                }, 0);\n                // 現在のチェーンの残高を追加（重複を避けるため、Nexus SDKに含まれていない場合のみ）\n                if (currentChainBalance && chainId) {\n                    console.log('Checking current chain balance:', {\n                        chainId,\n                        symbol: currentChainBalance.symbol,\n                        balance: currentChainBalance.formatted,\n                        chainName: getChainName(chainId)\n                    });\n                    // 現在のチェーンの残高が既にNexus SDKの結果に含まれているかチェック\n                    const existingEntry = processedBalances.find((b)=>b.chainId === chainId && b.symbol === currentChainBalance.symbol);\n                    if (!existingEntry) {\n                        // Nexus SDKに含まれていない場合のみ追加\n                        const currentChainName = getChainName(chainId);\n                        const currentChainBalanceEntry = {\n                            chain: currentChainName,\n                            token: currentChainBalance.symbol,\n                            balance: currentChainBalance.formatted,\n                            symbol: currentChainBalance.symbol,\n                            decimals: currentChainBalance.decimals,\n                            usdValue: 0,\n                            chainId: chainId,\n                            contractAddress: undefined,\n                            rawBalance: currentChainBalance.value.toString()\n                        };\n                        processedBalances.push(currentChainBalanceEntry);\n                        console.log('Added current chain balance to list (not found in Nexus SDK)');\n                    } else {\n                        console.log('Current chain balance already exists in Nexus SDK results');\n                    }\n                } else {\n                    console.log('No current chain balance to add:', {\n                        currentChainBalance: !!currentChainBalance,\n                        chainId\n                    });\n                }\n                const unifiedBalanceData = {\n                    totalUSD,\n                    balances: processedBalances\n                };\n                setUnifiedBalance(unifiedBalanceData);\n            } else {\n                // 残高が見つからない場合のフォールバック\n                setUnifiedBalance({\n                    totalUSD: 0,\n                    balances: []\n                });\n            }\n        } catch (err) {\n            console.error('Nexus SDK error:', err);\n            // エラーの詳細を確認\n            let errorMessage = 'Nexus SDK temporarily unavailable, showing demo data';\n            if (err instanceof Error) {\n                if (err.message.includes('timeout')) {\n                    errorMessage = 'Nexus SDK API timeout, showing demo data';\n                } else if (err.message.includes('Failed to fetch')) {\n                    errorMessage = 'Network error - Nexus SDK API unavailable, showing demo data';\n                } else {\n                    errorMessage = \"Nexus SDK error: \".concat(err.message, \", showing demo data\");\n                }\n            }\n            // Nexus SDKが利用できない場合のフォールバック（モックデータ）\n            console.log('Falling back to mock data due to SDK error');\n            const mockBalance = {\n                totalUSD: 1250.75,\n                balances: [\n                    {\n                        chain: 'Ethereum',\n                        token: 'ETH',\n                        balance: '0.5',\n                        symbol: 'ETH',\n                        decimals: 18,\n                        usdValue: 1000\n                    },\n                    {\n                        chain: 'Ethereum',\n                        token: 'USDC',\n                        balance: '1000',\n                        symbol: 'USDC',\n                        decimals: 6,\n                        usdValue: 1000\n                    },\n                    {\n                        chain: 'Base',\n                        token: 'ETH',\n                        balance: '0.1',\n                        symbol: 'ETH',\n                        decimals: 18,\n                        usdValue: 200\n                    },\n                    {\n                        chain: 'Arbitrum',\n                        token: 'USDT',\n                        balance: '500',\n                        symbol: 'USDT',\n                        decimals: 6,\n                        usdValue: 500\n                    },\n                    {\n                        chain: 'Polygon',\n                        token: 'MATIC',\n                        balance: '100',\n                        symbol: 'MATIC',\n                        decimals: 18,\n                        usdValue: 50.75\n                    }\n                ]\n            };\n            setUnifiedBalance(mockBalance);\n            setError(errorMessage);\n        } finally{\n            setLoading(false);\n        }\n    };\n    // 自動実行を無効化 - ボタンクリック時のみ実行\n    // useEffect(() => {\n    //   if (isConnected && address && walletClient) {\n    //     fetchUnifiedBalance()\n    //   } else {\n    //     setUnifiedBalance(null)\n    //     setError(null)\n    //     setNexusInitialized(false)\n    //   }\n    // }, [isConnected, address, walletClient])\n    return {\n        unifiedBalance,\n        loading,\n        error,\n        refetch: fetchUnifiedBalance\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9ob29rcy91c2VOZXh1c0JhbGFuY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEyQztBQUNvQjtBQUMvRCxrQkFBa0I7QUFDa0M7QUFtQnBELHNCQUFzQjtBQUN0QixNQUFNSyxXQUFXLElBQUlELCtEQUFRQSxDQUFDO0lBQzVCLFdBQVc7SUFDWEUsU0FBUztJQUNULGNBQWM7SUFDZEMsT0FBTztBQUNUO0FBRUEsZ0JBQWdCO0FBQ2hCLE1BQU1DLGVBQWUsQ0FBQ0M7SUFDcEIsSUFBSSxDQUFDQSxTQUFTLE9BQU87SUFFckIsTUFBTUMsV0FBNEM7UUFDaEQsR0FBRztRQUNILFVBQVU7UUFDVixNQUFNO1FBQ04sT0FBTztRQUNQLE9BQU87UUFDUCxRQUFRO1FBQ1IsSUFBSTtRQUNKLFVBQVU7UUFDVixLQUFLO1FBQ0wsT0FBTztJQUNUO0lBQ0EsT0FBT0EsUUFBUSxDQUFDRCxRQUFRLElBQUksU0FBaUIsT0FBUkE7QUFDdkM7QUFFTyxNQUFNRSxrQkFBa0I7SUFDN0IsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUosT0FBTyxFQUFFLEdBQUdSLGlEQUFVQTtJQUNwRCxNQUFNLEVBQUVhLE1BQU1DLFlBQVksRUFBRSxHQUFHYixzREFBZUE7SUFDOUMsTUFBTSxDQUFDYyxnQkFBZ0JDLGtCQUFrQixHQUFHakIsK0NBQVFBLENBQXdCO0lBQzVFLE1BQU0sQ0FBQ2tCLFNBQVNDLFdBQVcsR0FBR25CLCtDQUFRQSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQ29CLE9BQU9DLFNBQVMsR0FBR3JCLCtDQUFRQSxDQUFnQjtJQUNsRCxNQUFNLENBQUNzQixrQkFBa0JDLG9CQUFvQixHQUFHdkIsK0NBQVFBLENBQUM7SUFDekQsTUFBTSxDQUFDd0Isc0JBQXNCQyx3QkFBd0IsR0FBR3pCLCtDQUFRQSxDQUFnQjtJQUVoRixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFYyxNQUFNWSxtQkFBbUIsRUFBRSxHQUFHdkIsaURBQVVB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Q1g7QUFDRixFQUFDIiwic291cmNlcyI6WyIvVXNlcnMveW91c3VrZS9NeVByb2plY3QvbXktbmV4dXMtYXBwL3NyYy9ob29rcy91c2VOZXh1c0JhbGFuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlQWNjb3VudCwgdXNlV2FsbGV0Q2xpZW50LCB1c2VCYWxhbmNlIH0gZnJvbSAnd2FnbWknXG4vLyBOZXh1cyBTREvjga7jgqTjg7Pjg53jg7zjg4hcbmltcG9ydCB7IE5leHVzU0RLIH0gZnJvbSAnQGF2YWlsLXByb2plY3QvbmV4dXMtY29yZSdcblxuaW50ZXJmYWNlIFRva2VuQmFsYW5jZSB7XG4gIGNoYWluOiBzdHJpbmdcbiAgdG9rZW46IHN0cmluZ1xuICBiYWxhbmNlOiBzdHJpbmdcbiAgc3ltYm9sOiBzdHJpbmdcbiAgZGVjaW1hbHM6IG51bWJlclxuICB1c2RWYWx1ZT86IG51bWJlclxuICBjaGFpbklkPzogbnVtYmVyXG4gIGNvbnRyYWN0QWRkcmVzcz86IHN0cmluZ1xuICByYXdCYWxhbmNlPzogc3RyaW5nXG59XG5cbmludGVyZmFjZSBVbmlmaWVkQmFsYW5jZSB7XG4gIHRvdGFsVVNEOiBudW1iZXJcbiAgYmFsYW5jZXM6IFRva2VuQmFsYW5jZVtdXG59XG5cbi8vIE5leHVzIFNES+OBruOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkFxuY29uc3QgbmV4dXNTREsgPSBuZXcgTmV4dXNTREsoe1xuICAvLyDjg4bjgrnjg4jjg43jg4Pjg4joqK3lrppcbiAgbmV0d29yazogJ3Rlc3RuZXQnLFxuICAvLyDjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgpLmnInlirnljJZcbiAgZGVidWc6IHRydWVcbn0pXG5cbi8vIOODgeOCp+ODvOODs+WQjeOBruODnuODg+ODlOODs+OCsOmWouaVsFxuY29uc3QgZ2V0Q2hhaW5OYW1lID0gKGNoYWluSWQ6IG51bWJlciB8IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xuICBpZiAoIWNoYWluSWQpIHJldHVybiAnVW5rbm93bidcbiAgXG4gIGNvbnN0IGNoYWluTWFwOiBSZWNvcmQ8bnVtYmVyIHwgc3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIDE6ICdFdGhlcmV1bScsXG4gICAgMTExNTUxMTE6ICdTZXBvbGlhJyxcbiAgICA4NDUzOiAnQmFzZScsXG4gICAgODQ1MzI6ICdCYXNlIFNlcG9saWEnLFxuICAgIDQyMTYxOiAnQXJiaXRydW0gT25lJyxcbiAgICA0MjE2MTQ6ICdBcmJpdHJ1bSBTZXBvbGlhJyxcbiAgICAxMDogJ09wdGltaXNtJyxcbiAgICAxMTE1NTQyMDogJ09wdGltaXNtIFNlcG9saWEnLFxuICAgIDEzNzogJ1BvbHlnb24nLFxuICAgIDgwMDAyOiAnUG9seWdvbiBBbW95J1xuICB9XG4gIHJldHVybiBjaGFpbk1hcFtjaGFpbklkXSB8fCBgQ2hhaW4gJHtjaGFpbklkfWBcbn1cblxuZXhwb3J0IGNvbnN0IHVzZU5leHVzQmFsYW5jZSA9ICgpID0+IHtcbiAgY29uc3QgeyBhZGRyZXNzLCBpc0Nvbm5lY3RlZCwgY2hhaW5JZCB9ID0gdXNlQWNjb3VudCgpXG4gIGNvbnN0IHsgZGF0YTogd2FsbGV0Q2xpZW50IH0gPSB1c2VXYWxsZXRDbGllbnQoKVxuICBjb25zdCBbdW5pZmllZEJhbGFuY2UsIHNldFVuaWZpZWRCYWxhbmNlXSA9IHVzZVN0YXRlPFVuaWZpZWRCYWxhbmNlIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW25leHVzSW5pdGlhbGl6ZWQsIHNldE5leHVzSW5pdGlhbGl6ZWRdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtsYXN0Q29ubmVjdGVkQWRkcmVzcywgc2V0TGFzdENvbm5lY3RlZEFkZHJlc3NdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbClcbiAgXG4gIC8vIOePvuWcqOOBruODgeOCp+ODvOODs+OBruaui+mrmOOCkuWPluW+l1xuICBjb25zdCB7IGRhdGE6IGN1cnJlbnRDaGFpbkJhbGFuY2UgfSA9IHVzZUJhbGFuY2Uoe1xuICAgIGFkZHJlc3M6IGFkZHJlc3MsXG4gICAgY2hhaW5JZDogY2hhaW5JZFxuICB9KVxuXG4gIGNvbnN0IGZldGNoVW5pZmllZEJhbGFuY2UgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFpc0Nvbm5lY3RlZCB8fCAhYWRkcmVzcyB8fCAhd2FsbGV0Q2xpZW50KSB7XG4gICAgICBzZXRVbmlmaWVkQmFsYW5jZShudWxsKVxuICAgICAgc2V0RXJyb3IoJ1BsZWFzZSBjb25uZWN0IHlvdXIgd2FsbGV0IGZpcnN0JylcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRMb2FkaW5nKHRydWUpXG4gICAgc2V0RXJyb3IobnVsbClcblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgdW5pZmllZCBiYWxhbmNlIGZvciBhZGRyZXNzOicsIGFkZHJlc3MpXG4gICAgICBcbiAgICAgIC8vIE5leHVzIFNES+OCkuWIneacn+WMlu+8iOOBvuOBoOWIneacn+WMluOBleOCjOOBpuOBhOOBquOBhOWgtOWQiO+8iVxuICAgICAgaWYgKCFuZXh1c0luaXRpYWxpemVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgTmV4dXMgU0RLIHdpdGggd2FsbGV0IGNsaWVudC4uLicpXG4gICAgICAgIFxuICAgICAgICAvLyBXYWxsZXRDbGllbnTjgpJFdGhlcmV1bVByb3ZpZGVy5b2i5byP44Gr5aSJ5o+bXG4gICAgICAgIGNvbnN0IGV0aGVyZXVtUHJvdmlkZXIgPSB7XG4gICAgICAgICAgLi4ud2FsbGV0Q2xpZW50LFxuICAgICAgICAgIG9uOiAoZXZlbnQ6IHN0cmluZywgX2NhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgIC8vIOOCpOODmeODs+ODiOODquOCueODiuODvOOBruWun+ijhe+8iOW/heimgeOBq+W/nOOBmOOBpu+8iVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0V2ZW50IGxpc3RlbmVyIGFkZGVkOicsIGV2ZW50KVxuICAgICAgICAgICAgcmV0dXJuIGV0aGVyZXVtUHJvdmlkZXJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyOiAoZXZlbnQ6IHN0cmluZywgX2NhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgIC8vIOOCpOODmeODs+ODiOODquOCueODiuODvOOBruWJiumZpO+8iOW/heimgeOBq+W/nOOBmOOBpu+8iVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0V2ZW50IGxpc3RlbmVyIHJlbW92ZWQ6JywgZXZlbnQpXG4gICAgICAgICAgICByZXR1cm4gZXRoZXJldW1Qcm92aWRlclxuICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBhbnlcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IG5leHVzU0RLLmluaXRpYWxpemUoZXRoZXJldW1Qcm92aWRlcilcbiAgICAgICAgc2V0TmV4dXNJbml0aWFsaXplZCh0cnVlKVxuICAgICAgICBjb25zb2xlLmxvZygnTmV4dXMgU0RLIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseScpXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE5leHVzIFNES+OCkuS9v+eUqOOBl+OBpuWun+mam+OBruaui+mrmOOCkuWPluW+l1xuICAgICAgLy8g6KSH5pWw44Gu44Oh44K944OD44OJ44KS6Kmm6KGM44GX44Gm5pyA6YGp44Gq44OH44O844K/44KS5Y+W5b6XXG4gICAgICBsZXQgYmFsYW5jZXM6IGFueSA9IG51bGxcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g44Oh44K944OD44OJMTogZ2V0VW5pZmllZEJhbGFuY2VzKCkgLSDntbHlkIjjgZXjgozjgZ/mrovpq5hcbiAgICAgICAgYmFsYW5jZXMgPSBhd2FpdCBuZXh1c1NESy5nZXRVbmlmaWVkQmFsYW5jZXMoKVxuICAgICAgICBjb25zb2xlLmxvZygnTmV4dXMgU0RLIGdldFVuaWZpZWRCYWxhbmNlcyByZXNwb25zZTonLCBiYWxhbmNlcylcbiAgICAgICAgY29uc29sZS5sb2coJ0RldGFpbGVkIGFuYWx5c2lzIG9mIGVhY2ggYmFsYW5jZSBlbnRyeTonKVxuICAgICAgICBiYWxhbmNlcy5mb3JFYWNoKChiYWxhbmNlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgQmFsYW5jZSAke2luZGV4ICsgMX06YCwge1xuICAgICAgICAgICAgc3ltYm9sOiBiYWxhbmNlLnN5bWJvbCxcbiAgICAgICAgICAgIGJhbGFuY2U6IGJhbGFuY2UuYmFsYW5jZSxcbiAgICAgICAgICAgIGJhbGFuY2VJbkZpYXQ6IGJhbGFuY2UuYmFsYW5jZUluRmlhdCxcbiAgICAgICAgICAgIGFic3RyYWN0ZWQ6IGJhbGFuY2UuYWJzdHJhY3RlZCxcbiAgICAgICAgICAgIGJyZWFrZG93bjogYmFsYW5jZS5icmVha2Rvd24sXG4gICAgICAgICAgICBhbGxLZXlzOiBPYmplY3Qua2V5cyhiYWxhbmNlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gYnJlYWtkb3du6YWN5YiX44Gu6Kmz57Sw44KS56K66KqNXG4gICAgICAgICAgaWYgKGJhbGFuY2UuYnJlYWtkb3duICYmIEFycmF5LmlzQXJyYXkoYmFsYW5jZS5icmVha2Rvd24pKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQnJlYWtkb3duIGZvciAke2JhbGFuY2Uuc3ltYm9sfTpgLCBiYWxhbmNlLmJyZWFrZG93bilcbiAgICAgICAgICAgIGJhbGFuY2UuYnJlYWtkb3duLmZvckVhY2goKGl0ZW06IGFueSwgYnJlYWtkb3duSW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICBCcmVha2Rvd24gJHticmVha2Rvd25JbmRleCArIDF9OmAsIHtcbiAgICAgICAgICAgICAgICBjaGFpbjogaXRlbS5jaGFpbixcbiAgICAgICAgICAgICAgICBjaGFpbklkOiBpdGVtLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgY2hhaW5OYW1lOiBpdGVtLmNoYWluTmFtZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrOiBpdGVtLm5ldHdvcmssXG4gICAgICAgICAgICAgICAgYmFsYW5jZTogaXRlbS5iYWxhbmNlLFxuICAgICAgICAgICAgICAgIHN5bWJvbDogaXRlbS5zeW1ib2wsXG4gICAgICAgICAgICAgICAgYWxsS2V5czogT2JqZWN0LmtleXMoaXRlbSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIGNoYWlu44Kq44OW44K444Kn44Kv44OI44Gu6Kmz57Sw44KS56K66KqNXG4gICAgICAgICAgICAgIGlmIChpdGVtLmNoYWluICYmIHR5cGVvZiBpdGVtLmNoYWluID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAgQ2hhaW4gb2JqZWN0IGRldGFpbHM6YCwge1xuICAgICAgICAgICAgICAgICAgY2hhaW5JZDogaXRlbS5jaGFpbi5jaGFpbklkLFxuICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5jaGFpbi5uYW1lLFxuICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uY2hhaW4uaWQsXG4gICAgICAgICAgICAgICAgICBuZXR3b3JrOiBpdGVtLmNoYWluLm5ldHdvcmssXG4gICAgICAgICAgICAgICAgICBhbGxLZXlzOiBPYmplY3Qua2V5cyhpdGVtLmNoYWluKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICB9IGNhdGNoICh1bmlmaWVkRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignZ2V0VW5pZmllZEJhbGFuY2VzIGZhaWxlZDonLCB1bmlmaWVkRXJyb3IpXG4gICAgICAgIHRocm93IHVuaWZpZWRFcnJvclxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBOZXh1cyBTREvjga7jg6zjgrnjg53jg7PjgrnjgpLlh6bnkIZcbiAgICAgIC8vIFVzZXJBc3NldFtd5b2i5byP44Gu44Os44K544Od44Oz44K544KS5Yem55CGXG4gICAgICBpZiAoYmFsYW5jZXMgJiYgQXJyYXkuaXNBcnJheShiYWxhbmNlcykgJiYgYmFsYW5jZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmxvZygnUmF3IGJhbGFuY2VzIGZyb20gTmV4dXMgU0RLOicsIGJhbGFuY2VzKVxuICAgICAgICBcbiAgICAgICAgLy8gYnJlYWtkb3du6YWN5YiX44GL44KJ5YCL5Yil44Gu44OB44Kn44O844Oz5Yil44Gu5q6L6auY44KS5bGV6ZaLXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZEJhbGFuY2VzOiBUb2tlbkJhbGFuY2VbXSA9IFtdXG4gICAgICAgIFxuICAgICAgICBiYWxhbmNlcy5mb3JFYWNoKChhc3NldDogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgYXNzZXQ6JywgYXNzZXQuc3ltYm9sKVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIGJyZWFrZG93bumFjeWIl+OBjOOBguOCi+WgtOWQiOOBr+OAgeWQhOODgeOCp+ODvOODs+OBruaui+mrmOOCkuWAi+WIpeOBq+WHpueQhlxuICAgICAgICAgIGlmIChhc3NldC5icmVha2Rvd24gJiYgQXJyYXkuaXNBcnJheShhc3NldC5icmVha2Rvd24pKSB7XG4gICAgICAgICAgICBhc3NldC5icmVha2Rvd24uZm9yRWFjaCgoYnJlYWtkb3duSXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KGJyZWFrZG93bkl0ZW0uYmFsYW5jZSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhaW5JbmZvID0gYnJlYWtkb3duSXRlbS5jaGFpblxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBjaGFpbkluZm8/LmlkIHx8IGJyZWFrZG93bkl0ZW0uY2hhaW5JZFxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluTmFtZSA9IGNoYWluSW5mbz8ubmFtZSB8fCBicmVha2Rvd25JdGVtLmNoYWluTmFtZSB8fCBnZXRDaGFpbk5hbWUoY2hhaW5JZClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRCYWxhbmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIGNoYWluOiBjaGFpbk5hbWUsXG4gICAgICAgICAgICAgICAgICB0b2tlbjogYXNzZXQuc3ltYm9sLFxuICAgICAgICAgICAgICAgICAgYmFsYW5jZTogYnJlYWtkb3duSXRlbS5iYWxhbmNlLFxuICAgICAgICAgICAgICAgICAgc3ltYm9sOiBhc3NldC5zeW1ib2wsXG4gICAgICAgICAgICAgICAgICBkZWNpbWFsczogYXNzZXQuZGVjaW1hbHMgfHwgMTgsXG4gICAgICAgICAgICAgICAgICB1c2RWYWx1ZTogYXNzZXQuYmFsYW5jZUluRmlhdCA/IChwYXJzZUZsb2F0KGJyZWFrZG93bkl0ZW0uYmFsYW5jZSkgLyBwYXJzZUZsb2F0KGFzc2V0LmJhbGFuY2UpKSAqIGFzc2V0LmJhbGFuY2VJbkZpYXQgOiAwLFxuICAgICAgICAgICAgICAgICAgY2hhaW5JZDogY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogYnJlYWtkb3duSXRlbS5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICByYXdCYWxhbmNlOiBicmVha2Rvd25JdGVtLnJhd0JhbGFuY2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBicmVha2Rvd27phY3liJfjgYzjgarjgYTloLTlkIjjga/jgIHntbHlkIjjgZXjgozjgZ/mrovpq5jjgpLlh6bnkIZcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBhc3NldC5jaGFpbklkID8gcGFyc2VJbnQoYXNzZXQuY2hhaW5JZC50b1N0cmluZygpKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcm9jZXNzZWRCYWxhbmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgY2hhaW46IGFzc2V0LmNoYWluTmFtZSB8fCBhc3NldC5jaGFpbiB8fCBhc3NldC5uZXR3b3JrIHx8IGdldENoYWluTmFtZShjaGFpbklkKSB8fCAnVW5rbm93bicsXG4gICAgICAgICAgICAgIHRva2VuOiBhc3NldC5zeW1ib2wgfHwgYXNzZXQudG9rZW4gfHwgJ1Vua25vd24nLFxuICAgICAgICAgICAgICBiYWxhbmNlOiBhc3NldC5iYWxhbmNlIHx8IGFzc2V0LmFtb3VudCB8fCBhc3NldC5mb3JtYXR0ZWRCYWxhbmNlIHx8ICcwJyxcbiAgICAgICAgICAgICAgc3ltYm9sOiBhc3NldC5zeW1ib2wgfHwgJ1Vua25vd24nLFxuICAgICAgICAgICAgICBkZWNpbWFsczogYXNzZXQuZGVjaW1hbHMgfHwgMTgsXG4gICAgICAgICAgICAgIHVzZFZhbHVlOiBhc3NldC51c2RWYWx1ZSB8fCBhc3NldC52YWx1ZSB8fCBhc3NldC5wcmljZVVTRCB8fCBhc3NldC5iYWxhbmNlSW5GaWF0IHx8IDAsXG4gICAgICAgICAgICAgIGNoYWluSWQ6IGNoYWluSWQsXG4gICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogYXNzZXQuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICAgICAgICByYXdCYWxhbmNlOiBhc3NldC5yYXdCYWxhbmNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIC8vIOe3j1VTROS+oeWApOOCkuioiOeul1xuICAgICAgICBjb25zdCB0b3RhbFVTRCA9IHByb2Nlc3NlZEJhbGFuY2VzLnJlZHVjZSgoc3VtLCBiYWxhbmNlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHN1bSArIChiYWxhbmNlLnVzZFZhbHVlIHx8IDApXG4gICAgICAgIH0sIDApXG4gICAgICAgIFxuICAgICAgICAvLyDnj77lnKjjga7jg4Hjgqfjg7zjg7Pjga7mrovpq5jjgpLov73liqDvvIjph43opIfjgpLpgb/jgZHjgovjgZ/jgoHjgIFOZXh1cyBTREvjgavlkKvjgb7jgozjgabjgYTjgarjgYTloLTlkIjjga7jgb/vvIlcbiAgICAgICAgaWYgKGN1cnJlbnRDaGFpbkJhbGFuY2UgJiYgY2hhaW5JZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDaGVja2luZyBjdXJyZW50IGNoYWluIGJhbGFuY2U6Jywge1xuICAgICAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgICAgIHN5bWJvbDogY3VycmVudENoYWluQmFsYW5jZS5zeW1ib2wsXG4gICAgICAgICAgICBiYWxhbmNlOiBjdXJyZW50Q2hhaW5CYWxhbmNlLmZvcm1hdHRlZCxcbiAgICAgICAgICAgIGNoYWluTmFtZTogZ2V0Q2hhaW5OYW1lKGNoYWluSWQpXG4gICAgICAgICAgfSlcbiAgICAgICAgICBcbiAgICAgICAgICAvLyDnj77lnKjjga7jg4Hjgqfjg7zjg7Pjga7mrovpq5jjgYzml6LjgatOZXh1cyBTREvjga7ntZDmnpzjgavlkKvjgb7jgozjgabjgYTjgovjgYvjg4Hjgqfjg4Pjgq9cbiAgICAgICAgICBjb25zdCBleGlzdGluZ0VudHJ5ID0gcHJvY2Vzc2VkQmFsYW5jZXMuZmluZChiID0+IFxuICAgICAgICAgICAgYi5jaGFpbklkID09PSBjaGFpbklkICYmIGIuc3ltYm9sID09PSBjdXJyZW50Q2hhaW5CYWxhbmNlLnN5bWJvbFxuICAgICAgICAgIClcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoIWV4aXN0aW5nRW50cnkpIHtcbiAgICAgICAgICAgIC8vIE5leHVzIFNES+OBq+WQq+OBvuOCjOOBpuOBhOOBquOBhOWgtOWQiOOBruOBv+i/veWKoFxuICAgICAgICAgICAgY29uc3QgY3VycmVudENoYWluTmFtZSA9IGdldENoYWluTmFtZShjaGFpbklkKVxuICAgICAgICAgICAgY29uc3QgY3VycmVudENoYWluQmFsYW5jZUVudHJ5OiBUb2tlbkJhbGFuY2UgPSB7XG4gICAgICAgICAgICAgIGNoYWluOiBjdXJyZW50Q2hhaW5OYW1lLFxuICAgICAgICAgICAgICB0b2tlbjogY3VycmVudENoYWluQmFsYW5jZS5zeW1ib2wsXG4gICAgICAgICAgICAgIGJhbGFuY2U6IGN1cnJlbnRDaGFpbkJhbGFuY2UuZm9ybWF0dGVkLFxuICAgICAgICAgICAgICBzeW1ib2w6IGN1cnJlbnRDaGFpbkJhbGFuY2Uuc3ltYm9sLFxuICAgICAgICAgICAgICBkZWNpbWFsczogY3VycmVudENoYWluQmFsYW5jZS5kZWNpbWFscyxcbiAgICAgICAgICAgICAgdXNkVmFsdWU6IDAsIC8vIFVTROS+oeWApOOBr+ioiOeul+OBl+OBquOBhFxuICAgICAgICAgICAgICBjaGFpbklkOiBjaGFpbklkLFxuICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgcmF3QmFsYW5jZTogY3VycmVudENoYWluQmFsYW5jZS52YWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2Nlc3NlZEJhbGFuY2VzLnB1c2goY3VycmVudENoYWluQmFsYW5jZUVudHJ5KVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0FkZGVkIGN1cnJlbnQgY2hhaW4gYmFsYW5jZSB0byBsaXN0IChub3QgZm91bmQgaW4gTmV4dXMgU0RLKScpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IGNoYWluIGJhbGFuY2UgYWxyZWFkeSBleGlzdHMgaW4gTmV4dXMgU0RLIHJlc3VsdHMnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnTm8gY3VycmVudCBjaGFpbiBiYWxhbmNlIHRvIGFkZDonLCB7XG4gICAgICAgICAgICBjdXJyZW50Q2hhaW5CYWxhbmNlOiAhIWN1cnJlbnRDaGFpbkJhbGFuY2UsXG4gICAgICAgICAgICBjaGFpbklkXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdW5pZmllZEJhbGFuY2VEYXRhOiBVbmlmaWVkQmFsYW5jZSA9IHtcbiAgICAgICAgICB0b3RhbFVTRCxcbiAgICAgICAgICBiYWxhbmNlczogcHJvY2Vzc2VkQmFsYW5jZXNcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0VW5pZmllZEJhbGFuY2UodW5pZmllZEJhbGFuY2VEYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5q6L6auY44GM6KaL44Gk44GL44KJ44Gq44GE5aC05ZCI44Gu44OV44Kp44O844Or44OQ44OD44KvXG4gICAgICAgIHNldFVuaWZpZWRCYWxhbmNlKHtcbiAgICAgICAgICB0b3RhbFVTRDogMCxcbiAgICAgICAgICBiYWxhbmNlczogW11cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05leHVzIFNESyBlcnJvcjonLCBlcnIpXG4gICAgICBcbiAgICAgIC8vIOOCqOODqeODvOOBruips+e0sOOCkueiuuiqjVxuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICdOZXh1cyBTREsgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUsIHNob3dpbmcgZGVtbyBkYXRhJ1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChlcnIubWVzc2FnZS5pbmNsdWRlcygndGltZW91dCcpKSB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gJ05leHVzIFNESyBBUEkgdGltZW91dCwgc2hvd2luZyBkZW1vIGRhdGEnXG4gICAgICAgIH0gZWxzZSBpZiAoZXJyLm1lc3NhZ2UuaW5jbHVkZXMoJ0ZhaWxlZCB0byBmZXRjaCcpKSB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gJ05ldHdvcmsgZXJyb3IgLSBOZXh1cyBTREsgQVBJIHVuYXZhaWxhYmxlLCBzaG93aW5nIGRlbW8gZGF0YSdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBgTmV4dXMgU0RLIGVycm9yOiAke2Vyci5tZXNzYWdlfSwgc2hvd2luZyBkZW1vIGRhdGFgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gTmV4dXMgU0RL44GM5Yip55So44Gn44GN44Gq44GE5aC05ZCI44Gu44OV44Kp44O844Or44OQ44OD44Kv77yI44Oi44OD44Kv44OH44O844K/77yJXG4gICAgICBjb25zb2xlLmxvZygnRmFsbGluZyBiYWNrIHRvIG1vY2sgZGF0YSBkdWUgdG8gU0RLIGVycm9yJylcbiAgICAgIFxuICAgICAgY29uc3QgbW9ja0JhbGFuY2U6IFVuaWZpZWRCYWxhbmNlID0ge1xuICAgICAgICB0b3RhbFVTRDogMTI1MC43NSxcbiAgICAgICAgYmFsYW5jZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGFpbjogJ0V0aGVyZXVtJyxcbiAgICAgICAgICAgIHRva2VuOiAnRVRIJyxcbiAgICAgICAgICAgIGJhbGFuY2U6ICcwLjUnLFxuICAgICAgICAgICAgc3ltYm9sOiAnRVRIJyxcbiAgICAgICAgICAgIGRlY2ltYWxzOiAxOCxcbiAgICAgICAgICAgIHVzZFZhbHVlOiAxMDAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGFpbjogJ0V0aGVyZXVtJyxcbiAgICAgICAgICAgIHRva2VuOiAnVVNEQycsXG4gICAgICAgICAgICBiYWxhbmNlOiAnMTAwMCcsXG4gICAgICAgICAgICBzeW1ib2w6ICdVU0RDJyxcbiAgICAgICAgICAgIGRlY2ltYWxzOiA2LFxuICAgICAgICAgICAgdXNkVmFsdWU6IDEwMDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNoYWluOiAnQmFzZScsXG4gICAgICAgICAgICB0b2tlbjogJ0VUSCcsXG4gICAgICAgICAgICBiYWxhbmNlOiAnMC4xJyxcbiAgICAgICAgICAgIHN5bWJvbDogJ0VUSCcsXG4gICAgICAgICAgICBkZWNpbWFsczogMTgsXG4gICAgICAgICAgICB1c2RWYWx1ZTogMjAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGFpbjogJ0FyYml0cnVtJyxcbiAgICAgICAgICAgIHRva2VuOiAnVVNEVCcsXG4gICAgICAgICAgICBiYWxhbmNlOiAnNTAwJyxcbiAgICAgICAgICAgIHN5bWJvbDogJ1VTRFQnLFxuICAgICAgICAgICAgZGVjaW1hbHM6IDYsXG4gICAgICAgICAgICB1c2RWYWx1ZTogNTAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGFpbjogJ1BvbHlnb24nLFxuICAgICAgICAgICAgdG9rZW46ICdNQVRJQycsXG4gICAgICAgICAgICBiYWxhbmNlOiAnMTAwJyxcbiAgICAgICAgICAgIHN5bWJvbDogJ01BVElDJyxcbiAgICAgICAgICAgIGRlY2ltYWxzOiAxOCxcbiAgICAgICAgICAgIHVzZFZhbHVlOiA1MC43NVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgICAgXG4gICAgICBzZXRVbmlmaWVkQmFsYW5jZShtb2NrQmFsYW5jZSlcbiAgICAgIHNldEVycm9yKGVycm9yTWVzc2FnZSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSlcbiAgICB9XG4gIH1cblxuICAvLyDoh6rli5Xlrp/ooYzjgpLnhKHlirnljJYgLSDjg5zjgr/jg7Pjgq/jg6rjg4Pjgq/mmYLjga7jgb/lrp/ooYxcbiAgLy8gdXNlRWZmZWN0KCgpID0+IHtcbiAgLy8gICBpZiAoaXNDb25uZWN0ZWQgJiYgYWRkcmVzcyAmJiB3YWxsZXRDbGllbnQpIHtcbiAgLy8gICAgIGZldGNoVW5pZmllZEJhbGFuY2UoKVxuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICBzZXRVbmlmaWVkQmFsYW5jZShudWxsKVxuICAvLyAgICAgc2V0RXJyb3IobnVsbClcbiAgLy8gICAgIHNldE5leHVzSW5pdGlhbGl6ZWQoZmFsc2UpXG4gIC8vICAgfVxuICAvLyB9LCBbaXNDb25uZWN0ZWQsIGFkZHJlc3MsIHdhbGxldENsaWVudF0pXG5cbiAgcmV0dXJuIHtcbiAgICB1bmlmaWVkQmFsYW5jZSxcbiAgICBsb2FkaW5nLFxuICAgIGVycm9yLFxuICAgIHJlZmV0Y2g6IGZldGNoVW5pZmllZEJhbGFuY2VcbiAgfVxufVxuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlQWNjb3VudCIsInVzZVdhbGxldENsaWVudCIsInVzZUJhbGFuY2UiLCJOZXh1c1NESyIsIm5leHVzU0RLIiwibmV0d29yayIsImRlYnVnIiwiZ2V0Q2hhaW5OYW1lIiwiY2hhaW5JZCIsImNoYWluTWFwIiwidXNlTmV4dXNCYWxhbmNlIiwiYWRkcmVzcyIsImlzQ29ubmVjdGVkIiwiZGF0YSIsIndhbGxldENsaWVudCIsInVuaWZpZWRCYWxhbmNlIiwic2V0VW5pZmllZEJhbGFuY2UiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJuZXh1c0luaXRpYWxpemVkIiwic2V0TmV4dXNJbml0aWFsaXplZCIsImxhc3RDb25uZWN0ZWRBZGRyZXNzIiwic2V0TGFzdENvbm5lY3RlZEFkZHJlc3MiLCJjdXJyZW50Q2hhaW5CYWxhbmNlIiwiZmV0Y2hVbmlmaWVkQmFsYW5jZSIsImNvbnNvbGUiLCJsb2ciLCJldGhlcmV1bVByb3ZpZGVyIiwib24iLCJldmVudCIsIl9jYWxsYmFjayIsInJlbW92ZUxpc3RlbmVyIiwiaW5pdGlhbGl6ZSIsImJhbGFuY2VzIiwiZ2V0VW5pZmllZEJhbGFuY2VzIiwiZm9yRWFjaCIsImJhbGFuY2UiLCJpbmRleCIsInN5bWJvbCIsImJhbGFuY2VJbkZpYXQiLCJhYnN0cmFjdGVkIiwiYnJlYWtkb3duIiwiYWxsS2V5cyIsIk9iamVjdCIsImtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtIiwiYnJlYWtkb3duSW5kZXgiLCJjaGFpbiIsImNoYWluTmFtZSIsIm5hbWUiLCJpZCIsInVuaWZpZWRFcnJvciIsImxlbmd0aCIsInByb2Nlc3NlZEJhbGFuY2VzIiwiYXNzZXQiLCJicmVha2Rvd25JdGVtIiwicGFyc2VGbG9hdCIsImNoYWluSW5mbyIsInB1c2giLCJ0b2tlbiIsImRlY2ltYWxzIiwidXNkVmFsdWUiLCJjb250cmFjdEFkZHJlc3MiLCJyYXdCYWxhbmNlIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInVuZGVmaW5lZCIsImFtb3VudCIsImZvcm1hdHRlZEJhbGFuY2UiLCJ2YWx1ZSIsInByaWNlVVNEIiwidG90YWxVU0QiLCJyZWR1Y2UiLCJzdW0iLCJmb3JtYXR0ZWQiLCJleGlzdGluZ0VudHJ5IiwiZmluZCIsImIiLCJjdXJyZW50Q2hhaW5OYW1lIiwiY3VycmVudENoYWluQmFsYW5jZUVudHJ5IiwidW5pZmllZEJhbGFuY2VEYXRhIiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJtb2NrQmFsYW5jZSIsInJlZmV0Y2giXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useNexusBalance.ts\n"));

/***/ })

});