"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useNexusBalance.ts":
/*!**************************************!*\
  !*** ./src/hooks/useNexusBalance.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNexusBalance: () => (/* binding */ useNexusBalance)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.5.5_react-dom@19.2.0_react@19.2.0__react@19.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/.pnpm/wagmi@2.18.0_@tanstack+query-core@5.90.3_@tanstack+react-query@5.90.3_react@19.2.0__@ty_e68084bb6772bb88120a89e86a8a9451/node_modules/wagmi/dist/esm/hooks/useAccount.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/.pnpm/wagmi@2.18.0_@tanstack+query-core@5.90.3_@tanstack+react-query@5.90.3_react@19.2.0__@ty_e68084bb6772bb88120a89e86a8a9451/node_modules/wagmi/dist/esm/hooks/useWalletClient.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/.pnpm/wagmi@2.18.0_@tanstack+query-core@5.90.3_@tanstack+react-query@5.90.3_react@19.2.0__@ty_e68084bb6772bb88120a89e86a8a9451/node_modules/wagmi/dist/esm/hooks/useBalance.js\");\n/* harmony import */ var _avail_project_nexus_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avail-project/nexus-core */ \"(app-pages-browser)/./node_modules/.pnpm/@avail-project+nexus-core@0.0.1-beta.0_bufferutil@4.0.9_google-protobuf@3.21.4_utf-8-va_56dd550c8b9e0639694cd9176377fa72/node_modules/@avail-project/nexus-core/dist/index.esm.js\");\n\n\n// Nexus SDKのインポート\n\n// Nexus SDKのインスタンスを作成\nconst nexusSDK = new _avail_project_nexus_core__WEBPACK_IMPORTED_MODULE_1__.NexusSDK({\n    // テストネット設定\n    network: 'testnet',\n    // デバッグモードを有効化\n    debug: true\n});\n// チェーン名のマッピング関数\nconst getChainName = (chainId)=>{\n    if (!chainId) return 'Unknown';\n    const chainMap = {\n        1: 'Ethereum',\n        11155111: 'Sepolia',\n        8453: 'Base',\n        84532: 'Base Sepolia',\n        42161: 'Arbitrum One',\n        421614: 'Arbitrum Sepolia',\n        10: 'Optimism',\n        11155420: 'Optimism Sepolia',\n        137: 'Polygon',\n        80002: 'Polygon Amoy'\n    };\n    return chainMap[chainId] || \"Chain \".concat(chainId);\n};\nconst useNexusBalance = ()=>{\n    const { address, isConnected, chainId } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useAccount)();\n    const { data: walletClient } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useWalletClient)();\n    const [unifiedBalance, setUnifiedBalance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [nexusInitialized, setNexusInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [lastConnectedAddress, setLastConnectedAddress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [walletClientReady, setWalletClientReady] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // 現在のチェーンの残高を取得\n    const { data: currentChainBalance } = (0,wagmi__WEBPACK_IMPORTED_MODULE_4__.useBalance)({\n        address: address,\n        chainId: chainId\n    });\n    const fetchUnifiedBalance = async ()=>{\n        console.log('fetchUnifiedBalance called with:', {\n            isConnected,\n            address,\n            walletClient: !!walletClient,\n            chainId\n        });\n        if (!isConnected || !address) {\n            setUnifiedBalance(null);\n            setError('Please connect your wallet first');\n            setLoading(false);\n            return;\n        }\n        if (!walletClient) {\n            setUnifiedBalance(null);\n            setError('Wallet client is not ready yet. Please wait a moment and try again.');\n            setLoading(false);\n            return;\n        }\n        setLoading(true);\n        setError(null);\n        try {\n            console.log('Fetching unified balance for address:', address);\n            // アドレスが変更された場合、Nexus SDKを再初期化\n            const shouldReinitialize = !nexusInitialized || lastConnectedAddress !== address;\n            if (shouldReinitialize) {\n                console.log('Initializing Nexus SDK with wallet client...');\n                // WalletClientをEthereumProvider形式に変換\n                const ethereumProvider = {\n                    ...walletClient,\n                    on: (event, _callback)=>{\n                        // イベントリスナーの実装（必要に応じて）\n                        console.log('Event listener added:', event);\n                        return ethereumProvider;\n                    },\n                    removeListener: (event, _callback)=>{\n                        // イベントリスナーの削除（必要に応じて）\n                        console.log('Event listener removed:', event);\n                        return ethereumProvider;\n                    }\n                };\n                await nexusSDK.initialize(ethereumProvider);\n                setNexusInitialized(true);\n                setLastConnectedAddress(address);\n                console.log('Nexus SDK initialized successfully for address:', address);\n            }\n            // Nexus SDKを使用して実際の残高を取得\n            // 複数のメソッドを試行して最適なデータを取得\n            let balances = null;\n            try {\n                // メソッド1: getUnifiedBalances() - 統合された残高\n                balances = await nexusSDK.getUnifiedBalances();\n                console.log('Nexus SDK getUnifiedBalances response:', balances);\n                console.log('Detailed analysis of each balance entry:');\n                balances.forEach((balance, index)=>{\n                    console.log(\"Balance \".concat(index + 1, \":\"), {\n                        symbol: balance.symbol,\n                        balance: balance.balance,\n                        balanceInFiat: balance.balanceInFiat,\n                        abstracted: balance.abstracted,\n                        breakdown: balance.breakdown,\n                        allKeys: Object.keys(balance)\n                    });\n                    // breakdown配列の詳細を確認\n                    if (balance.breakdown && Array.isArray(balance.breakdown)) {\n                        console.log(\"Breakdown for \".concat(balance.symbol, \":\"), balance.breakdown);\n                        balance.breakdown.forEach((item, breakdownIndex)=>{\n                            console.log(\"  Breakdown \".concat(breakdownIndex + 1, \":\"), {\n                                chain: item.chain,\n                                chainId: item.chainId,\n                                chainName: item.chainName,\n                                network: item.network,\n                                balance: item.balance,\n                                symbol: item.symbol,\n                                allKeys: Object.keys(item)\n                            });\n                            // chainオブジェクトの詳細を確認\n                            if (item.chain && typeof item.chain === 'object') {\n                                console.log(\"    Chain object details:\", {\n                                    chainId: item.chain.chainId,\n                                    name: item.chain.name,\n                                    id: item.chain.id,\n                                    network: item.chain.network,\n                                    allKeys: Object.keys(item.chain)\n                                });\n                            }\n                        });\n                    }\n                });\n            } catch (unifiedError) {\n                console.error('getUnifiedBalances failed:', unifiedError);\n                throw unifiedError;\n            }\n            // Nexus SDKのレスポンスを処理\n            // UserAsset[]形式のレスポンスを処理\n            if (balances && Array.isArray(balances) && balances.length > 0) {\n                console.log('Raw balances from Nexus SDK:', balances);\n                // breakdown配列から個別のチェーン別の残高を展開\n                const processedBalances = [];\n                balances.forEach((asset)=>{\n                    console.log('Processing asset:', asset.symbol);\n                    // breakdown配列がある場合は、各チェーンの残高を個別に処理\n                    if (asset.breakdown && Array.isArray(asset.breakdown)) {\n                        asset.breakdown.forEach((breakdownItem)=>{\n                            if (parseFloat(breakdownItem.balance) > 0) {\n                                const chainInfo = breakdownItem.chain;\n                                const chainId = (chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.id) || breakdownItem.chainId;\n                                const chainName = (chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.name) || breakdownItem.chainName || getChainName(chainId);\n                                processedBalances.push({\n                                    chain: chainName,\n                                    token: asset.symbol,\n                                    balance: breakdownItem.balance,\n                                    symbol: asset.symbol,\n                                    decimals: asset.decimals || 18,\n                                    usdValue: asset.balanceInFiat ? parseFloat(breakdownItem.balance) / parseFloat(asset.balance) * asset.balanceInFiat : 0,\n                                    chainId: chainId,\n                                    contractAddress: breakdownItem.contractAddress,\n                                    rawBalance: breakdownItem.rawBalance\n                                });\n                            }\n                        });\n                    } else {\n                        // breakdown配列がない場合は、統合された残高を処理\n                        const chainId = asset.chainId ? parseInt(asset.chainId.toString()) : undefined;\n                        processedBalances.push({\n                            chain: asset.chainName || asset.chain || asset.network || getChainName(chainId) || 'Unknown',\n                            token: asset.symbol || asset.token || 'Unknown',\n                            balance: asset.balance || asset.amount || asset.formattedBalance || '0',\n                            symbol: asset.symbol || 'Unknown',\n                            decimals: asset.decimals || 18,\n                            usdValue: asset.usdValue || asset.value || asset.priceUSD || asset.balanceInFiat || 0,\n                            chainId: chainId,\n                            contractAddress: asset.contractAddress,\n                            rawBalance: asset.rawBalance\n                        });\n                    }\n                });\n                // 総USD価値を計算\n                const totalUSD = processedBalances.reduce((sum, balance)=>{\n                    return sum + (balance.usdValue || 0);\n                }, 0);\n                // 現在のチェーンの残高を追加（重複を避けるため、Nexus SDKに含まれていない場合のみ）\n                if (currentChainBalance && chainId) {\n                    console.log('Checking current chain balance:', {\n                        chainId,\n                        symbol: currentChainBalance.symbol,\n                        balance: currentChainBalance.formatted,\n                        chainName: getChainName(chainId)\n                    });\n                    // 現在のチェーンの残高が既にNexus SDKの結果に含まれているかチェック\n                    const existingEntry = processedBalances.find((b)=>b.chainId === chainId && b.symbol === currentChainBalance.symbol);\n                    if (!existingEntry) {\n                        // Nexus SDKに含まれていない場合のみ追加\n                        const currentChainName = getChainName(chainId);\n                        const currentChainBalanceEntry = {\n                            chain: currentChainName,\n                            token: currentChainBalance.symbol,\n                            balance: currentChainBalance.formatted,\n                            symbol: currentChainBalance.symbol,\n                            decimals: currentChainBalance.decimals,\n                            usdValue: 0,\n                            chainId: chainId,\n                            contractAddress: undefined,\n                            rawBalance: currentChainBalance.value.toString()\n                        };\n                        processedBalances.push(currentChainBalanceEntry);\n                        console.log('Added current chain balance to list (not found in Nexus SDK)');\n                    } else {\n                        console.log('Current chain balance already exists in Nexus SDK results');\n                    }\n                } else {\n                    console.log('No current chain balance to add:', {\n                        currentChainBalance: !!currentChainBalance,\n                        chainId\n                    });\n                }\n                const unifiedBalanceData = {\n                    totalUSD,\n                    balances: processedBalances\n                };\n                setUnifiedBalance(unifiedBalanceData);\n            } else {\n                // 残高が見つからない場合のフォールバック\n                setUnifiedBalance({\n                    totalUSD: 0,\n                    balances: []\n                });\n            }\n        } catch (err) {\n            console.error('Nexus SDK error:', err);\n            // エラーの詳細を確認\n            let errorMessage = 'Nexus SDK temporarily unavailable, showing demo data';\n            if (err instanceof Error) {\n                if (err.message.includes('timeout')) {\n                    errorMessage = 'Nexus SDK API timeout, showing demo data';\n                } else if (err.message.includes('Failed to fetch')) {\n                    errorMessage = 'Network error - Nexus SDK API unavailable, showing demo data';\n                } else {\n                    errorMessage = \"Nexus SDK error: \".concat(err.message, \", showing demo data\");\n                }\n            }\n            // Nexus SDKが利用できない場合のフォールバック（モックデータ）\n            console.log('Falling back to mock data due to SDK error');\n            const mockBalance = {\n                totalUSD: 1250.75,\n                balances: [\n                    {\n                        chain: 'Ethereum',\n                        token: 'ETH',\n                        balance: '0.5',\n                        symbol: 'ETH',\n                        decimals: 18,\n                        usdValue: 1000\n                    },\n                    {\n                        chain: 'Ethereum',\n                        token: 'USDC',\n                        balance: '1000',\n                        symbol: 'USDC',\n                        decimals: 6,\n                        usdValue: 1000\n                    },\n                    {\n                        chain: 'Base',\n                        token: 'ETH',\n                        balance: '0.1',\n                        symbol: 'ETH',\n                        decimals: 18,\n                        usdValue: 200\n                    },\n                    {\n                        chain: 'Arbitrum',\n                        token: 'USDT',\n                        balance: '500',\n                        symbol: 'USDT',\n                        decimals: 6,\n                        usdValue: 500\n                    },\n                    {\n                        chain: 'Polygon',\n                        token: 'MATIC',\n                        balance: '100',\n                        symbol: 'MATIC',\n                        decimals: 18,\n                        usdValue: 50.75\n                    }\n                ]\n            };\n            setUnifiedBalance(mockBalance);\n            setError(errorMessage);\n        } finally{\n            setLoading(false);\n        }\n    };\n    // ウォレット接続状態の変化を監視\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useNexusBalance.useEffect\": ()=>{\n            if (!isConnected || !address) {\n                // ウォレットが切断された場合、状態をリセット\n                setUnifiedBalance(null);\n                setError(null);\n                setNexusInitialized(false);\n                setLastConnectedAddress(null);\n            }\n        }\n    }[\"useNexusBalance.useEffect\"], [\n        isConnected,\n        address\n    ]);\n    return {\n        unifiedBalance,\n        loading,\n        error,\n        refetch: fetchUnifiedBalance\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useNexusBalance.ts\n"));

/***/ })

});